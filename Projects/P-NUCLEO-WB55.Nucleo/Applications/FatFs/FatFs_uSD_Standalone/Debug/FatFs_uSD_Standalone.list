
FatFs_uSD_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000004  08006d4c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000738  20000088  08006dd0  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200007c0  08006dd0  000207c0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000f40c  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00011f0f  00000000  00000000  0002f4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027fd  00000000  00000000  000413d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001100  00000000  00000000  00043bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000d3e8c  00000000  00000000  00044cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  00118b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000219fc  00000000  00000000  00119b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013b524  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045c8  00000000  00000000  0013b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	08006b34 	.word	0x08006b34

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	08006b34 	.word	0x08006b34

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000198:	480c      	ldr	r0, [pc, #48]	; (80001cc <LoopForever+0x8>)
 800019a:	490d      	ldr	r1, [pc, #52]	; (80001d0 <LoopForever+0xc>)
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <LoopForever+0x10>)
 800019e:	2300      	movs	r3, #0
 80001a0:	f7ff ffef 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <LoopForever+0x14>)
 80001a6:	490d      	ldr	r1, [pc, #52]	; (80001dc <LoopForever+0x18>)
 80001a8:	2300      	movs	r3, #0
 80001aa:	f7ff fff0 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <LoopForever+0x1c>)
 80001b0:	490c      	ldr	r1, [pc, #48]	; (80001e4 <LoopForever+0x20>)
 80001b2:	2300      	movs	r3, #0
 80001b4:	f7ff ffeb 	bl	800018e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001b8:	f000 f900 	bl	80003bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001bc:	f006 fbc4 	bl	8006948 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f840 	bl	8000244 <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000004 	.word	0x20000004
 80001d0:	20000088 	.word	0x20000088
 80001d4:	08006d4c 	.word	0x08006d4c
  INIT_BSS _sbss, _ebss
 80001d8:	20000088 	.word	0x20000088
 80001dc:	200007c0 	.word	0x200007c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>
	...

080001ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <_sbrk+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d102      	bne.n	8000202 <_sbrk+0x16>
		heap_end = &end;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <_sbrk+0x50>)
 80001fe:	4a10      	ldr	r2, [pc, #64]	; (8000240 <_sbrk+0x54>)
 8000200:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <_sbrk+0x50>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <_sbrk+0x50>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	466a      	mov	r2, sp
 8000212:	4293      	cmp	r3, r2
 8000214:	d907      	bls.n	8000226 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000216:	f006 fb91 	bl	800693c <__errno>
 800021a:	4602      	mov	r2, r0
 800021c:	230c      	movs	r3, #12
 800021e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	e006      	b.n	8000234 <_sbrk+0x48>
	}

	heap_end += incr;
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <_sbrk+0x50>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <_sbrk+0x50>)
 8000230:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000232:	68fb      	ldr	r3, [r7, #12]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000a4 	.word	0x200000a4
 8000240:	200007c0 	.word	0x200007c0

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f001 fa26 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f826 	bl	800029c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED_OK and LED_ERROR */
  BSP_LED_Init(LED_OK);
 8000250:	2001      	movs	r0, #1
 8000252:	f001 f87f 	bl	8001354 <BSP_LED_Init>
  BSP_LED_Init(LED_ERROR);
 8000256:	2002      	movs	r0, #2
 8000258:	f001 f87c 	bl	8001354 <BSP_LED_Init>

  /* Initialize the micro SD Card */
  BSP_SD_Init();
 800025c:	f000 f9a6 	bl	80005ac <BSP_SD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  if (MX_FATFS_Init() != APP_OK) {
 8000260:	f003 fa9c 	bl	800379c <MX_FATFS_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <main+0x2a>
    Error_Handler();
 800026a:	f000 f868 	bl	800033e <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessStatus = MX_FATFS_Process();
 800026e:	f003 faad 	bl	80037cc <MX_FATFS_Process>
 8000272:	4602      	mov	r2, r0
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x54>)
 8000276:	601a      	str	r2, [r3, #0]
    /* Call middleware background task */
    if (ProcessStatus == APP_ERROR)
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <main+0x54>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000280:	d102      	bne.n	8000288 <main+0x44>
    {
      Error_Handler();
 8000282:	f000 f85c 	bl	800033e <Error_Handler>
 8000286:	e7f2      	b.n	800026e <main+0x2a>
    }
    else
    {
      BSP_LED_Off(LED_ERROR);
 8000288:	2002      	movs	r0, #2
 800028a:	f001 f8b7 	bl	80013fc <BSP_LED_Off>
      BSP_LED_On(LED_OK);
 800028e:	2001      	movs	r0, #1
 8000290:	f001 f89a 	bl	80013c8 <BSP_LED_On>
    ProcessStatus = MX_FATFS_Process();
 8000294:	e7eb      	b.n	800026e <main+0x2a>
 8000296:	bf00      	nop
 8000298:	200000a8 	.word	0x200000a8

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09a      	sub	sp, #104	; 0x68
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0320 	add.w	r3, r7, #32
 80002a6:	2248      	movs	r2, #72	; 0x48
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f006 fb80 	bl	80069b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c2:	2320      	movs	r3, #32
 80002c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002ca:	2300      	movs	r3, #0
 80002cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ce:	2360      	movs	r3, #96	; 0x60
 80002d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d6:	2301      	movs	r3, #1
 80002d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002de:	2320      	movs	r3, #32
 80002e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80002ee:	2304      	movs	r3, #4
 80002f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f87a 	bl	80023f0 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000302:	f000 f81c 	bl	800033e <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000306:	236f      	movs	r3, #111	; 0x6f
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2103      	movs	r1, #3
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fbc0 	bl	8002aac <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 f804 	bl	800033e <Error_Handler>
  /** Initializes the peripherals clocks 
  */
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000336:	bf00      	nop
 8000338:	3768      	adds	r7, #104	; 0x68
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_OK);
 8000342:	2001      	movs	r0, #1
 8000344:	f001 f85a 	bl	80013fc <BSP_LED_Off>
  BSP_LED_On(LED_ERROR);
 8000348:	2002      	movs	r0, #2
 800034a:	f001 f83d 	bl	80013c8 <BSP_LED_On>
  while(1)
 800034e:	e7fe      	b.n	800034e <Error_Handler+0x10>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <HardFault_Handler+0x4>

08000372 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000376:	e7fe      	b.n	8000376 <MemManage_Handler+0x4>

08000378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037c:	e7fe      	b.n	800037c <BusFault_Handler+0x4>

0800037e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <UsageFault_Handler+0x4>

08000384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b2:	f001 f9cb 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <SystemInit+0xa0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80003c6:	4b25      	ldr	r3, [pc, #148]	; (800045c <SystemInit+0xa0>)
 80003c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <SystemInit+0xa0>)
 80003ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80003ee:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80003f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <SystemInit+0xa4>)
 80003fc:	4013      	ands	r3, r2
 80003fe:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800040c:	f023 0305 	bic.w	r3, r3, #5
 8000410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800041c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <SystemInit+0xa8>)
 800042e:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <SystemInit+0xa8>)
 8000436:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000ed00 	.word	0xe000ed00
 8000460:	faf6fefb 	.word	0xfaf6fefb
 8000464:	22041000 	.word	0x22041000

08000468 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b087      	sub	sp, #28
 800046c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	091b      	lsrs	r3, r3, #4
 8000476:	f003 030f 	and.w	r3, r3, #15
 800047a:	4a47      	ldr	r2, [pc, #284]	; (8000598 <SystemCoreClockUpdate+0x130>)
 800047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000480:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f003 030c 	and.w	r3, r3, #12
 800048c:	2b0c      	cmp	r3, #12
 800048e:	d867      	bhi.n	8000560 <SystemCoreClockUpdate+0xf8>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <SystemCoreClockUpdate+0x30>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004cd 	.word	0x080004cd
 800049c:	08000561 	.word	0x08000561
 80004a0:	08000561 	.word	0x08000561
 80004a4:	08000561 	.word	0x08000561
 80004a8:	080004d5 	.word	0x080004d5
 80004ac:	08000561 	.word	0x08000561
 80004b0:	08000561 	.word	0x08000561
 80004b4:	08000561 	.word	0x08000561
 80004b8:	080004dd 	.word	0x080004dd
 80004bc:	08000561 	.word	0x08000561
 80004c0:	08000561 	.word	0x08000561
 80004c4:	08000561 	.word	0x08000561
 80004c8:	080004e5 	.word	0x080004e5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80004cc:	4a33      	ldr	r2, [pc, #204]	; (800059c <SystemCoreClockUpdate+0x134>)
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	6013      	str	r3, [r2, #0]
      break;
 80004d2:	e049      	b.n	8000568 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <SystemCoreClockUpdate+0x134>)
 80004d6:	4a32      	ldr	r2, [pc, #200]	; (80005a0 <SystemCoreClockUpdate+0x138>)
 80004d8:	601a      	str	r2, [r3, #0]
      break;
 80004da:	e045      	b.n	8000568 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <SystemCoreClockUpdate+0x134>)
 80004de:	4a31      	ldr	r2, [pc, #196]	; (80005a4 <SystemCoreClockUpdate+0x13c>)
 80004e0:	601a      	str	r2, [r3, #0]
      break;
 80004e2:	e041      	b.n	8000568 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	f003 0303 	and.w	r3, r3, #3
 80004ee:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	091b      	lsrs	r3, r3, #4
 80004f8:	f003 0307 	and.w	r3, r3, #7
 80004fc:	3301      	adds	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d105      	bne.n	8000512 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000506:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <SystemCoreClockUpdate+0x138>)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	e00d      	b.n	800052e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d105      	bne.n	8000524 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000518:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <SystemCoreClockUpdate+0x13c>)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e004      	b.n	800052e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800052e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	0f5b      	lsrs	r3, r3, #29
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <SystemCoreClockUpdate+0x134>)
 800055c:	6013      	str	r3, [r2, #0]
      break;
 800055e:	e003      	b.n	8000568 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <SystemCoreClockUpdate+0x134>)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	6013      	str	r3, [r2, #0]
      break;
 8000566:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <SystemCoreClockUpdate+0x140>)
 8000576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <SystemCoreClockUpdate+0x134>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <SystemCoreClockUpdate+0x134>)
 8000588:	6013      	str	r3, [r2, #0]

}
 800058a:	bf00      	nop
 800058c:	371c      	adds	r7, #28
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	08006c48 	.word	0x08006c48
 800059c:	20000004 	.word	0x20000004
 80005a0:	00f42400 	.word	0x00f42400
 80005a4:	007a1200 	.word	0x007a1200
 80005a8:	08006c08 	.word	0x08006c08

080005ac <BSP_SD_Init>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure IO functionalities for SD pin */
  SD_IO_Init();
 80005b0:	f000 ffe8 	bl	8001584 <SD_IO_Init>

  /* SD detection pin is not physically mapped on the Adafruit shield */
  SdStatus = SD_PRESENT;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <BSP_SD_Init+0x18>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]

  /* SD initialized and set to SPI mode properly */
  return SD_GoIdleState();
 80005ba:	f000 fd5b 	bl	8001074 <SD_GoIdleState>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000ac 	.word	0x200000ac

080005c8 <BSP_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_GetCardInfo(SD_CardInfo *pCardInfo)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint8_t status;

  status = SD_GetCSDRegister(&(pCardInfo->Csd));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f9c4 	bl	8000960 <SD_GetCSDRegister>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3318      	adds	r3, #24
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fbbf 	bl	8000d64 <SD_GetCIDRegister>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	73fb      	strb	r3, [r7, #15]
  if(flag_SDHC == 1 )
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <BSP_SD_GetCardInfo+0xdc>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d11d      	bne.n	8000634 <BSP_SD_GetCardInfo+0x6c>
  {
    pCardInfo->LogBlockSize = 512;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8000610:	3301      	adds	r3, #1
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	029a      	lsls	r2, r3, #10
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800062a:	fbb2 f2f3 	udiv	r2, r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
 8000632:	e032      	b.n	800069a <BSP_SD_GetCardInfo+0xd2>
  }
  else
  {
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	891b      	ldrh	r3, [r3, #8]
 8000638:	f3c3 038b 	ubfx	r3, r3, #2, #12
 800063c:	b29b      	uxth	r3, r3
 800063e:	3301      	adds	r3, #1
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7b1b      	ldrb	r3, [r3, #12]
 800064e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3302      	adds	r3, #2
 8000656:	409a      	lsls	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockSize = 512;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	2301      	movs	r3, #1
 8000672:	4093      	lsls	r3, r2
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000682:	fb02 f203 	mul.w	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000692:	fbb2 f2f3 	udiv	r2, r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return status;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000ae 	.word	0x200000ae

080006a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6178      	str	r0, [r7, #20]
 80006b0:	6139      	str	r1, [r7, #16]
 80006b2:	60fa      	str	r2, [r7, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t addr;
  uint8_t retr = BSP_SD_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t *ptr = NULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 80006c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c8:	83fb      	strh	r3, [r7, #30]

  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80006ca:	8bfa      	ldrh	r2, [r7, #30]
 80006cc:	f107 0018 	add.w	r0, r7, #24
 80006d0:	2300      	movs	r3, #0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23ff      	movs	r3, #255	; 0xff
 80006d6:	2110      	movs	r1, #16
 80006d8:	f000 fbf8 	bl	8000ecc <SD_SendCmd>
  SD_IO_CSState(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 ff9d 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	f000 ffc7 	bl	8001676 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 80006e8:	7e3b      	ldrb	r3, [r7, #24]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d15e      	bne.n	80007ac <BSP_SD_ReadBlocks+0x104>
  {
     goto error;
  }

  ptr = malloc(sizeof(uint8_t)*BlockSize);
 80006ee:	8bfb      	ldrh	r3, [r7, #30]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 f94d 	bl	8006990 <malloc>
 80006f6:	4603      	mov	r3, r0
 80006f8:	623b      	str	r3, [r7, #32]
  if( ptr == NULL )
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d057      	beq.n	80007b0 <BSP_SD_ReadBlocks+0x108>
  {
     goto error;
  }
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8000700:	8bfb      	ldrh	r3, [r7, #30]
 8000702:	461a      	mov	r2, r3
 8000704:	21ff      	movs	r1, #255	; 0xff
 8000706:	6a38      	ldr	r0, [r7, #32]
 8000708:	f006 f952 	bl	80069b0 <memset>

  /* Initialize the address */
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <BSP_SD_ReadBlocks+0x138>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d001      	beq.n	8000718 <BSP_SD_ReadBlocks+0x70>
 8000714:	8bfb      	ldrh	r3, [r7, #30]
 8000716:	e000      	b.n	800071a <BSP_SD_ReadBlocks+0x72>
 8000718:	2301      	movs	r3, #1
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Data transfer */
  while (NumOfBlocks--)
 8000722:	e03a      	b.n	800079a <BSP_SD_ReadBlocks+0xf2>
  {
    /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
    /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000724:	4638      	mov	r0, r7
 8000726:	2300      	movs	r3, #0
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800072e:	2111      	movs	r1, #17
 8000730:	f000 fbcc 	bl	8000ecc <SD_SendCmd>
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	463a      	mov	r2, r7
 800073a:	6810      	ldr	r0, [r2, #0]
 800073c:	6018      	str	r0, [r3, #0]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	711a      	strb	r2, [r3, #4]
    if ( response.r1 != SD_R1_NO_ERROR)
 8000742:	7e3b      	ldrb	r3, [r7, #24]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d135      	bne.n	80007b4 <BSP_SD_ReadBlocks+0x10c>
    {
      goto error;
    }

    /* Now look for the data token to signify the start of the data */
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000748:	20fe      	movs	r0, #254	; 0xfe
 800074a:	f000 fdaf 	bl	80012ac <SD_WaitData>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d131      	bne.n	80007b8 <BSP_SD_ReadBlocks+0x110>
    {
      /* Read the SD block data : read NumByteToRead data */
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	4413      	add	r3, r2
 800075a:	8bfa      	ldrh	r2, [r7, #30]
 800075c:	4619      	mov	r1, r3
 800075e:	6a38      	ldr	r0, [r7, #32]
 8000760:	f000 ff78 	bl	8001654 <SD_IO_WriteReadData>

      /* Set next read address*/
      offset += BlockSize;
 8000764:	8bfb      	ldrh	r3, [r7, #30]
 8000766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000768:	4413      	add	r3, r2
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <BSP_SD_ReadBlocks+0x138>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d102      	bne.n	800077a <BSP_SD_ReadBlocks+0xd2>
 8000774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000776:	3301      	adds	r3, #1
 8000778:	e002      	b.n	8000780 <BSP_SD_ReadBlocks+0xd8>
 800077a:	8bfa      	ldrh	r2, [r7, #30]
 800077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077e:	4413      	add	r3, r2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28

      /* get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000782:	20ff      	movs	r0, #255	; 0xff
 8000784:	f000 ff77 	bl	8001676 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000788:	20ff      	movs	r0, #255	; 0xff
 800078a:	f000 ff74 	bl	8001676 <SD_IO_WriteByte>
    {
      goto error;
    }

    /* End the command data read cycle */
    SD_IO_CSState(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 ff44 	bl	800161c <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000794:	20ff      	movs	r0, #255	; 0xff
 8000796:	f000 ff6e 	bl	8001676 <SD_IO_WriteByte>
  while (NumOfBlocks--)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	60fa      	str	r2, [r7, #12]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1bf      	bne.n	8000724 <BSP_SD_ReadBlocks+0x7c>
  }

  retr = BSP_SD_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007aa:	e006      	b.n	80007ba <BSP_SD_ReadBlocks+0x112>
     goto error;
 80007ac:	bf00      	nop
 80007ae:	e004      	b.n	80007ba <BSP_SD_ReadBlocks+0x112>
     goto error;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <BSP_SD_ReadBlocks+0x112>
      goto error;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <BSP_SD_ReadBlocks+0x112>
      goto error;
 80007b8:	bf00      	nop

error :
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 ff2e 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007c0:	20ff      	movs	r0, #255	; 0xff
 80007c2:	f000 ff58 	bl	8001676 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <BSP_SD_ReadBlocks+0x12a>
 80007cc:	6a38      	ldr	r0, [r7, #32]
 80007ce:	f006 f8e7 	bl	80069a0 <free>

  /* Return the reponse */
  return retr;
 80007d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000ae 	.word	0x200000ae

080007e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6178      	str	r0, [r7, #20]
 80007ec:	6139      	str	r1, [r7, #16]
 80007ee:	60fa      	str	r2, [r7, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t addr;
  uint8_t retr = BSP_SD_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t *ptr = NULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 8000800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000804:	83fb      	strh	r3, [r7, #30]

  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000806:	8bfa      	ldrh	r2, [r7, #30]
 8000808:	f107 0018 	add.w	r0, r7, #24
 800080c:	2300      	movs	r3, #0
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	23ff      	movs	r3, #255	; 0xff
 8000812:	2110      	movs	r1, #16
 8000814:	f000 fb5a 	bl	8000ecc <SD_SendCmd>
  SD_IO_CSState(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 feff 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800081e:	20ff      	movs	r0, #255	; 0xff
 8000820:	f000 ff29 	bl	8001676 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000824:	7e3b      	ldrb	r3, [r7, #24]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d160      	bne.n	80008ec <BSP_SD_WriteBlocks+0x108>
  {
    goto error;
  }

  ptr = malloc(sizeof(uint8_t)*BlockSize);
 800082a:	8bfb      	ldrh	r3, [r7, #30]
 800082c:	4618      	mov	r0, r3
 800082e:	f006 f8af 	bl	8006990 <malloc>
 8000832:	4603      	mov	r3, r0
 8000834:	623b      	str	r3, [r7, #32]
  if (ptr == NULL)
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d059      	beq.n	80008f0 <BSP_SD_WriteBlocks+0x10c>
  {
    goto error;
  }

  /* Initialize the address */
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 800083c:	4b38      	ldr	r3, [pc, #224]	; (8000920 <BSP_SD_WriteBlocks+0x13c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d001      	beq.n	8000848 <BSP_SD_WriteBlocks+0x64>
 8000844:	8bfb      	ldrh	r3, [r7, #30]
 8000846:	e000      	b.n	800084a <BSP_SD_WriteBlocks+0x66>
 8000848:	2301      	movs	r3, #1
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Data transfer */
  while (NumOfBlocks--)
 8000852:	e042      	b.n	80008da <BSP_SD_WriteBlocks+0xf6>
  {
    /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
       Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000854:	4638      	mov	r0, r7
 8000856:	2300      	movs	r3, #0
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800085e:	2118      	movs	r1, #24
 8000860:	f000 fb34 	bl	8000ecc <SD_SendCmd>
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	463a      	mov	r2, r7
 800086a:	6810      	ldr	r0, [r2, #0]
 800086c:	6018      	str	r0, [r3, #0]
 800086e:	7912      	ldrb	r2, [r2, #4]
 8000870:	711a      	strb	r2, [r3, #4]
    if (response.r1 != SD_R1_NO_ERROR)
 8000872:	7e3b      	ldrb	r3, [r7, #24]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d13d      	bne.n	80008f4 <BSP_SD_WriteBlocks+0x110>
    {
      goto error;
    }

    /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000878:	20ff      	movs	r0, #255	; 0xff
 800087a:	f000 fefc 	bl	8001676 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800087e:	20ff      	movs	r0, #255	; 0xff
 8000880:	f000 fef9 	bl	8001676 <SD_IO_WriteByte>

    /* Send the data token to signify the start of the data */
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8000884:	20fe      	movs	r0, #254	; 0xfe
 8000886:	f000 fef6 	bl	8001676 <SD_IO_WriteByte>

    /* Write the block data to SD */
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	4413      	add	r3, r2
 8000890:	8bfa      	ldrh	r2, [r7, #30]
 8000892:	6a39      	ldr	r1, [r7, #32]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fedd 	bl	8001654 <SD_IO_WriteReadData>

    /* Set next write address */
    offset += BlockSize;
 800089a:	8bfb      	ldrh	r3, [r7, #30]
 800089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089e:	4413      	add	r3, r2
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <BSP_SD_WriteBlocks+0x13c>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d102      	bne.n	80008b0 <BSP_SD_WriteBlocks+0xcc>
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	3301      	adds	r3, #1
 80008ae:	e002      	b.n	80008b6 <BSP_SD_WriteBlocks+0xd2>
 80008b0:	8bfa      	ldrh	r2, [r7, #30]
 80008b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b4:	4413      	add	r3, r2
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Put CRC bytes (not really needed by us, but required by SD) */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	f000 fedc 	bl	8001676 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008be:	20ff      	movs	r0, #255	; 0xff
 80008c0:	f000 fed9 	bl	8001676 <SD_IO_WriteByte>

    /* Read data response */
    if (SD_GetDataResponse() != SD_DATA_OK)
 80008c4:	f000 fba4 	bl	8001010 <SD_GetDataResponse>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d114      	bne.n	80008f8 <BSP_SD_WriteBlocks+0x114>
    {
      /* Set response value to failure */
      goto error;
    }

    SD_IO_CSState(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fea4 	bl	800161c <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008d4:	20ff      	movs	r0, #255	; 0xff
 80008d6:	f000 fece 	bl	8001676 <SD_IO_WriteByte>
  while (NumOfBlocks--)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	60fa      	str	r2, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1b7      	bne.n	8000854 <BSP_SD_WriteBlocks+0x70>
  }
  retr = BSP_SD_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008ea:	e006      	b.n	80008fa <BSP_SD_WriteBlocks+0x116>
    goto error;
 80008ec:	bf00      	nop
 80008ee:	e004      	b.n	80008fa <BSP_SD_WriteBlocks+0x116>
    goto error;
 80008f0:	bf00      	nop
 80008f2:	e002      	b.n	80008fa <BSP_SD_WriteBlocks+0x116>
      goto error;
 80008f4:	bf00      	nop
 80008f6:	e000      	b.n	80008fa <BSP_SD_WriteBlocks+0x116>
      goto error;
 80008f8:	bf00      	nop

error :
  if(ptr != NULL) free(ptr);
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <BSP_SD_WriteBlocks+0x122>
 8000900:	6a38      	ldr	r0, [r7, #32]
 8000902:	f006 f84d 	bl	80069a0 <free>
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fe88 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800090c:	20ff      	movs	r0, #255	; 0xff
 800090e:	f000 feb2 	bl	8001676 <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000916:	4618      	mov	r0, r3
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000ae 	.word	0x200000ae

08000924 <BSP_SD_GetCardState>:
  * @brief  Returns the SD status.
  * @param  None
  * @retval The SD status.
  */
uint8_t BSP_SD_GetCardState(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef retr;

  /* Send CMD13 (SD_SEND_STATUS) to get SD status */
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 800092a:	4638      	mov	r0, r7
 800092c:	2302      	movs	r3, #2
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	2200      	movs	r2, #0
 8000934:	210d      	movs	r1, #13
 8000936:	f000 fac9 	bl	8000ecc <SD_SendCmd>
  SD_IO_CSState(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fe6e 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000940:	20ff      	movs	r0, #255	; 0xff
 8000942:	f000 fe98 	bl	8001676 <SD_IO_WriteByte>

  /* Find SD status according to card state */
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8000946:	783b      	ldrb	r3, [r7, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <BSP_SD_GetCardState+0x32>
 800094c:	787b      	ldrb	r3, [r7, #1]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <BSP_SD_GetCardState+0x32>
  {
    return BSP_SD_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <BSP_SD_GetCardState+0x34>
  }

  return BSP_SD_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd: pointer on an SCD register structure
  * @retval SD status
  */
uint8_t SD_GetCSDRegister(SD_CSD* Csd)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08d      	sub	sp, #52	; 0x34
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
  uint16_t counter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t CSD_Tab[16];
  uint8_t retr = BSP_SD_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  SD_CmdAnswer_typedef response;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000972:	f107 000c 	add.w	r0, r7, #12
 8000976:	2300      	movs	r3, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	23ff      	movs	r3, #255	; 0xff
 800097c:	2200      	movs	r2, #0
 800097e:	2109      	movs	r1, #9
 8000980:	f000 faa4 	bl	8000ecc <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f040 81dd 	bne.w	8000d46 <SD_GetCSDRegister+0x3e6>
  {
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 800098c:	20fe      	movs	r0, #254	; 0xfe
 800098e:	f000 fc8d 	bl	80012ac <SD_WaitData>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	f040 81d6 	bne.w	8000d46 <SD_GetCSDRegister+0x3e6>
    {
      for (counter = 0; counter < 16; counter++)
 800099a:	2300      	movs	r3, #0
 800099c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800099e:	e00d      	b.n	80009bc <SD_GetCSDRegister+0x5c>
      {
        /* Store CSD register value on CSD_Tab */
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009a0:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	f000 fe67 	bl	8001676 <SD_IO_WriteByte>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	4423      	add	r3, r4
 80009b2:	f803 2c14 	strb.w	r2, [r3, #-20]
      for (counter = 0; counter < 16; counter++)
 80009b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b8:	3301      	adds	r3, #1
 80009ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	d9ee      	bls.n	80009a0 <SD_GetCSDRegister+0x40>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	f000 fe57 	bl	8001676 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	f000 fe54 	bl	8001676 <SD_IO_WriteByte>
      /*************************************************************************
        CSD header decoding
      *************************************************************************/

      /* Byte 0 */
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 80009ce:	7d3b      	ldrb	r3, [r7, #20]
 80009d0:	099b      	lsrs	r3, r3, #6
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	7813      	ldrb	r3, [r2, #0]
 80009de:	f361 0301 	bfi	r3, r1, #0, #2
 80009e2:	7013      	strb	r3, [r2, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 80009e4:	7d3b      	ldrb	r3, [r7, #20]
 80009e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009ea:	b2d9      	uxtb	r1, r3
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	7813      	ldrb	r3, [r2, #0]
 80009f0:	f361 0387 	bfi	r3, r1, #2, #6
 80009f4:	7013      	strb	r3, [r2, #0]

      /* Byte 1 */
      Csd->TAAC = CSD_Tab[1];
 80009f6:	7d7a      	ldrb	r2, [r7, #21]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	705a      	strb	r2, [r3, #1]

      /* Byte 2 */
      Csd->NSAC = CSD_Tab[2];
 80009fc:	7dba      	ldrb	r2, [r7, #22]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	709a      	strb	r2, [r3, #2]

      /* Byte 3 */
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8000a02:	7dfa      	ldrb	r2, [r7, #23]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	70da      	strb	r2, [r3, #3]

      /* Byte 4/5 */
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8000a08:	7e3b      	ldrb	r3, [r7, #24]
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	7e7b      	ldrb	r3, [r7, #25]
 8000a10:	091b      	lsrs	r3, r3, #4
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a1e:	b299      	uxth	r1, r3
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	8893      	ldrh	r3, [r2, #4]
 8000a24:	f361 030b 	bfi	r3, r1, #0, #12
 8000a28:	8093      	strh	r3, [r2, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8000a2a:	7e7b      	ldrb	r3, [r7, #25]
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	b2d9      	uxtb	r1, r3
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7953      	ldrb	r3, [r2, #5]
 8000a36:	f361 1307 	bfi	r3, r1, #4, #4
 8000a3a:	7153      	strb	r3, [r2, #5]

      /* Byte 6 */
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000a3c:	7ebb      	ldrb	r3, [r7, #26]
 8000a3e:	09db      	lsrs	r3, r3, #7
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2d9      	uxtb	r1, r3
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7993      	ldrb	r3, [r2, #6]
 8000a4c:	f361 0300 	bfi	r3, r1, #0, #1
 8000a50:	7193      	strb	r3, [r2, #6]
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8000a52:	7ebb      	ldrb	r3, [r7, #26]
 8000a54:	119b      	asrs	r3, r3, #6
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2d9      	uxtb	r1, r3
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	7993      	ldrb	r3, [r2, #6]
 8000a60:	f361 0341 	bfi	r3, r1, #1, #1
 8000a64:	7193      	strb	r3, [r2, #6]
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8000a66:	7ebb      	ldrb	r3, [r7, #26]
 8000a68:	115b      	asrs	r3, r3, #5
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	7993      	ldrb	r3, [r2, #6]
 8000a74:	f361 0382 	bfi	r3, r1, #2, #1
 8000a78:	7193      	strb	r3, [r2, #6]
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8000a7a:	7ebb      	ldrb	r3, [r7, #26]
 8000a7c:	111b      	asrs	r3, r3, #4
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	b2d9      	uxtb	r1, r3
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	7993      	ldrb	r3, [r2, #6]
 8000a88:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a8c:	7193      	strb	r3, [r2, #6]

      /*************************************************************************
        CSD v1/v2 decoding
      *************************************************************************/

      if(flag_SDHC == 0)
 8000a8e:	4bb4      	ldr	r3, [pc, #720]	; (8000d60 <SD_GetCSDRegister+0x400>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d15f      	bne.n	8000b56 <SD_GetCSDRegister+0x1f6>
      {
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8000a96:	7ebb      	ldrb	r3, [r7, #26]
 8000a98:	109b      	asrs	r3, r3, #2
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	b2d9      	uxtb	r1, r3
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	7a13      	ldrb	r3, [r2, #8]
 8000aa4:	f361 0301 	bfi	r3, r1, #0, #2
 8000aa8:	7213      	strb	r3, [r2, #8]

        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000aaa:	7ebb      	ldrb	r3, [r7, #26]
 8000aac:	029b      	lsls	r3, r3, #10
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ab4:	b21a      	sxth	r2, r3
                                    |  (CSD_Tab[7] << 2)
 8000ab6:	7efb      	ldrb	r3, [r7, #27]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21a      	sxth	r2, r3
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000ac0:	7f3b      	ldrb	r3, [r7, #28]
 8000ac2:	099b      	lsrs	r3, r3, #6
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ad0:	b299      	uxth	r1, r3
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	8913      	ldrh	r3, [r2, #8]
 8000ad6:	f361 038d 	bfi	r3, r1, #2, #12
 8000ada:	8113      	strh	r3, [r2, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000adc:	7f3b      	ldrb	r3, [r7, #28]
 8000ade:	10db      	asrs	r3, r3, #3
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	7a93      	ldrb	r3, [r2, #10]
 8000aea:	f361 0302 	bfi	r3, r1, #0, #3
 8000aee:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8000af0:	7f3b      	ldrb	r3, [r7, #28]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	b2d9      	uxtb	r1, r3
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7a93      	ldrb	r3, [r2, #10]
 8000afc:	f361 03c5 	bfi	r3, r1, #3, #3
 8000b00:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000b02:	7f7b      	ldrb	r3, [r7, #29]
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	b2d9      	uxtb	r1, r3
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	7ad3      	ldrb	r3, [r2, #11]
 8000b12:	f361 0302 	bfi	r3, r1, #0, #3
 8000b16:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000b18:	7f7b      	ldrb	r3, [r7, #29]
 8000b1a:	109b      	asrs	r3, r3, #2
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	7ad3      	ldrb	r3, [r2, #11]
 8000b26:	f361 03c5 	bfi	r3, r1, #3, #3
 8000b2a:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000b2c:	7f7b      	ldrb	r3, [r7, #29]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	f003 0306 	and.w	r3, r3, #6
 8000b36:	b25a      	sxtb	r2, r3
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8000b38:	7fbb      	ldrb	r3, [r7, #30]
 8000b3a:	09db      	lsrs	r3, r3, #7
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	b2d9      	uxtb	r1, r3
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	7b13      	ldrb	r3, [r2, #12]
 8000b4e:	f361 0302 	bfi	r3, r1, #0, #3
 8000b52:	7313      	strb	r3, [r2, #12]
 8000b54:	e028      	b.n	8000ba8 <SD_GetCSDRegister+0x248>
      }
      else
      {
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000b56:	7ebb      	ldrb	r3, [r7, #26]
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	7efb      	ldrb	r3, [r7, #27]
 8000b64:	099b      	lsrs	r3, r3, #6
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	7a13      	ldrb	r3, [r2, #8]
 8000b78:	f361 0305 	bfi	r3, r1, #0, #6
 8000b7c:	7213      	strb	r3, [r2, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000b7e:	7efb      	ldrb	r3, [r7, #27]
 8000b80:	041b      	lsls	r3, r3, #16
 8000b82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8000b86:	7f3b      	ldrb	r3, [r7, #28]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	7f7a      	ldrb	r2, [r7, #29]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	6893      	ldr	r3, [r2, #8]
 8000b98:	f361 139b 	bfi	r3, r1, #6, #22
 8000b9c:	6093      	str	r3, [r2, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	7ad3      	ldrb	r3, [r2, #11]
 8000ba2:	f36f 1304 	bfc	r3, #4, #1
 8000ba6:	72d3      	strb	r3, [r2, #11]
      }

      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	119b      	asrs	r3, r3, #6
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	7c13      	ldrb	r3, [r2, #16]
 8000bb6:	f361 0300 	bfi	r3, r1, #0, #1
 8000bba:	7413      	strb	r3, [r2, #16]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000bbc:	7fbb      	ldrb	r3, [r7, #30]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bc6:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	09db      	lsrs	r3, r3, #7
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bd8:	b2d9      	uxtb	r1, r3
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	7c13      	ldrb	r3, [r2, #16]
 8000bde:	f361 0347 	bfi	r3, r1, #1, #7
 8000be2:	7413      	strb	r3, [r2, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
 8000be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bea:	b2d9      	uxtb	r1, r3
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	7c53      	ldrb	r3, [r2, #17]
 8000bf0:	f361 0306 	bfi	r3, r1, #0, #7
 8000bf4:	7453      	strb	r3, [r2, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfa:	09db      	lsrs	r3, r3, #7
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	b2d9      	uxtb	r1, r3
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	7c53      	ldrb	r3, [r2, #17]
 8000c08:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c0c:	7453      	strb	r3, [r2, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c12:	115b      	asrs	r3, r3, #5
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	7c93      	ldrb	r3, [r2, #18]
 8000c1e:	f361 0301 	bfi	r3, r1, #0, #2
 8000c22:	7493      	strb	r3, [r2, #18]
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c28:	109b      	asrs	r3, r3, #2
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	b2d9      	uxtb	r1, r3
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	7c93      	ldrb	r3, [r2, #18]
 8000c34:	f361 0384 	bfi	r3, r1, #2, #3
 8000c38:	7493      	strb	r3, [r2, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000c48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c4c:	099b      	lsrs	r3, r3, #6
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	b2d9      	uxtb	r1, r3
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	7cd3      	ldrb	r3, [r2, #19]
 8000c60:	f361 0303 	bfi	r3, r1, #0, #4
 8000c64:	74d3      	strb	r3, [r2, #19]
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000c66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c6a:	115b      	asrs	r3, r3, #5
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	b2d9      	uxtb	r1, r3
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	7cd3      	ldrb	r3, [r2, #19]
 8000c76:	f361 1304 	bfi	r3, r1, #4, #1
 8000c7a:	74d3      	strb	r3, [r2, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8000c7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c80:	f003 031f 	and.w	r3, r3, #31
 8000c84:	b2d9      	uxtb	r1, r3
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	7d13      	ldrb	r3, [r2, #20]
 8000c8a:	f361 0304 	bfi	r3, r1, #0, #5
 8000c8e:	7513      	strb	r3, [r2, #20]
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8000c90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c94:	09db      	lsrs	r3, r3, #7
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	b2d9      	uxtb	r1, r3
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7d13      	ldrb	r3, [r2, #20]
 8000ca2:	f361 1345 	bfi	r3, r1, #5, #1
 8000ca6:	7513      	strb	r3, [r2, #20]
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8000ca8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cac:	119b      	asrs	r3, r3, #6
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2d9      	uxtb	r1, r3
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	7d13      	ldrb	r3, [r2, #20]
 8000cb8:	f361 1386 	bfi	r3, r1, #6, #1
 8000cbc:	7513      	strb	r3, [r2, #20]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cc2:	115b      	asrs	r3, r3, #5
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7d13      	ldrb	r3, [r2, #20]
 8000cce:	f361 13c7 	bfi	r3, r1, #7, #1
 8000cd2:	7513      	strb	r3, [r2, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cd8:	111b      	asrs	r3, r3, #4
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7d53      	ldrb	r3, [r2, #21]
 8000ce4:	f361 0300 	bfi	r3, r1, #0, #1
 8000ce8:	7553      	strb	r3, [r2, #21]
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8000cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000cee:	109b      	asrs	r3, r3, #2
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	b2d9      	uxtb	r1, r3
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	7d53      	ldrb	r3, [r2, #21]
 8000cfa:	f361 0342 	bfi	r3, r1, #1, #2
 8000cfe:	7553      	strb	r3, [r2, #21]
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8000d00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	7d53      	ldrb	r3, [r2, #21]
 8000d0e:	f361 03c4 	bfi	r3, r1, #3, #2
 8000d12:	7553      	strb	r3, [r2, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8000d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	7d93      	ldrb	r3, [r2, #22]
 8000d26:	f361 0306 	bfi	r3, r1, #0, #7
 8000d2a:	7593      	strb	r3, [r2, #22]
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8000d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	7d93      	ldrb	r3, [r2, #22]
 8000d3a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d3e:	7593      	strb	r3, [r2, #22]

      retr = BSP_SD_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    }
  }

  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 fc68 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000d4c:	20ff      	movs	r0, #255	; 0xff
 8000d4e:	f000 fc92 	bl	8001676 <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000d52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	372c      	adds	r7, #44	; 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000ae 	.word	0x200000ae

08000d64 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
uint8_t SD_GetCIDRegister(SD_CID* Cid)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t retr = BSP_SD_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t CID_Tab[16];
  SD_CmdAnswer_typedef response;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000d76:	f107 0008 	add.w	r0, r7, #8
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	2200      	movs	r2, #0
 8000d82:	210a      	movs	r1, #10
 8000d84:	f000 f8a2 	bl	8000ecc <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8000d88:	7a3b      	ldrb	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8091 	bne.w	8000eb2 <SD_GetCIDRegister+0x14e>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000d90:	20fe      	movs	r0, #254	; 0xfe
 8000d92:	f000 fa8b 	bl	80012ac <SD_WaitData>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 808a 	bne.w	8000eb2 <SD_GetCIDRegister+0x14e>
    {
      /* Store CID register value on CID_Tab */
      for (counter = 0; counter < 16; counter++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
 8000da2:	e00d      	b.n	8000dc0 <SD_GetCIDRegister+0x5c>
      {
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000da4:	20ff      	movs	r0, #255	; 0xff
 8000da6:	f000 fc66 	bl	8001676 <SD_IO_WriteByte>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4619      	mov	r1, r3
 8000dae:	f107 0210 	add.w	r2, r7, #16
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	4413      	add	r3, r2
 8000db6:	460a      	mov	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      for (counter = 0; counter < 16; counter++)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d9ee      	bls.n	8000da4 <SD_GetCIDRegister+0x40>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dc6:	20ff      	movs	r0, #255	; 0xff
 8000dc8:	f000 fc55 	bl	8001676 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dcc:	20ff      	movs	r0, #255	; 0xff
 8000dce:	f000 fc52 	bl	8001676 <SD_IO_WriteByte>

      /* Byte 0 */
      Cid->ManufacturerID = CID_Tab[0];
 8000dd2:	7c3a      	ldrb	r2, [r7, #16]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	701a      	strb	r2, [r3, #0]

      /* Byte 1 */
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000dd8:	7c7b      	ldrb	r3, [r7, #17]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	805a      	strh	r2, [r3, #2]

      /* Byte 2 */
      Cid->OEM_AppliID |= CID_Tab[2];
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	885b      	ldrh	r3, [r3, #2]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	7cbb      	ldrb	r3, [r7, #18]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	805a      	strh	r2, [r3, #2]

      /* Byte 3 */
      Cid->ProdName1 = CID_Tab[3] << 24;
 8000df6:	7cfb      	ldrb	r3, [r7, #19]
 8000df8:	061b      	lsls	r3, r3, #24
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]

      /* Byte 4 */
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	7d3a      	ldrb	r2, [r7, #20]
 8000e06:	0412      	lsls	r2, r2, #16
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	605a      	str	r2, [r3, #4]

      /* Byte 5 */
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	7d7a      	ldrb	r2, [r7, #21]
 8000e14:	0212      	lsls	r2, r2, #8
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	605a      	str	r2, [r3, #4]

      /* Byte 6 */
      Cid->ProdName1 |= CID_Tab[6];
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	7dba      	ldrb	r2, [r7, #22]
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	605a      	str	r2, [r3, #4]

      /* Byte 7 */
      Cid->ProdName2 = CID_Tab[7];
 8000e28:	7dfa      	ldrb	r2, [r7, #23]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	721a      	strb	r2, [r3, #8]

      /* Byte 8 */
      Cid->ProdRev = CID_Tab[8];
 8000e2e:	7e3a      	ldrb	r2, [r7, #24]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	725a      	strb	r2, [r3, #9]

      /* Byte 9 */
      Cid->ProdSN = CID_Tab[9] << 24;
 8000e34:	7e7b      	ldrb	r3, [r7, #25]
 8000e36:	061b      	lsls	r3, r3, #24
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60da      	str	r2, [r3, #12]

      /* Byte 10 */
      Cid->ProdSN |= CID_Tab[10] << 16;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	7eba      	ldrb	r2, [r7, #26]
 8000e44:	0412      	lsls	r2, r2, #16
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	60da      	str	r2, [r3, #12]

      /* Byte 11 */
      Cid->ProdSN |= CID_Tab[11] << 8;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	7efa      	ldrb	r2, [r7, #27]
 8000e52:	0212      	lsls	r2, r2, #8
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60da      	str	r2, [r3, #12]

      /* Byte 12 */
      Cid->ProdSN |= CID_Tab[12];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	7f3a      	ldrb	r2, [r7, #28]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60da      	str	r2, [r3, #12]

      /* Byte 13 */
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7c1b      	ldrb	r3, [r3, #16]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	7f7b      	ldrb	r3, [r7, #29]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	741a      	strb	r2, [r3, #16]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8000e7a:	7f7b      	ldrb	r3, [r7, #29]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	825a      	strh	r2, [r3, #18]

      /* Byte 14 */
      Cid->ManufactDate |= CID_Tab[14];
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	8a5b      	ldrh	r3, [r3, #18]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	7fbb      	ldrb	r3, [r7, #30]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	825a      	strh	r2, [r3, #18]

      /* Byte 15 */
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000e9c:	7ffb      	ldrb	r3, [r7, #31]
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	751a      	strb	r2, [r3, #20]
      Cid->Reserved2 = 1;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	755a      	strb	r2, [r3, #21]

      retr = BSP_SD_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fbb2 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000eb8:	20ff      	movs	r0, #255	; 0xff
 8000eba:	f000 fbdc 	bl	8001676 <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <SD_SendCmd>:
  * @param  Crc: The CRC.
  * @param  Answer: SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD status
  */
SD_CmdAnswer_typedef SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	72fb      	strb	r3, [r7, #11]
 8000edc:	4613      	mov	r3, r2
 8000ede:	72bb      	strb	r3, [r7, #10]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	; (800100c <SD_SendCmd+0x140>)
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eea:	6018      	str	r0, [r3, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	7019      	strb	r1, [r3, #0]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f887 3020 	strb.w	r3, [r7, #32]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0e1b      	lsrs	r3, r3, #24
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0c1b      	lsrs	r3, r3, #16
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8000f22:	7abb      	ldrb	r3, [r7, #10]
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Send the command */
  SD_IO_CSState(0);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 fb74 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8000f34:	f107 0118 	add.w	r1, r7, #24
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fb88 	bl	8001654 <SD_IO_WriteReadData>

  switch(Answer)
 8000f44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d851      	bhi.n	8000ff0 <SD_SendCmd+0x124>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <SD_SendCmd+0x88>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f77 	.word	0x08000f77
 8000f5c:	08000fab 	.word	0x08000fab
 8000f60:	08000fbf 	.word	0x08000fbf
 8000f64:	08000ff1 	.word	0x08000ff1
 8000f68:	08000fbf 	.word	0x08000fbf
  {
  case SD_ANSWER_R1_EXPECTED :
    retr.r1 = SD_ReadData();
 8000f6c:	f000 f986 	bl	800127c <SD_ReadData>
 8000f70:	4603      	mov	r3, r0
 8000f72:	743b      	strb	r3, [r7, #16]
    break;
 8000f74:	e03d      	b.n	8000ff2 <SD_SendCmd+0x126>
  case SD_ANSWER_R1B_EXPECTED :
    retr.r1 = SD_ReadData();
 8000f76:	f000 f981 	bl	800127c <SD_ReadData>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000f7e:	20ff      	movs	r0, #255	; 0xff
 8000f80:	f000 fb79 	bl	8001676 <SD_IO_WriteByte>
 8000f84:	4603      	mov	r3, r0
 8000f86:	747b      	strb	r3, [r7, #17]
    /* Set CS High */
    SD_IO_CSState(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 fb47 	bl	800161c <SD_IO_CSState>
    HAL_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 fc06 	bl	80017a0 <HAL_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 fb41 	bl	800161c <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8000f9a:	bf00      	nop
 8000f9c:	20ff      	movs	r0, #255	; 0xff
 8000f9e:	f000 fb6a 	bl	8001676 <SD_IO_WriteByte>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d1f9      	bne.n	8000f9c <SD_SendCmd+0xd0>
    break;
 8000fa8:	e023      	b.n	8000ff2 <SD_SendCmd+0x126>
  case SD_ANSWER_R2_EXPECTED :
    retr.r1 = SD_ReadData();
 8000faa:	f000 f967 	bl	800127c <SD_ReadData>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fb2:	20ff      	movs	r0, #255	; 0xff
 8000fb4:	f000 fb5f 	bl	8001676 <SD_IO_WriteByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	747b      	strb	r3, [r7, #17]
    break;
 8000fbc:	e019      	b.n	8000ff2 <SD_SendCmd+0x126>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    retr.r1 = SD_ReadData();
 8000fbe:	f000 f95d 	bl	800127c <SD_ReadData>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fc6:	20ff      	movs	r0, #255	; 0xff
 8000fc8:	f000 fb55 	bl	8001676 <SD_IO_WriteByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	747b      	strb	r3, [r7, #17]
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fd0:	20ff      	movs	r0, #255	; 0xff
 8000fd2:	f000 fb50 	bl	8001676 <SD_IO_WriteByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	74bb      	strb	r3, [r7, #18]
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fda:	20ff      	movs	r0, #255	; 0xff
 8000fdc:	f000 fb4b 	bl	8001676 <SD_IO_WriteByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	74fb      	strb	r3, [r7, #19]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fe4:	20ff      	movs	r0, #255	; 0xff
 8000fe6:	f000 fb46 	bl	8001676 <SD_IO_WriteByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	753b      	strb	r3, [r7, #20]
    break;
 8000fee:	e000      	b.n	8000ff2 <SD_SendCmd+0x126>
  default :
    break;
 8000ff0:	bf00      	nop
  }
  return retr;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	6010      	str	r0, [r2, #0]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	7113      	strb	r3, [r2, #4]
}
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08006b4c 	.word	0x08006b4c

08001010 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
uint8_t SD_GetDataResponse(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  uint8_t dataresponse;
  uint8_t rvalue = SD_DATA_OTHER_ERROR;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	71fb      	strb	r3, [r7, #7]

  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800101a:	20ff      	movs	r0, #255	; 0xff
 800101c:	f000 fb2b 	bl	8001676 <SD_IO_WriteByte>
 8001020:	4603      	mov	r3, r0
 8001022:	71bb      	strb	r3, [r7, #6]
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8001024:	20ff      	movs	r0, #255	; 0xff
 8001026:	f000 fb26 	bl	8001676 <SD_IO_WriteByte>

  /* Mask unused bits */
  switch (dataresponse & 0x1F)
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	2b0b      	cmp	r3, #11
 8001032:	d014      	beq.n	800105e <SD_GetDataResponse+0x4e>
 8001034:	2b0d      	cmp	r3, #13
 8001036:	d015      	beq.n	8001064 <SD_GetDataResponse+0x54>
 8001038:	2b05      	cmp	r3, #5
 800103a:	d000      	beq.n	800103e <SD_GetDataResponse+0x2e>
    break;
  case SD_DATA_WRITE_ERROR:
    rvalue = SD_DATA_WRITE_ERROR;
    break;
  default:
    break;
 800103c:	e015      	b.n	800106a <SD_GetDataResponse+0x5a>
    rvalue = SD_DATA_OK;
 800103e:	2305      	movs	r3, #5
 8001040:	71fb      	strb	r3, [r7, #7]
    SD_IO_CSState(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 faea 	bl	800161c <SD_IO_CSState>
    SD_IO_CSState(0);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fae7 	bl	800161c <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 800104e:	bf00      	nop
 8001050:	20ff      	movs	r0, #255	; 0xff
 8001052:	f000 fb10 	bl	8001676 <SD_IO_WriteByte>
 8001056:	4603      	mov	r3, r0
 8001058:	2bff      	cmp	r3, #255	; 0xff
 800105a:	d1f9      	bne.n	8001050 <SD_GetDataResponse+0x40>
    break;
 800105c:	e005      	b.n	800106a <SD_GetDataResponse+0x5a>
    rvalue =  SD_DATA_CRC_ERROR;
 800105e:	230b      	movs	r3, #11
 8001060:	71fb      	strb	r3, [r7, #7]
    break;
 8001062:	e002      	b.n	800106a <SD_GetDataResponse+0x5a>
    rvalue = SD_DATA_WRITE_ERROR;
 8001064:	230d      	movs	r3, #13
 8001066:	71fb      	strb	r3, [r7, #7]
    break;
 8001068:	bf00      	nop
  }

  /* Return response */
  return rvalue;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
uint8_t SD_GoIdleState(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef response;
  __IO uint8_t counter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
     wait for In Idle State Response (R1 Format) equal to 0x01 */
  do{
    counter++;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8001088:	f107 0010 	add.w	r0, r7, #16
 800108c:	2300      	movs	r3, #0
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2395      	movs	r3, #149	; 0x95
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	f7ff ff19 	bl	8000ecc <SD_SendCmd>
    SD_IO_CSState(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fabe 	bl	800161c <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	f000 fae8 	bl	8001676 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b63      	cmp	r3, #99	; 0x63
 80010ac:	d901      	bls.n	80010b2 <SD_GoIdleState+0x3e>
    {
      return BSP_SD_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0dd      	b.n	800126e <SD_GoIdleState+0x1fa>
    }
  }
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 80010b2:	7c3b      	ldrb	r3, [r7, #16]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d1e2      	bne.n	800107e <SD_GoIdleState+0xa>


  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
     and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 80010b8:	4638      	mov	r0, r7
 80010ba:	2305      	movs	r3, #5
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2387      	movs	r3, #135	; 0x87
 80010c0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80010c4:	2108      	movs	r1, #8
 80010c6:	f7ff ff01 	bl	8000ecc <SD_SendCmd>
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	463a      	mov	r2, r7
 80010d0:	6810      	ldr	r0, [r2, #0]
 80010d2:	6018      	str	r0, [r3, #0]
 80010d4:	7912      	ldrb	r2, [r2, #4]
 80010d6:	711a      	strb	r2, [r3, #4]
  SD_IO_CSState(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 fa9f 	bl	800161c <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010de:	20ff      	movs	r0, #255	; 0xff
 80010e0:	f000 fac9 	bl	8001676 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80010e4:	7c3b      	ldrb	r3, [r7, #16]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d030      	beq.n	8001150 <SD_GoIdleState+0xdc>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80010ee:	4638      	mov	r0, r7
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	23ff      	movs	r3, #255	; 0xff
 80010f6:	2200      	movs	r2, #0
 80010f8:	2137      	movs	r1, #55	; 0x37
 80010fa:	f7ff fee7 	bl	8000ecc <SD_SendCmd>
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	463a      	mov	r2, r7
 8001104:	6810      	ldr	r0, [r2, #0]
 8001106:	6018      	str	r0, [r3, #0]
 8001108:	7912      	ldrb	r2, [r2, #4]
 800110a:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fa85 	bl	800161c <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001112:	20ff      	movs	r0, #255	; 0xff
 8001114:	f000 faaf 	bl	8001676 <SD_IO_WriteByte>

      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001118:	4638      	mov	r0, r7
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	23ff      	movs	r3, #255	; 0xff
 8001120:	2200      	movs	r2, #0
 8001122:	2129      	movs	r1, #41	; 0x29
 8001124:	f7ff fed2 	bl	8000ecc <SD_SendCmd>
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	463a      	mov	r2, r7
 800112e:	6810      	ldr	r0, [r2, #0]
 8001130:	6018      	str	r0, [r3, #0]
 8001132:	7912      	ldrb	r2, [r2, #4]
 8001134:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 fa70 	bl	800161c <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800113c:	20ff      	movs	r0, #255	; 0xff
 800113e:	f000 fa9a 	bl	8001676 <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001142:	7c3b      	ldrb	r3, [r7, #16]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d0d2      	beq.n	80010ee <SD_GoIdleState+0x7a>
    flag_SDHC = 0;
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <SD_GoIdleState+0x204>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e08d      	b.n	800126c <SD_GoIdleState+0x1f8>
  }
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8001150:	7c3b      	ldrb	r3, [r7, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	f040 8088 	bne.w	8001268 <SD_GoIdleState+0x1f4>
  {
      /* initialise card V2 */
    do {

      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001158:	4638      	mov	r0, r7
 800115a:	2300      	movs	r3, #0
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	23ff      	movs	r3, #255	; 0xff
 8001160:	2200      	movs	r2, #0
 8001162:	2137      	movs	r1, #55	; 0x37
 8001164:	f7ff feb2 	bl	8000ecc <SD_SendCmd>
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	463a      	mov	r2, r7
 800116e:	6810      	ldr	r0, [r2, #0]
 8001170:	6018      	str	r0, [r3, #0]
 8001172:	7912      	ldrb	r2, [r2, #4]
 8001174:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fa50 	bl	800161c <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800117c:	20ff      	movs	r0, #255	; 0xff
 800117e:	f000 fa7a 	bl	8001676 <SD_IO_WriteByte>

      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001182:	4638      	mov	r0, r7
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	2129      	movs	r1, #41	; 0x29
 8001190:	f7ff fe9c 	bl	8000ecc <SD_SendCmd>
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	463a      	mov	r2, r7
 800119a:	6810      	ldr	r0, [r2, #0]
 800119c:	6018      	str	r0, [r3, #0]
 800119e:	7912      	ldrb	r2, [r2, #4]
 80011a0:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 fa3a 	bl	800161c <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011a8:	20ff      	movs	r0, #255	; 0xff
 80011aa:	f000 fa64 	bl	8001676 <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80011ae:	7c3b      	ldrb	r3, [r7, #16]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d0d1      	beq.n	8001158 <SD_GoIdleState+0xe4>

    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80011b4:	7c3b      	ldrb	r3, [r7, #16]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d031      	beq.n	8001222 <SD_GoIdleState+0x1ae>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80011be:	4638      	mov	r0, r7
 80011c0:	2300      	movs	r3, #0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	2200      	movs	r2, #0
 80011c8:	2137      	movs	r1, #55	; 0x37
 80011ca:	f7ff fe7f 	bl	8000ecc <SD_SendCmd>
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	463a      	mov	r2, r7
 80011d4:	6810      	ldr	r0, [r2, #0]
 80011d6:	6018      	str	r0, [r3, #0]
 80011d8:	7912      	ldrb	r2, [r2, #4]
 80011da:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fa1d 	bl	800161c <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011e2:	20ff      	movs	r0, #255	; 0xff
 80011e4:	f000 fa47 	bl	8001676 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 80011e8:	7c3b      	ldrb	r3, [r7, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <SD_GoIdleState+0x17e>
        {
          return BSP_SD_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e03d      	b.n	800126e <SD_GoIdleState+0x1fa>
        }
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80011f2:	4638      	mov	r0, r7
 80011f4:	2300      	movs	r3, #0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	23ff      	movs	r3, #255	; 0xff
 80011fa:	2200      	movs	r2, #0
 80011fc:	2129      	movs	r1, #41	; 0x29
 80011fe:	f7ff fe65 	bl	8000ecc <SD_SendCmd>
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	463a      	mov	r2, r7
 8001208:	6810      	ldr	r0, [r2, #0]
 800120a:	6018      	str	r0, [r3, #0]
 800120c:	7912      	ldrb	r2, [r2, #4]
 800120e:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 fa03 	bl	800161c <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001216:	20ff      	movs	r0, #255	; 0xff
 8001218:	f000 fa2d 	bl	8001676 <SD_IO_WriteByte>
      }
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 800121c:	7c3b      	ldrb	r3, [r7, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d0cd      	beq.n	80011be <SD_GoIdleState+0x14a>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8001222:	4638      	mov	r0, r7
 8001224:	2303      	movs	r3, #3
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	23ff      	movs	r3, #255	; 0xff
 800122a:	2200      	movs	r2, #0
 800122c:	213a      	movs	r1, #58	; 0x3a
 800122e:	f7ff fe4d 	bl	8000ecc <SD_SendCmd>
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	463a      	mov	r2, r7
 8001238:	6810      	ldr	r0, [r2, #0]
 800123a:	6018      	str	r0, [r3, #0]
 800123c:	7912      	ldrb	r2, [r2, #4]
 800123e:	711a      	strb	r2, [r3, #4]
    SD_IO_CSState(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 f9eb 	bl	800161c <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001246:	20ff      	movs	r0, #255	; 0xff
 8001248:	f000 fa15 	bl	8001676 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 800124c:	7c3b      	ldrb	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SD_GoIdleState+0x1e2>
    {
      return BSP_SD_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00b      	b.n	800126e <SD_GoIdleState+0x1fa>
    }
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8001256:	7c7b      	ldrb	r3, [r7, #17]
 8001258:	119b      	asrs	r3, r3, #6
 800125a:	b29b      	uxth	r3, r3
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SD_GoIdleState+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
 8001266:	e001      	b.n	800126c <SD_GoIdleState+0x1f8>
  }
  else
  {
    return BSP_SD_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <SD_GoIdleState+0x1fa>
  }

  return BSP_SD_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000ae 	.word	0x200000ae

0800127c <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  uint8_t timeout = 0x08;
 8001282:	2308      	movs	r3, #8
 8001284:	71fb      	strb	r3, [r7, #7]
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001286:	20ff      	movs	r0, #255	; 0xff
 8001288:	f000 f9f5 	bl	8001676 <SD_IO_WriteByte>
 800128c:	4603      	mov	r3, r0
 800128e:	71bb      	strb	r3, [r7, #6]
    timeout--;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	3b01      	subs	r3, #1
 8001294:	71fb      	strb	r3, [r7, #7]

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	2bff      	cmp	r3, #255	; 0xff
 800129a:	d102      	bne.n	80012a2 <SD_ReadData+0x26>
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f1      	bne.n	8001286 <SD_ReadData+0xa>

  /* Right response got */
  return readvalue;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80012b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ba:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80012bc:	20ff      	movs	r0, #255	; 0xff
 80012be:	f000 f9da 	bl	8001676 <SD_IO_WriteByte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	737b      	strb	r3, [r7, #13]
    timeout--;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != data) && timeout);
 80012cc:	7b7a      	ldrb	r2, [r7, #13]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d002      	beq.n	80012da <SD_WaitData+0x2e>
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <SD_WaitData+0x10>

  if (timeout == 0)
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <SD_WaitData+0x38>
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e000      	b.n	80012e6 <SD_WaitData+0x3a>
  }

  /* Right response got */
  return BSP_SD_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800132e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800136e:	2002      	movs	r0, #2
 8001370:	f7ff ffbd 	bl	80012ee <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <BSP_LED_Init+0x6c>)
 8001378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800137c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <BSP_LED_Init+0x70>)
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fb07 	bl	80019ac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <BSP_LED_Init+0x70>)
 80013a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <BSP_LED_Init+0x6c>)
 80013aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f000 fc6b 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08006c88 	.word	0x08006c88
 80013c4:	20000008 	.word	0x20000008

080013c8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <BSP_LED_On+0x2c>)
 80013d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <BSP_LED_On+0x30>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	f000 fc51 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	08006c88 	.word	0x08006c88

080013fc <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <BSP_LED_Off+0x2c>)
 800140a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <BSP_LED_Off+0x30>)
 8001412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	f000 fc37 	bl	8001c8c <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	08006c88 	.word	0x08006c88

08001430 <SPIx_MspInit>:
/**
  * @brief  Initialize SPI MSP.
  * @retval None
  */
static void SPIx_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff ff52 	bl	80012ee <LL_AHB2_GRP1_EnableClock>
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ff4f 	bl	80012ee <LL_AHB2_GRP1_EnableClock>

  /* Configure SPI SCK */
  gpioinitstruct.Pin        = NUCLEO_SPIx_SCK_PIN;
 8001450:	2320      	movs	r3, #32
 8001452:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Pull       = GPIO_PULLUP;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Alternate  = NUCLEO_SPIx_SCK_AF;
 8001460:	2305      	movs	r3, #5
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f000 fa9e 	bl	80019ac <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  gpioinitstruct.Pin        = NUCLEO_SPIx_MOSI_PIN;
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = NUCLEO_SPIx_MISO_MOSI_AF;
 8001474:	2305      	movs	r3, #5
 8001476:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Pull       = GPIO_PULLDOWN;
 8001478:	2302      	movs	r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f000 fa92 	bl	80019ac <HAL_GPIO_Init>
  
  gpioinitstruct.Pin        = NUCLEO_SPIx_MISO_PIN;
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f000 fa8a 	bl	80019ac <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 8001498:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800149c:	f7ff ff40 	bl	8001320 <LL_APB2_GRP1_EnableClock>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 80014ac:	481c      	ldr	r0, [pc, #112]	; (8001520 <SPIx_Init+0x78>)
 80014ae:	f002 f84a 	bl	8003546 <HAL_SPI_GetState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d131      	bne.n	800151c <SPIx_Init+0x74>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <SPIx_Init+0x78>)
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <SPIx_Init+0x7c>)
 80014bc:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 32 MHz 
       */
    hnucleo_Spi.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_4;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <SPIx_Init+0x78>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	61da      	str	r2, [r3, #28]
    hnucleo_Spi.Init.Direction          = SPI_DIRECTION_2LINES;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <SPIx_Init+0x78>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hnucleo_Spi.Init.CLKPhase           = SPI_PHASE_2EDGE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <SPIx_Init+0x78>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	615a      	str	r2, [r3, #20]
    hnucleo_Spi.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <SPIx_Init+0x78>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	611a      	str	r2, [r3, #16]
    hnucleo_Spi.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLE;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <SPIx_Init+0x78>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Spi.Init.CRCPolynomial      = 7;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <SPIx_Init+0x78>)
 80014de:	2207      	movs	r2, #7
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Spi.Init.CRCLength          = SPI_CRC_LENGTH_DATASIZE;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <SPIx_Init+0x78>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
    hnucleo_Spi.Init.DataSize           = SPI_DATASIZE_8BIT;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <SPIx_Init+0x78>)
 80014ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ee:	60da      	str	r2, [r3, #12]
    hnucleo_Spi.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <SPIx_Init+0x78>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
    hnucleo_Spi.Init.NSS                = SPI_NSS_SOFT;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <SPIx_Init+0x78>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
    hnucleo_Spi.Init.NSSPMode           = SPI_NSS_PULSE_DISABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <SPIx_Init+0x78>)
 8001500:	2200      	movs	r2, #0
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
    hnucleo_Spi.Init.TIMode             = SPI_TIMODE_DISABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SPIx_Init+0x78>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Spi.Init.Mode               = SPI_MODE_MASTER;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SPIx_Init+0x78>)
 800150c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001510:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit();
 8001512:	f7ff ff8d 	bl	8001430 <SPIx_MspInit>
    HAL_SPI_Init(&hnucleo_Spi);
 8001516:	4802      	ldr	r0, [pc, #8]	; (8001520 <SPIx_Init+0x78>)
 8001518:	f001 fd3c 	bl	8002f94 <HAL_SPI_Init>
  }
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000b0 	.word	0x200000b0
 8001524:	40013000 	.word	0x40013000

08001528 <SPIx_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, hnucleo_SpixTimeout);
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <SPIx_WriteReadData+0x3c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <SPIx_WriteReadData+0x40>)
 800154a:	f001 fde9 	bl	8003120 <HAL_SPI_TransmitReceive>
 800154e:	4603      	mov	r3, r0
 8001550:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SPIx_WriteReadData+0x34>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8001558:	f000 f808 	bl	800156c <SPIx_Error>
  }
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000014 	.word	0x20000014
 8001568:	200000b0 	.word	0x200000b0

0800156c <SPIx_Error>:
/**
  * @brief  SPI error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <SPIx_Error+0x14>)
 8001572:	f001 fd99 	bl	80030a8 <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001576:	f7ff ff97 	bl	80014a8 <SPIx_Init>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000b0 	.word	0x200000b0

08001584 <SD_IO_Init>:
  * @brief  Initialize the SD Card and put it into StandBy State (Ready for 
  *         data transfer).
  * @retval None
  */
void SD_IO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  uint8_t counter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]

  /* SD_CS_GPIO Periph clock enable */
  SD_CS_GPIO_CLK_ENABLE();
 800159c:	2004      	movs	r0, #4
 800159e:	f7ff fea6 	bl	80012ee <LL_AHB2_GRP1_EnableClock>

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  gpioinitstruct.Pin    = SD_CS_PIN;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	603b      	str	r3, [r7, #0]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <SD_IO_Init+0x94>)
 80015ba:	f000 f9f7 	bl	80019ac <HAL_GPIO_Init>

  /* Configure LCD_CS_PIN pin: LCD Card CS pin */
  gpioinitstruct.Pin   = LCD_CS_PIN;
 80015be:	2310      	movs	r3, #16
 80015c0:	603b      	str	r3, [r7, #0]
  gpioinitstruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Pull  = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpioinitstruct);
 80015ce:	463b      	mov	r3, r7
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f000 f9e9 	bl	80019ac <HAL_GPIO_Init>
  LCD_CS_HIGH();
 80015da:	2201      	movs	r2, #1
 80015dc:	2110      	movs	r1, #16
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 fb53 	bl	8001c8c <HAL_GPIO_WritePin>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  SPIx_Init();
 80015e6:	f7ff ff5f 	bl	80014a8 <SPIx_Init>

  /* SD chip select high */
  SD_CS_HIGH();
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <SD_IO_Init+0x94>)
 80015f2:	f000 fb4b 	bl	8001c8c <HAL_GPIO_WritePin>
  
  /* Send dummy byte 0xFF, 10 times with CS high */
  /* Rise CS and MOSI for 80 clocks cycles */
  for (counter = 0; counter <= 9; counter++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
 80015fa:	e005      	b.n	8001608 <SD_IO_Init+0x84>
  {
    /* Send dummy byte 0xFF */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80015fc:	20ff      	movs	r0, #255	; 0xff
 80015fe:	f000 f83a 	bl	8001676 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	3301      	adds	r3, #1
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b09      	cmp	r3, #9
 800160c:	d9f6      	bls.n	80015fc <SD_IO_Init+0x78>
  }
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	48000800 	.word	0x48000800

0800161c <SD_IO_CSState>:
  * @brief  Set SD interface Chip Select state
  * @param  val: 0 (low) or 1 (high) state
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if(val == 1) 
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <SD_IO_CSState+0x1e>
  {
    SD_CS_HIGH();
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <SD_IO_CSState+0x34>)
 8001634:	f000 fb2a 	bl	8001c8c <HAL_GPIO_WritePin>
  }
  else
  {
    SD_CS_LOW();
  }
}
 8001638:	e005      	b.n	8001646 <SD_IO_CSState+0x2a>
    SD_CS_LOW();
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <SD_IO_CSState+0x34>)
 8001642:	f000 fb23 	bl	8001c8c <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	48000800 	.word	0x48000800

08001654 <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	461a      	mov	r2, r3
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ff5d 	bl	8001528 <SPIx_WriteReadData>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 8001680:	f107 010f 	add.w	r1, r7, #15
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	2201      	movs	r2, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff4d 	bl	8001528 <SPIx_WriteReadData>
  return tmp;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_Init+0x3c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_Init+0x3c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f000 f94a 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f80f 	bl	80016d8 <HAL_InitTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	e001      	b.n	80016ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c6:	f7fe fe43 	bl	8000350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ca:	79fb      	ldrb	r3, [r7, #7]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58004000 	.word	0x58004000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_InitTick+0x6c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80016ec:	f001 fb86 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 80016f0:	4601      	mov	r1, r0
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_InitTick+0x6c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f945 	bl	8001992 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d809      	bhi.n	8001728 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f91f 	bl	800195e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a09      	ldr	r2, [pc, #36]	; (8001748 <HAL_InitTick+0x70>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e007      	b.n	8001738 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e004      	b.n	8001738 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e001      	b.n	8001738 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000001c 	.word	0x2000001c
 8001748:	20000018 	.word	0x20000018

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x1c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x20>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4413      	add	r3, r2
 800175a:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_IncTick+0x1c>)
 800175c:	6013      	str	r3, [r2, #0]
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	20000154 	.word	0x20000154
 800176c:	2000001c 	.word	0x2000001c

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000154 	.word	0x20000154

08001788 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTickPrio+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000018 	.word	0x20000018

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffe2 	bl	8001770 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d004      	beq.n	80017c4 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_Delay+0x40>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80017c4:	bf00      	nop
 80017c6:	f7ff ffd3 	bl	8001770 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d8f7      	bhi.n	80017c6 <HAL_Delay+0x26>
    {
    }
  }
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000001c 	.word	0x2000001c

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff47 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff5e 	bl	800182c <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffb2 	bl	8001904 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e14c      	b.n	8001c56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 813e 	beq.w	8001c50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x38>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	6939      	ldr	r1, [r7, #16]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d00b      	beq.n	8001a80 <HAL_GPIO_Init+0xd4>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a74:	2b11      	cmp	r3, #17
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d130      	bne.n	8001ae2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 0201 	and.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8098 	beq.w	8001c50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b20:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_GPIO_Init+0x2c8>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4a:	d019      	beq.n	8001b80 <HAL_GPIO_Init+0x1d4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_GPIO_Init+0x1d0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_GPIO_Init+0x2d0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_GPIO_Init+0x2d4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d007      	beq.n	8001b74 <HAL_GPIO_Init+0x1c8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a47      	ldr	r2, [pc, #284]	; (8001c84 <HAL_GPIO_Init+0x2d8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_GPIO_Init+0x1c4>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e008      	b.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001b70:	2307      	movs	r3, #7
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e004      	b.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_GPIO_Init+0x1d6>
 8001b80:	2300      	movs	r3, #0
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	f002 0203 	and.w	r2, r2, #3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b92:	4938      	ldr	r1, [pc, #224]	; (8001c74 <HAL_GPIO_Init+0x2c8>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ba0:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc6:	4a30      	ldr	r2, [pc, #192]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bf4:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_GPIO_Init+0x2dc>)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f47f aeab 	bne.w	80019bc <HAL_GPIO_Init+0x10>
  }
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	48001000 	.word	0x48001000
 8001c88:	58000800 	.word	0x58000800

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	58000400 	.word	0x58000400

08001cdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	58000400 	.word	0x58000400

08001cf8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d0a:	d101      	bne.n	8001d10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001da6:	d101      	bne.n	8001dac <LL_RCC_HSE_IsReady+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_RCC_HSE_IsReady+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d101      	bne.n	8001e0c <LL_RCC_HSI_IsReady+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_RCC_HSI_IsReady+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d101      	bne.n	8001e9e <LL_RCC_HSI48_IsReady+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_RCC_HSI48_IsReady+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d101      	bne.n	8001f4a <LL_RCC_LSE_IsReady+0x18>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_RCC_LSE_IsReady+0x1a>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d101      	bne.n	8001fb2 <LL_RCC_LSI1_IsReady+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_RCC_LSI1_IsReady+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b08      	cmp	r3, #8
 8002014:	d101      	bne.n	800201a <LL_RCC_LSI2_IsReady+0x18>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_RCC_LSI2_IsReady+0x1a>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d101      	bne.n	80020a6 <LL_RCC_MSI_IsReady+0x16>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_RCC_MSI_IsReady+0x18>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2bb0      	cmp	r3, #176	; 0xb0
 80020f0:	d901      	bls.n	80020f6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80020f2:	23b0      	movs	r3, #176	; 0xb0
 80020f4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80020f6:	687b      	ldr	r3, [r7, #4]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 0203 	bic.w	r2, r3, #3
 8002140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c2:	d101      	bne.n	80022c8 <LL_RCC_PLL_IsReady+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_RCC_PLL_IsReady+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d101      	bne.n	800234e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800236e:	d101      	bne.n	8002374 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d101      	bne.n	800239a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023b8:	d101      	bne.n	80023be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023dc:	d101      	bne.n	80023e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b08b      	sub	sp, #44	; 0x2c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e34b      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 808f 	beq.w	800252e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002410:	f7ff fea1 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002416:	f7ff ff82 	bl	800231e <LL_RCC_PLL_GetMainSource>
 800241a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x3e>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d149      	bne.n	80024bc <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d146      	bne.n	80024bc <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242e:	f7ff fe2f 	bl	8002090 <LL_RCC_MSI_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x54>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e32a      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002448:	f7ff fe47 	bl	80020da <LL_RCC_MSI_GetRange>
 800244c:	4603      	mov	r3, r0
 800244e:	429c      	cmp	r4, r3
 8002450:	d914      	bls.n	800247c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fce4 	bl	8002e24 <RCC_SetFlashLatencyFromMSIRange>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e319      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe21 	bl	80020b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fe45 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fe16 	bl	80020b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fe3a 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fcc5 	bl	8002e24 <RCC_SetFlashLatencyFromMSIRange>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e2fa      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80024a4:	f7fd ffe0 	bl	8000468 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a8:	4bb4      	ldr	r3, [pc, #720]	; (800277c <HAL_RCC_OscConfig+0x38c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f913 	bl	80016d8 <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d039      	beq.n	800252c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e2ee      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01e      	beq.n	8002502 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c4:	f7ff fdc6 	bl	8002054 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f952 	bl	8001770 <HAL_GetTick>
 80024cc:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d0:	f7ff f94e 	bl	8001770 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e2db      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80024e2:	f7ff fdd5 	bl	8002090 <LL_RCC_MSI_IsReady>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f1      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fdde 	bl	80020b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe02 	bl	8002104 <LL_RCC_MSI_SetCalibTrimming>
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002502:	f7ff fdb6 	bl	8002072 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002506:	f7ff f933 	bl	8001770 <HAL_GetTick>
 800250a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800250e:	f7ff f92f 	bl	8001770 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e2bc      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002520:	f7ff fdb6 	bl	8002090 <LL_RCC_MSI_IsReady>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x11e>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d05a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	f7ff fe0c 	bl	8002156 <LL_RCC_GetSysClkSource>
 800253e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	f7ff feed 	bl	800231e <LL_RCC_PLL_GetMainSource>
 8002544:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x168>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d10d      	bne.n	800256e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d10a      	bne.n	800256e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	f7ff fc1c 	bl	8001d94 <LL_RCC_HSE_IsReady>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d045      	beq.n	80025ee <HAL_RCC_OscConfig+0x1fe>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d141      	bne.n	80025ee <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e295      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0x18e>
 8002578:	f7ff fbee 	bl	8001d58 <LL_RCC_HSE_Enable>
 800257c:	e00d      	b.n	800259a <HAL_RCC_OscConfig+0x1aa>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002586:	d104      	bne.n	8002592 <HAL_RCC_OscConfig+0x1a2>
 8002588:	f7ff fbc8 	bl	8001d1c <LL_RCC_HSE_EnableBypass>
 800258c:	f7ff fbe4 	bl	8001d58 <LL_RCC_HSE_Enable>
 8002590:	e003      	b.n	800259a <HAL_RCC_OscConfig+0x1aa>
 8002592:	f7ff fbf0 	bl	8001d76 <LL_RCC_HSE_Disable>
 8002596:	f7ff fbd0 	bl	8001d3a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff f8e5 	bl	8001770 <HAL_GetTick>
 80025a6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025aa:	f7ff f8e1 	bl	8001770 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	; 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e26e      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 80025bc:	f7ff fbea 	bl	8001d94 <LL_RCC_HSE_IsReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f1      	beq.n	80025aa <HAL_RCC_OscConfig+0x1ba>
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff f8d2 	bl	8001770 <HAL_GetTick>
 80025cc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff f8ce 	bl	8001770 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e25b      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 80025e2:	f7ff fbd7 	bl	8001d94 <LL_RCC_HSE_IsReady>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f1      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1e0>
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d051      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fc:	f7ff fdab 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002600:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002602:	f7ff fe8c 	bl	800231e <LL_RCC_PLL_GetMainSource>
 8002606:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x22a>
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d113      	bne.n	800263c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d110      	bne.n	800263c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261a:	f7ff fbeb 	bl	8001df4 <LL_RCC_HSI_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x240>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e234      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fbef 	bl	8001e18 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263a:	e031      	b.n	80026a0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d019      	beq.n	8002678 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002644:	f7ff fbb8 	bl	8001db8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f892 	bl	8001770 <HAL_GetTick>
 800264c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff f88e 	bl	8001770 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e21b      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002662:	f7ff fbc7 	bl	8001df4 <LL_RCC_HSI_IsReady>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f1      	beq.n	8002650 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fbd1 	bl	8001e18 <LL_RCC_HSI_SetCalibTrimming>
 8002676:	e013      	b.n	80026a0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002678:	f7ff fbad 	bl	8001dd6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f878 	bl	8001770 <HAL_GetTick>
 8002680:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002684:	f7ff f874 	bl	8001770 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e201      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002696:	f7ff fbad 	bl	8001df4 <LL_RCC_HSI_IsReady>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f1      	bne.n	8002684 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a2 	beq.w	80027fe <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d075      	beq.n	80027ae <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d046      	beq.n	800275c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80026ce:	f7ff fc64 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d113      	bne.n	8002700 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80026d8:	f7ff fc3d 	bl	8001f56 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026dc:	f7ff f848 	bl	8001770 <HAL_GetTick>
 80026e0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026e4:	f7ff f844 	bl	8001770 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1d1      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80026f6:	f7ff fc50 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f1      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002700:	f7ff fc5d 	bl	8001fbe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff f834 	bl	8001770 <HAL_GetTick>
 8002708:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800270c:	f7ff f830 	bl	8001770 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1bd      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800271e:	f7ff fc70 	bl	8002002 <LL_RCC_LSI2_IsReady>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f1      	beq.n	800270c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fc7a 	bl	8002026 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002732:	f7ff fc21 	bl	8001f78 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7ff f81b 	bl	8001770 <HAL_GetTick>
 800273a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800273e:	f7ff f817 	bl	8001770 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1a4      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002750:	f7ff fc23 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f1      	bne.n	800273e <HAL_RCC_OscConfig+0x34e>
 800275a:	e050      	b.n	80027fe <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800275c:	f7ff fbfb 	bl	8001f56 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f806 	bl	8001770 <HAL_GetTick>
 8002764:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002768:	f7ff f802 	bl	8001770 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d904      	bls.n	8002780 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e18f      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
 800277a:	bf00      	nop
 800277c:	20000018 	.word	0x20000018
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002780:	f7ff fc0b 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800278a:	f7ff fc29 	bl	8001fe0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002790:	f7fe ffee 	bl	8001770 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e17b      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027a2:	f7ff fc2e 	bl	8002002 <LL_RCC_LSI2_IsReady>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f1      	bne.n	8002790 <HAL_RCC_OscConfig+0x3a0>
 80027ac:	e027      	b.n	80027fe <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80027ae:	f7ff fc17 	bl	8001fe0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe ffdd 	bl	8001770 <HAL_GetTick>
 80027b6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027ba:	f7fe ffd9 	bl	8001770 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e166      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027cc:	f7ff fc19 	bl	8002002 <LL_RCC_LSI2_IsReady>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f1      	bne.n	80027ba <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80027d6:	f7ff fbcf 	bl	8001f78 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe ffc9 	bl	8001770 <HAL_GetTick>
 80027de:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027e2:	f7fe ffc5 	bl	8001770 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e152      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80027f4:	f7ff fbd1 	bl	8001f9a <LL_RCC_LSI1_IsReady>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f1      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d05b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4ba6      	ldr	r3, [pc, #664]	; (8002aa4 <HAL_RCC_OscConfig+0x6b4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d114      	bne.n	8002840 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002816:	f7ff fa51 	bl	8001cbc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7fe ffa9 	bl	8001770 <HAL_GetTick>
 800281e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7fe ffa5 	bl	8001770 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e132      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002834:	4b9b      	ldr	r3, [pc, #620]	; (8002aa4 <HAL_RCC_OscConfig+0x6b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_RCC_OscConfig+0x45e>
 8002848:	f7ff fb2f 	bl	8001eaa <LL_RCC_LSE_Enable>
 800284c:	e00c      	b.n	8002868 <HAL_RCC_OscConfig+0x478>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d104      	bne.n	8002860 <HAL_RCC_OscConfig+0x470>
 8002856:	f7ff fb4a 	bl	8001eee <LL_RCC_LSE_EnableBypass>
 800285a:	f7ff fb26 	bl	8001eaa <LL_RCC_LSE_Enable>
 800285e:	e003      	b.n	8002868 <HAL_RCC_OscConfig+0x478>
 8002860:	f7ff fb34 	bl	8001ecc <LL_RCC_LSE_Disable>
 8002864:	f7ff fb54 	bl	8001f10 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d014      	beq.n	800289a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe ff7e 	bl	8001770 <HAL_GetTick>
 8002874:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe ff7a 	bl	8001770 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e105      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800288e:	f7ff fb50 	bl	8001f32 <LL_RCC_LSE_IsReady>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x488>
 8002898:	e013      	b.n	80028c2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe ff69 	bl	8001770 <HAL_GetTick>
 800289e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe ff65 	bl	8001770 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0f0      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028b8:	f7ff fb3b 	bl	8001f32 <LL_RCC_LSE_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d02c      	beq.n	8002928 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d014      	beq.n	8002900 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d6:	f7ff fab4 	bl	8001e42 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe ff49 	bl	8001770 <HAL_GetTick>
 80028de:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e2:	f7fe ff45 	bl	8001770 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0d2      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80028f4:	f7ff fac7 	bl	8001e86 <LL_RCC_HSI48_IsReady>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f1      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4f2>
 80028fe:	e013      	b.n	8002928 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002900:	f7ff fab0 	bl	8001e64 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe ff34 	bl	8001770 <HAL_GetTick>
 8002908:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800290c:	f7fe ff30 	bl	8001770 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0bd      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800291e:	f7ff fab2 	bl	8001e86 <LL_RCC_HSI48_IsReady>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f1      	bne.n	800290c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80b3 	beq.w	8002a98 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002932:	f7ff fc10 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002936:	4603      	mov	r3, r0
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d076      	beq.n	8002a2a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2b02      	cmp	r3, #2
 8002942:	d14b      	bne.n	80029dc <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	f7ff fca5 	bl	8002292 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe ff12 	bl	8001770 <HAL_GetTick>
 800294c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe ff0e 	bl	8001770 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e09b      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002962:	f7ff fca5 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f1      	bne.n	8002950 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <HAL_RCC_OscConfig+0x6b8>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002984:	0212      	lsls	r2, r2, #8
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002998:	430a      	orrs	r2, r1
 800299a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a2:	f7ff fc67 	bl	8002274 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fedb 	bl	8001770 <HAL_GetTick>
 80029ba:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fed7 	bl	8001770 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e064      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 80029d0:	f7ff fc6e 	bl	80022b0 <LL_RCC_PLL_IsReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f1      	beq.n	80029be <HAL_RCC_OscConfig+0x5ce>
 80029da:	e05d      	b.n	8002a98 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	f7ff fc59 	bl	8002292 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe feb4 	bl	8001770 <HAL_GetTick>
 8002a08:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe feb0 	bl	8001770 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e03d      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a1e:	f7ff fc47 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f1      	bne.n	8002a0c <HAL_RCC_OscConfig+0x61c>
 8002a28:	e036      	b.n	8002a98 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e031      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d123      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d114      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	372c      	adds	r7, #44	; 0x2c
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	58000400 	.word	0x58000400
 8002aa8:	11c1808c 	.word	0x11c1808c

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e12a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b97      	ldr	r3, [pc, #604]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d91b      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4992      	ldr	r1, [pc, #584]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ade:	f7fe fe47 	bl	8001770 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ae6:	f7fe fe43 	bl	8001770 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e10e      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af8:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d1ef      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fb29 	bl	800216e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fe28 	bl	8001770 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b24:	f7fe fe24 	bl	8001770 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0ef      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b36:	f7ff fbfe 	bl	8002336 <LL_RCC_IsActiveFlag_HPRE>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f1      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d016      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fb20 	bl	8002196 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b56:	f7fe fe0b 	bl	8001770 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b5e:	f7fe fe07 	bl	8001770 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e0d2      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002b70:	f7ff fbf3 	bl	800235a <LL_RCC_IsActiveFlag_C2HPRE>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f1      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb19 	bl	80021c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fdee 	bl	8001770 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b98:	f7fe fdea 	bl	8001770 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0b5      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002baa:	f7ff fbe9 	bl	8002380 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f1      	beq.n	8002b98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fb13 	bl	80021f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bca:	f7fe fdd1 	bl	8001770 <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bd2:	f7fe fdcd 	bl	8001770 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e098      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002be4:	f7ff fbdf 	bl	80023a6 <LL_RCC_IsActiveFlag_PPRE1>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f1      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d017      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fb09 	bl	8002218 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c06:	f7fe fdb3 	bl	8001770 <HAL_GetTick>
 8002c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c0e:	f7fe fdaf 	bl	8001770 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e07a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c20:	f7ff fbd3 	bl	80023ca <LL_RCC_IsActiveFlag_PPRE2>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f1      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d043      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002c3e:	f7ff f8a9 	bl	8001d94 <LL_RCC_HSE_IsReady>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11e      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e064      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002c54:	f7ff fb2c 	bl	80022b0 <LL_RCC_PLL_IsReady>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d113      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e059      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002c6a:	f7ff fa11 	bl	8002090 <LL_RCC_MSI_IsReady>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d108      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e04e      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002c78:	f7ff f8bc 	bl	8001df4 <LL_RCC_HSI_IsReady>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e047      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fa4f 	bl	800212e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe fd6e 	bl	8001770 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe fd6a 	bl	8001770 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e033      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	f7ff fa52 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d1ec      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d21b      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 0207 	bic.w	r2, r3, #7
 8002cd4:	4912      	ldr	r1, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fd48 	bl	8001770 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ce4:	f7fe fd44 	bl	8001770 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1ef      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002d04:	f7fd fbb0 	bl	8000468 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002d08:	f7fe fd3e 	bl	8001788 <HAL_GetTickPrio>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fce2 	bl	80016d8 <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	58004000 	.word	0x58004000

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2a:	f7ff fa14 	bl	8002156 <LL_RCC_GetSysClkSource>
 8002d2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d36:	f7ff f9d0 	bl	80020da <LL_RCC_MSI_GetRange>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e04a      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e044      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d10a      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d5e:	f7fe ffcb 	bl	8001cf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e039      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e036      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d74:	f7ff fad3 	bl	800231e <LL_RCC_PLL_GetMainSource>
 8002d78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d002      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x62>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d003      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x68>
 8002d84:	e00d      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d88:	60bb      	str	r3, [r7, #8]
        break;
 8002d8a:	e015      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d8c:	f7fe ffb4 	bl	8001cf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d98:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d9a:	e00d      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d9e:	60bb      	str	r3, [r7, #8]
        break;
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002da2:	f7ff f99a 	bl	80020da <LL_RCC_MSI_GetRange>
 8002da6:	4603      	mov	r3, r0
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	60bb      	str	r3, [r7, #8]
        break;
 8002db6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002db8:	f7ff fa8c 	bl	80022d4 <LL_RCC_PLL_GetN>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	fb03 f402 	mul.w	r4, r3, r2
 8002dc4:	f7ff fa9f 	bl	8002306 <LL_RCC_PLL_GetDivider>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	3301      	adds	r3, #1
 8002dce:	fbb4 f4f3 	udiv	r4, r4, r3
 8002dd2:	f7ff fa8c 	bl	80022ee <LL_RCC_PLL_GetR>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	0f5b      	lsrs	r3, r3, #29
 8002dda:	3301      	adds	r3, #1
 8002ddc:	fbb4 f3f3 	udiv	r3, r4, r3
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	08006c48 	.word	0x08006c48
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	003d0900 	.word	0x003d0900
 8002df8:	007a1200 	.word	0x007a1200

08002dfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b598      	push	{r3, r4, r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e00:	f7ff ff90 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002e04:	4604      	mov	r4, r0
 8002e06:	f7ff fa1b 	bl	8002240 <LL_RCC_GetAHBPrescaler>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x24>)
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd98      	pop	{r3, r4, r7, pc}
 8002e20:	08006c08 	.word	0x08006c08

08002e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2bb0      	cmp	r3, #176	; 0xb0
 8002e30:	d903      	bls.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e007      	b.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002e4a:	f7ff fa05 	bl	8002258 <LL_RCC_GetAHB4Prescaler>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9c      	lsrs	r4, r3, #18
 8002e6e:	f7fe ff35 	bl	8001cdc <HAL_PWREx_GetVoltageRange>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4619      	mov	r1, r3
 8002e76:	4620      	mov	r0, r4
 8002e78:	f000 f80c 	bl	8002e94 <RCC_SetFlashLatency>
 8002e7c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd90      	pop	{r4, r7, pc}
 8002e86:	bf00      	nop
 8002e88:	08006c48 	.word	0x08006c48
 8002e8c:	08006c08 	.word	0x08006c08
 8002e90:	431bde83 	.word	0x431bde83

08002e94 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b093      	sub	sp, #76	; 0x4c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <RCC_SetFlashLatency+0xf0>)
 8002ea0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002eaa:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <RCC_SetFlashLatency+0xf4>)
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002eb6:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <RCC_SetFlashLatency+0xf8>)
 8002eb8:	f107 040c 	add.w	r4, r7, #12
 8002ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d11c      	bne.n	8002f08 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed2:	e015      	b.n	8002f00 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002edc:	4413      	add	r3, r2
 8002ede:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d808      	bhi.n	8002efa <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ef8:	e022      	b.n	8002f40 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efc:	3301      	adds	r3, #1
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d9e6      	bls.n	8002ed4 <RCC_SetFlashLatency+0x40>
 8002f06:	e01b      	b.n	8002f40 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	e015      	b.n	8002f3a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f16:	4413      	add	r3, r2
 8002f18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d808      	bhi.n	8002f34 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002f32:	e005      	b.n	8002f40 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f36:	3301      	adds	r3, #1
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d9e6      	bls.n	8002f0e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <RCC_SetFlashLatency+0xfc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 0207 	bic.w	r2, r3, #7
 8002f48:	4911      	ldr	r1, [pc, #68]	; (8002f90 <RCC_SetFlashLatency+0xfc>)
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f50:	f7fe fc0e 	bl	8001770 <HAL_GetTick>
 8002f54:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f56:	e008      	b.n	8002f6a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f58:	f7fe fc0a 	bl	8001770 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e007      	b.n	8002f7a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <RCC_SetFlashLatency+0xfc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1ef      	bne.n	8002f58 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	374c      	adds	r7, #76	; 0x4c
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08006b54 	.word	0x08006b54
 8002f88:	08006b64 	.word	0x08006b64
 8002f8c:	08006b70 	.word	0x08006b70
 8002f90:	58004000 	.word	0x58004000

08002f94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07c      	b.n	80030a0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f899 	bl	80030f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe6:	d902      	bls.n	8002fee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e002      	b.n	8002ff4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ffc:	d007      	beq.n	800300e <HAL_SPI_Init+0x7a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003006:	d002      	beq.n	800300e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800301e:	d903      	bls.n	8003028 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
 8003026:	e002      	b.n	800302e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	ea42 0103 	orr.w	r1, r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0204 	and.w	r2, r3, #4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01a      	b.n	80030f0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f81a 	bl	800310c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800312e:	2301      	movs	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x26>
 8003142:	2302      	movs	r3, #2
 8003144:	e1fb      	b.n	800353e <HAL_SPI_TransmitReceive+0x41e>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314e:	f7fe fb0f 	bl	8001770 <HAL_GetTick>
 8003152:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800315a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800316a:	7efb      	ldrb	r3, [r7, #27]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d00e      	beq.n	800318e <HAL_SPI_TransmitReceive+0x6e>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d106      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x66>
 8003180:	7efb      	ldrb	r3, [r7, #27]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d003      	beq.n	800318e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800318c:	e1cd      	b.n	800352a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x80>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x80>
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031a6:	e1c0      	b.n	800352a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d003      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2205      	movs	r2, #5
 80031b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fe:	d802      	bhi.n	8003206 <HAL_SPI_TransmitReceive+0xe6>
 8003200:	8a3b      	ldrh	r3, [r7, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d908      	bls.n	8003218 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	e007      	b.n	8003228 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d007      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800324e:	d97c      	bls.n	800334a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_SPI_TransmitReceive+0x13e>
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d169      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003282:	e056      	b.n	8003332 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d11b      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x1aa>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x1aa>
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d113      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d11c      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x1f2>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d016      	beq.n	8003312 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	b292      	uxth	r2, r2
 80032f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800330e:	2301      	movs	r3, #1
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003312:	f7fe fa2d 	bl	8001770 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331e:	429a      	cmp	r2, r3
 8003320:	d807      	bhi.n	8003332 <HAL_SPI_TransmitReceive+0x212>
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d003      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003330:	e0fb      	b.n	800352a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1a3      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x164>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d19d      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x164>
 8003348:	e0df      	b.n	800350a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_SPI_TransmitReceive+0x23a>
 8003352:	8a7b      	ldrh	r3, [r7, #18]
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 80cb 	bne.w	80034f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d912      	bls.n	800338a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b02      	subs	r3, #2
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003388:	e0b2      	b.n	80034f0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	7812      	ldrb	r2, [r2, #0]
 8003396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b0:	e09e      	b.n	80034f0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d134      	bne.n	800342a <HAL_SPI_TransmitReceive+0x30a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02f      	beq.n	800342a <HAL_SPI_TransmitReceive+0x30a>
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d12c      	bne.n	800342a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d912      	bls.n	8003400 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	881a      	ldrh	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b02      	subs	r3, #2
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033fe:	e012      	b.n	8003426 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	7812      	ldrb	r2, [r2, #0]
 800340c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d148      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x3aa>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d042      	beq.n	80034ca <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d923      	bls.n	8003498 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	b292      	uxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b02      	subs	r3, #2
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d81f      	bhi.n	80034c6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	e016      	b.n	80034c6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f103 020c 	add.w	r2, r3, #12
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034c6:	2301      	movs	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034ca:	f7fe f951 	bl	8001770 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d803      	bhi.n	80034e2 <HAL_SPI_TransmitReceive+0x3c2>
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d102      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x3c8>
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d103      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034ee:	e01c      	b.n	800352a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f47f af5b 	bne.w	80033b2 <HAL_SPI_TransmitReceive+0x292>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f af54 	bne.w	80033b2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8fe 	bl	8003710 <SPI_EndRxTxTransaction>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
 8003526:	e000      	b.n	800352a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800353a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800353e:	4618      	mov	r0, r3
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003554:	b2db      	uxtb	r3, r3
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003572:	e04c      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d048      	beq.n	800360e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800357c:	f7fe f8f8 	bl	8001770 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d902      	bls.n	8003592 <SPI_WaitFlagStateUntilTimeout+0x30>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d13d      	bne.n	800360e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035aa:	d111      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	d004      	beq.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d107      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d10f      	bne.n	80035fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e00f      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d1a3      	bne.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003644:	e057      	b.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800364c:	d106      	bne.n	800365c <SPI_WaitFifoStateUntilTimeout+0x26>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d048      	beq.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003664:	f7fe f884 	bl	8001770 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d902      	bls.n	800367a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d13d      	bne.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003692:	d111      	bne.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369c:	d004      	beq.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d107      	bne.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c0:	d10f      	bne.n	80036e2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e008      	b.n	8003708 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d19f      	bne.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff84 	bl	8003636 <SPI_WaitFifoStateUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e027      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2200      	movs	r2, #0
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ff07 	bl	8003562 <SPI_WaitFlagStateUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e014      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ff5d 	bl	8003636 <SPI_WaitFifoStateUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e000      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80037a0:	4907      	ldr	r1, [pc, #28]	; (80037c0 <MX_FATFS_Init+0x24>)
 80037a2:	4808      	ldr	r0, [pc, #32]	; (80037c4 <MX_FATFS_Init+0x28>)
 80037a4:	f003 f8ba 	bl	800691c <FATFS_LinkDriver>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	e003      	b.n	80037bc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <MX_FATFS_Init+0x2c>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80037ba:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000358 	.word	0x20000358
 80037c4:	08006c90 	.word	0x08006c90
 80037c8:	20000114 	.word	0x20000114

080037cc <MX_FATFS_Process>:
  * @brief  FatFs application main process
  * @param  None
  * @retval Process result 
  */
int32_t MX_FATFS_Process(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
  /* Mass Storage Application State Machine */
  switch(Appli_state)
 80037d6:	4b18      	ldr	r3, [pc, #96]	; (8003838 <MX_FATFS_Process+0x6c>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d002      	beq.n	80037e4 <MX_FATFS_Process+0x18>
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d01e      	beq.n	8003820 <MX_FATFS_Process+0x54>
      Appli_state = APPLICATION_IDLE;
    break;

  case APPLICATION_IDLE:
  default:
    break;
 80037e2:	e024      	b.n	800382e <MX_FATFS_Process+0x62>
    if(BSP_SD_GetCardState() == BSP_SD_OK)
 80037e4:	f7fd f89e 	bl	8000924 <BSP_SD_GetCardState>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d114      	bne.n	8003818 <MX_FATFS_Process+0x4c>
      res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80037ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <MX_FATFS_Process+0x70>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	2107      	movs	r1, #7
 80037fa:	4811      	ldr	r0, [pc, #68]	; (8003840 <MX_FATFS_Process+0x74>)
 80037fc:	f002 fc16 	bl	800602c <f_mkfs>
 8003800:	4603      	mov	r3, r0
 8003802:	70fb      	strb	r3, [r7, #3]
      if (res != FR_OK)
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <MX_FATFS_Process+0x44>
        process_res = APP_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	607b      	str	r3, [r7, #4]
      Appli_state = APPLICATION_RUNNING;
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <MX_FATFS_Process+0x6c>)
 8003812:	2202      	movs	r2, #2
 8003814:	701a      	strb	r2, [r3, #0]
    break;
 8003816:	e00a      	b.n	800382e <MX_FATFS_Process+0x62>
    process_res = APP_ERROR;
 8003818:	f04f 33ff 	mov.w	r3, #4294967295
 800381c:	607b      	str	r3, [r7, #4]
    break;
 800381e:	e006      	b.n	800382e <MX_FATFS_Process+0x62>
      process_res = FS_FileOperations();
 8003820:	f000 f818 	bl	8003854 <FS_FileOperations>
 8003824:	6078      	str	r0, [r7, #4]
      Appli_state = APPLICATION_IDLE;
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <MX_FATFS_Process+0x6c>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
    break;
 800382c:	bf00      	nop
  }
  return process_res;
 800382e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FATFS_Process */
}  
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000114 	.word	0x20000114
 800383c:	20000158 	.word	0x20000158
 8003840:	20000358 	.word	0x20000358

08003844 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003848:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <FS_FileOperations>:
/**
  * @brief File system : file operation
  * @retval File operation result 
  */
static int32_t FS_FileOperations(void)
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b0aa      	sub	sp, #168	; 0xa8
 8003858:	af00      	add	r7, sp, #0
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
 800385a:	4b31      	ldr	r3, [pc, #196]	; (8003920 <FS_FileOperations+0xcc>)
 800385c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8003860:	461d      	mov	r5, r3
 8003862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800386a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800386c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800386e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003872:	6020      	str	r0, [r4, #0]
 8003874:	3404      	adds	r4, #4
 8003876:	8021      	strh	r1, [r4, #0]
 8003878:	3402      	adds	r4, #2
 800387a:	0c0b      	lsrs	r3, r1, #16
 800387c:	7023      	strb	r3, [r4, #0]
  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800387e:	2200      	movs	r2, #0
 8003880:	4928      	ldr	r1, [pc, #160]	; (8003924 <FS_FileOperations+0xd0>)
 8003882:	4829      	ldr	r0, [pc, #164]	; (8003928 <FS_FileOperations+0xd4>)
 8003884:	f001 fe72 	bl	800556c <f_mount>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d142      	bne.n	8003914 <FS_FileOperations+0xc0>
  {
    /* Create and Open a new text file object with write access */
    if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800388e:	220a      	movs	r2, #10
 8003890:	4926      	ldr	r1, [pc, #152]	; (800392c <FS_FileOperations+0xd8>)
 8003892:	4827      	ldr	r0, [pc, #156]	; (8003930 <FS_FileOperations+0xdc>)
 8003894:	f001 feb0 	bl	80055f8 <f_open>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d13a      	bne.n	8003914 <FS_FileOperations+0xc0>
    {
      /* Write data to the text file */
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800389e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038a2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80038a6:	2237      	movs	r2, #55	; 0x37
 80038a8:	4821      	ldr	r0, [pc, #132]	; (8003930 <FS_FileOperations+0xdc>)
 80038aa:	f002 f9a2 	bl	8005bf2 <f_write>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

      if((byteswritten > 0) && (res == FR_OK))
 80038b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02b      	beq.n	8003914 <FS_FileOperations+0xc0>
 80038bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d127      	bne.n	8003914 <FS_FileOperations+0xc0>
      {
        /* Close the open text file */
        f_close(&SDFile);
 80038c4:	481a      	ldr	r0, [pc, #104]	; (8003930 <FS_FileOperations+0xdc>)
 80038c6:	f002 fb87 	bl	8005fd8 <f_close>

        /* Open the text file object with read access */
        if(f_open(&SDFile, "STM32.TXT", FA_READ) == FR_OK)
 80038ca:	2201      	movs	r2, #1
 80038cc:	4917      	ldr	r1, [pc, #92]	; (800392c <FS_FileOperations+0xd8>)
 80038ce:	4818      	ldr	r0, [pc, #96]	; (8003930 <FS_FileOperations+0xdc>)
 80038d0:	f001 fe92 	bl	80055f8 <f_open>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11c      	bne.n	8003914 <FS_FileOperations+0xc0>
        {
          /* Read data from the text file */
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 80038da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038de:	4639      	mov	r1, r7
 80038e0:	2264      	movs	r2, #100	; 0x64
 80038e2:	4813      	ldr	r0, [pc, #76]	; (8003930 <FS_FileOperations+0xdc>)
 80038e4:	f002 f846 	bl	8005974 <f_read>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

          if((bytesread > 0) && (res == FR_OK))
 80038ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <FS_FileOperations+0xc0>
 80038f6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <FS_FileOperations+0xc0>
          {
            /* Close the open text file */
            f_close(&SDFile);
 80038fe:	480c      	ldr	r0, [pc, #48]	; (8003930 <FS_FileOperations+0xdc>)
 8003900:	f002 fb6a 	bl	8005fd8 <f_close>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 8003904:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800390c:	429a      	cmp	r2, r3
 800390e:	d101      	bne.n	8003914 <FS_FileOperations+0xc0>
            {
              /* Success of the demo: no error occurrence */
              return 0;
 8003910:	2300      	movs	r3, #0
 8003912:	e001      	b.n	8003918 <FS_FileOperations+0xc4>
        }
      }
    }
  }
  /* Error */
  return -1;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003918:	4618      	mov	r0, r3
 800391a:	37a8      	adds	r7, #168	; 0xa8
 800391c:	46bd      	mov	sp, r7
 800391e:	bdb0      	pop	{r4, r5, r7, pc}
 8003920:	08006b8c 	.word	0x08006b8c
 8003924:	20000358 	.word	0x20000358
 8003928:	2000035c 	.word	0x2000035c
 800392c:	08006b80 	.word	0x08006b80
 8003930:	2000058c 	.word	0x2000058c

08003934 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <SD_CheckStatus+0x38>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == BSP_SD_OK)
 8003944:	f7fc ffee 	bl	8000924 <BSP_SD_GetCardState>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <SD_CheckStatus+0x38>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SD_CheckStatus+0x38>)
 800395c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <SD_CheckStatus+0x38>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	b2db      	uxtb	r3, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000020 	.word	0x20000020

08003970 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <SD_initialize+0x38>)
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003980:	f7fc fe14 	bl	80005ac <BSP_SD_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ffd1 	bl	8003934 <SD_CheckStatus>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <SD_initialize+0x38>)
 8003998:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <SD_initialize+0x38>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
  /* USER CODE END SDinitialize */
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000020 	.word	0x20000020

080039ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ffbb 	bl	8003934 <SD_CheckStatus>
 80039be:	4603      	mov	r3, r0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <SD_read+0x40>)
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f7fc fe60 	bl	80006a8 <BSP_SD_ReadBlocks>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <SD_read+0x36>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == BSP_SD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= BSP_SD_OK)
 80039ee:	bf00      	nop
 80039f0:	f7fc ff98 	bl	8000924 <BSP_SD_GetCardState>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1fa      	bne.n	80039f0 <SD_read+0x28>
    {
    }
    res = RES_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	05f5e100 	.word	0x05f5e100

08003a0c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <SD_write+0x40>)
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	68b8      	ldr	r0, [r7, #8]
 8003a28:	f7fc fedc 	bl	80007e4 <BSP_SD_WriteBlocks>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <SD_write+0x36>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != BSP_SD_OK)
 8003a32:	bf00      	nop
 8003a34:	f7fc ff76 	bl	8000924 <BSP_SD_GetCardState>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1fa      	bne.n	8003a34 <SD_write+0x28>
    {
    }
    res = RES_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]

}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	05f5e100 	.word	0x05f5e100

08003a50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	603a      	str	r2, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a66:	4b25      	ldr	r3, [pc, #148]	; (8003afc <SD_ioctl+0xac>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SD_ioctl+0x28>
 8003a74:	2303      	movs	r3, #3
 8003a76:	e03c      	b.n	8003af2 <SD_ioctl+0xa2>

  switch (cmd)
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d834      	bhi.n	8003ae8 <SD_ioctl+0x98>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <SD_ioctl+0x34>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003a9d 	.word	0x08003a9d
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003acf 	.word	0x08003acf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003a9a:	e028      	b.n	8003aee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fd91 	bl	80005c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003ab2:	e01c      	b.n	8003aee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fd85 	bl	80005c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003acc:	e00f      	b.n	8003aee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fd78 	bl	80005c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ada:	0a5a      	lsrs	r2, r3, #9
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003ae6:	e002      	b.n	8003aee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return res;
 8003aee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3750      	adds	r7, #80	; 0x50
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000020 	.word	0x20000020

08003b00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <disk_status+0x30>)
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	79fa      	ldrb	r2, [r7, #7]
 8003b18:	4905      	ldr	r1, [pc, #20]	; (8003b30 <disk_status+0x30>)
 8003b1a:	440a      	add	r2, r1
 8003b1c:	7a12      	ldrb	r2, [r2, #8]
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4798      	blx	r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000140 	.word	0x20000140

08003b34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <disk_initialize+0x48>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d111      	bne.n	8003b70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <disk_initialize+0x48>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <disk_initialize+0x48>)
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	79fa      	ldrb	r2, [r7, #7]
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <disk_initialize+0x48>)
 8003b64:	440a      	add	r2, r1
 8003b66:	7a12      	ldrb	r2, [r2, #8]
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000140 	.word	0x20000140

08003b80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <disk_read+0x3c>)
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	689c      	ldr	r4, [r3, #8]
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <disk_read+0x3c>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	7a18      	ldrb	r0, [r3, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	47a0      	blx	r4
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd90      	pop	{r4, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000140 	.word	0x20000140

08003bc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <disk_write+0x3c>)
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	68dc      	ldr	r4, [r3, #12]
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <disk_write+0x3c>)
 8003be0:	4413      	add	r3, r2
 8003be2:	7a18      	ldrb	r0, [r3, #8]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	47a0      	blx	r4
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000140 	.word	0x20000140

08003c00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	603a      	str	r2, [r7, #0]
 8003c0a:	71fb      	strb	r3, [r7, #7]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <disk_ioctl+0x38>)
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	79fa      	ldrb	r2, [r7, #7]
 8003c1e:	4906      	ldr	r1, [pc, #24]	; (8003c38 <disk_ioctl+0x38>)
 8003c20:	440a      	add	r2, r1
 8003c22:	7a10      	ldrb	r0, [r2, #8]
 8003c24:	79b9      	ldrb	r1, [r7, #6]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4798      	blx	r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000140 	.word	0x20000140

08003c3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3301      	adds	r3, #1
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c4c:	89fb      	ldrh	r3, [r7, #14]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b21a      	sxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b21b      	sxth	r3, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3303      	adds	r3, #3
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	3202      	adds	r2, #2
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3201      	adds	r2, #1
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	887a      	ldrh	r2, [r7, #2]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	1c53      	adds	r3, r2, #1
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	6179      	str	r1, [r7, #20]
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f1      	bne.n	8003d5a <mem_cpy+0x1a>
	}
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	617a      	str	r2, [r7, #20]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f3      	bne.n	8003d92 <mem_set+0x10>
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003db6:	b480      	push	{r7}
 8003db8:	b089      	sub	sp, #36	; 0x24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	61fa      	str	r2, [r7, #28]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	61ba      	str	r2, [r7, #24]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	1acb      	subs	r3, r1, r3
 8003de2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <mem_cmp+0x40>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0eb      	beq.n	8003dce <mem_cmp+0x18>

	return r;
 8003df6:	697b      	ldr	r3, [r7, #20]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3724      	adds	r7, #36	; 0x24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003e0e:	e002      	b.n	8003e16 <chk_chr+0x12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <chk_chr+0x26>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d1f2      	bne.n	8003e10 <chk_chr+0xc>
	return *str;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e029      	b.n	8003ea4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003e50:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <chk_lock+0xb4>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01d      	beq.n	8003e9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e5e:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <chk_lock+0xb4>)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	4413      	add	r3, r2
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d116      	bne.n	8003e9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003e70:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <chk_lock+0xb4>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	3304      	adds	r3, #4
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10c      	bne.n	8003e9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <chk_lock+0xb4>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d102      	bne.n	8003e9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003e98:	e007      	b.n	8003eaa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d9d2      	bls.n	8003e50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d109      	bne.n	8003ec4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <chk_lock+0x80>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d101      	bne.n	8003ec0 <chk_lock+0x84>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e010      	b.n	8003ee2 <chk_lock+0xa6>
 8003ec0:	2312      	movs	r3, #18
 8003ec2:	e00e      	b.n	8003ee2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <chk_lock+0xa0>
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <chk_lock+0xb4>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	4413      	add	r3, r2
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eda:	d101      	bne.n	8003ee0 <chk_lock+0xa4>
 8003edc:	2310      	movs	r3, #16
 8003ede:	e000      	b.n	8003ee2 <chk_lock+0xa6>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000120 	.word	0x20000120

08003ef4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	e002      	b.n	8003f06 <enq_lock+0x12>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3301      	adds	r3, #1
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d806      	bhi.n	8003f1a <enq_lock+0x26>
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <enq_lock+0x40>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4413      	add	r3, r2
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f2      	bne.n	8003f00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000120 	.word	0x20000120

08003f38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e01f      	b.n	8003f88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f48:	4a41      	ldr	r2, [pc, #260]	; (8004050 <inc_lock+0x118>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d113      	bne.n	8003f82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003f5a:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <inc_lock+0x118>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	3304      	adds	r3, #4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d109      	bne.n	8003f82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003f6e:	4a38      	ldr	r2, [pc, #224]	; (8004050 <inc_lock+0x118>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4413      	add	r3, r2
 8003f76:	3308      	adds	r3, #8
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d006      	beq.n	8003f90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d9dc      	bls.n	8003f48 <inc_lock+0x10>
 8003f8e:	e000      	b.n	8003f92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003f90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d132      	bne.n	8003ffe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e002      	b.n	8003fa4 <inc_lock+0x6c>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d806      	bhi.n	8003fb8 <inc_lock+0x80>
 8003faa:	4a29      	ldr	r2, [pc, #164]	; (8004050 <inc_lock+0x118>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	4413      	add	r3, r2
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f2      	bne.n	8003f9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d101      	bne.n	8003fc2 <inc_lock+0x8a>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e040      	b.n	8004044 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4922      	ldr	r1, [pc, #136]	; (8004050 <inc_lock+0x118>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	440b      	add	r3, r1
 8003fce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	491e      	ldr	r1, [pc, #120]	; (8004050 <inc_lock+0x118>)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	440b      	add	r3, r1
 8003fdc:	3304      	adds	r3, #4
 8003fde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	491a      	ldr	r1, [pc, #104]	; (8004050 <inc_lock+0x118>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	440b      	add	r3, r1
 8003fec:	3308      	adds	r3, #8
 8003fee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <inc_lock+0x118>)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <inc_lock+0xe0>
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <inc_lock+0x118>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	330c      	adds	r3, #12
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <inc_lock+0xe0>
 8004014:	2300      	movs	r3, #0
 8004016:	e015      	b.n	8004044 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <inc_lock+0xf8>
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <inc_lock+0x118>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	4413      	add	r3, r2
 8004026:	330c      	adds	r3, #12
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	e001      	b.n	8004034 <inc_lock+0xfc>
 8004030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004034:	4906      	ldr	r1, [pc, #24]	; (8004050 <inc_lock+0x118>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	440b      	add	r3, r1
 800403c:	330c      	adds	r3, #12
 800403e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000120 	.word	0x20000120

08004054 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d825      	bhi.n	80040b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <dec_lock+0x74>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	4413      	add	r3, r2
 8004070:	330c      	adds	r3, #12
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004076:	89fb      	ldrh	r3, [r7, #14]
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d101      	bne.n	8004082 <dec_lock+0x2e>
 800407e:	2300      	movs	r3, #0
 8004080:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <dec_lock+0x3a>
 8004088:	89fb      	ldrh	r3, [r7, #14]
 800408a:	3b01      	subs	r3, #1
 800408c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <dec_lock+0x74>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	4413      	add	r3, r2
 8004096:	330c      	adds	r3, #12
 8004098:	89fa      	ldrh	r2, [r7, #14]
 800409a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <dec_lock+0x5a>
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <dec_lock+0x74>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4413      	add	r3, r2
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	737b      	strb	r3, [r7, #13]
 80040b2:	e001      	b.n	80040b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80040b4:	2302      	movs	r3, #2
 80040b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80040b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000120 	.word	0x20000120

080040cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e010      	b.n	80040fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80040da:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <clear_lock+0x44>)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d105      	bne.n	80040f6 <clear_lock+0x2a>
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <clear_lock+0x44>)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d9eb      	bls.n	80040da <clear_lock+0xe>
	}
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000120 	.word	0x20000120

08004114 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	78db      	ldrb	r3, [r3, #3]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d034      	beq.n	8004192 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7858      	ldrb	r0, [r3, #1]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004138:	2301      	movs	r3, #1
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	f7ff fd40 	bl	8003bc0 <disk_write>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	e022      	b.n	8004192 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d217      	bcs.n	8004192 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	789b      	ldrb	r3, [r3, #2]
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	e010      	b.n	800418c <sync_window+0x78>
					wsect += fs->fsize;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7858      	ldrb	r0, [r3, #1]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800417e:	2301      	movs	r3, #1
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	f7ff fd1d 	bl	8003bc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d8eb      	bhi.n	800416a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d01b      	beq.n	80041ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ffad 	bl	8004114 <sync_window>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d113      	bne.n	80041ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7858      	ldrb	r0, [r3, #1]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80041ce:	2301      	movs	r3, #1
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	f7ff fcd5 	bl	8003b80 <disk_read>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff87 	bl	8004114 <sync_window>
 8004206:	4603      	mov	r3, r0
 8004208:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d158      	bne.n	80042c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d148      	bne.n	80042aa <sync_fs+0xb2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d144      	bne.n	80042aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3330      	adds	r3, #48	; 0x30
 8004224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fda9 	bl	8003d82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3330      	adds	r3, #48	; 0x30
 8004234:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004238:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fd38 	bl	8003cb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3330      	adds	r3, #48	; 0x30
 8004246:	4921      	ldr	r1, [pc, #132]	; (80042cc <sync_fs+0xd4>)
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fd4d 	bl	8003ce8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3330      	adds	r3, #48	; 0x30
 8004252:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004256:	491e      	ldr	r1, [pc, #120]	; (80042d0 <sync_fs+0xd8>)
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fd45 	bl	8003ce8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3330      	adds	r3, #48	; 0x30
 8004262:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7ff fd3b 	bl	8003ce8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3330      	adds	r3, #48	; 0x30
 8004276:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7ff fd31 	bl	8003ce8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7858      	ldrb	r0, [r3, #1]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	2301      	movs	r3, #1
 80042a0:	f7ff fc8e 	bl	8003bc0 <disk_write>
			fs->fsi_flag = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fca4 	bl	8003c00 <disk_ioctl>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <sync_fs+0xca>
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	41615252 	.word	0x41615252
 80042d0:	61417272 	.word	0x61417272

080042d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	3b02      	subs	r3, #2
 80042e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	3b02      	subs	r3, #2
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d301      	bcc.n	80042f4 <clust2sect+0x20>
 80042f0:	2300      	movs	r3, #0
 80042f2:	e008      	b.n	8004306 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	895b      	ldrh	r3, [r3, #10]
 80042f8:	461a      	mov	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	fb03 f202 	mul.w	r2, r3, r2
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	4413      	add	r3, r2
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d904      	bls.n	8004332 <get_fat+0x20>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e08c      	b.n	8004452 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d045      	beq.n	80043d2 <get_fat+0xc0>
 8004346:	2b03      	cmp	r3, #3
 8004348:	d05d      	beq.n	8004406 <get_fat+0xf4>
 800434a:	2b01      	cmp	r3, #1
 800434c:	d177      	bne.n	800443e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0a5b      	lsrs	r3, r3, #9
 8004364:	4413      	add	r3, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6938      	ldr	r0, [r7, #16]
 800436a:	f7ff ff17 	bl	800419c <move_window>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d167      	bne.n	8004444 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	60fa      	str	r2, [r7, #12]
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004386:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	0a5b      	lsrs	r3, r3, #9
 8004390:	4413      	add	r3, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6938      	ldr	r0, [r7, #16]
 8004396:	f7ff ff01 	bl	800419c <move_window>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d153      	bne.n	8004448 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <get_fat+0xb6>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	e002      	b.n	80043ce <get_fat+0xbc>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ce:	617b      	str	r3, [r7, #20]
			break;
 80043d0:	e03f      	b.n	8004452 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6a1a      	ldr	r2, [r3, #32]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	4413      	add	r3, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	6938      	ldr	r0, [r7, #16]
 80043e0:	f7ff fedc 	bl	800419c <move_window>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d130      	bne.n	800444c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80043f8:	4413      	add	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fc1e 	bl	8003c3c <ld_word>
 8004400:	4603      	mov	r3, r0
 8004402:	617b      	str	r3, [r7, #20]
			break;
 8004404:	e025      	b.n	8004452 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	09db      	lsrs	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	4619      	mov	r1, r3
 8004412:	6938      	ldr	r0, [r7, #16]
 8004414:	f7ff fec2 	bl	800419c <move_window>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d118      	bne.n	8004450 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800442c:	4413      	add	r3, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fc1c 	bl	8003c6c <ld_dword>
 8004434:	4603      	mov	r3, r0
 8004436:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800443a:	617b      	str	r3, [r7, #20]
			break;
 800443c:	e009      	b.n	8004452 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e006      	b.n	8004452 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004444:	bf00      	nop
 8004446:	e004      	b.n	8004452 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004450:	bf00      	nop
		}
	}

	return val;
 8004452:	697b      	ldr	r3, [r7, #20]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004468:	2302      	movs	r3, #2
 800446a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	f240 80d6 	bls.w	8004620 <put_fat+0x1c4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	f080 80d0 	bcs.w	8004620 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d073      	beq.n	8004570 <put_fat+0x114>
 8004488:	2b03      	cmp	r3, #3
 800448a:	f000 8091 	beq.w	80045b0 <put_fat+0x154>
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 80c6 	bne.w	8004620 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4413      	add	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1a      	ldr	r2, [r3, #32]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	0a5b      	lsrs	r3, r3, #9
 80044aa:	4413      	add	r3, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fe74 	bl	800419c <move_window>
 80044b4:	4603      	mov	r3, r0
 80044b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 80a9 	bne.w	8004612 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	61b9      	str	r1, [r7, #24]
 80044cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d0:	4413      	add	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <put_fat+0x9e>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	b25a      	sxtb	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e001      	b.n	80044fe <put_fat+0xa2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	0a5b      	lsrs	r3, r3, #9
 8004510:	4413      	add	r3, r2
 8004512:	4619      	mov	r1, r3
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff fe41 	bl	800419c <move_window>
 800451a:	4603      	mov	r3, r0
 800451c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d178      	bne.n	8004616 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <put_fat+0xea>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e00e      	b.n	8004564 <put_fat+0x108>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b25b      	sxtb	r3, r3
 800454c:	f023 030f 	bic.w	r3, r3, #15
 8004550:	b25a      	sxtb	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	b25b      	sxtb	r3, r3
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	b25b      	sxtb	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b25b      	sxtb	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	70da      	strb	r2, [r3, #3]
			break;
 800456e:	e057      	b.n	8004620 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	4413      	add	r3, r2
 800457a:	4619      	mov	r1, r3
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fe0d 	bl	800419c <move_window>
 8004582:	4603      	mov	r3, r0
 8004584:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d146      	bne.n	800461a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800459a:	4413      	add	r3, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	b292      	uxth	r2, r2
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff fb85 	bl	8003cb2 <st_word>
			fs->wflag = 1;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	70da      	strb	r2, [r3, #3]
			break;
 80045ae:	e037      	b.n	8004620 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1a      	ldr	r2, [r3, #32]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	09db      	lsrs	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fded 	bl	800419c <move_window>
 80045c2:	4603      	mov	r3, r0
 80045c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045c6:	7ffb      	ldrb	r3, [r7, #31]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d128      	bne.n	800461e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80045e0:	4413      	add	r3, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fb42 	bl	8003c6c <ld_dword>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045ee:	4323      	orrs	r3, r4
 80045f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004600:	4413      	add	r3, r2
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fb6f 	bl	8003ce8 <st_dword>
			fs->wflag = 1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	70da      	strb	r2, [r3, #3]
			break;
 8004610:	e006      	b.n	8004620 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004612:	bf00      	nop
 8004614:	e004      	b.n	8004620 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004616:	bf00      	nop
 8004618:	e002      	b.n	8004620 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800461a:	bf00      	nop
 800461c:	e000      	b.n	8004620 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800461e:	bf00      	nop
		}
	}
	return res;
 8004620:	7ffb      	ldrb	r3, [r7, #31]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd90      	pop	{r4, r7, pc}

0800462a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b088      	sub	sp, #32
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d904      	bls.n	8004650 <remove_chain+0x26>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d301      	bcc.n	8004654 <remove_chain+0x2a>
 8004650:	2302      	movs	r3, #2
 8004652:	e04b      	b.n	80046ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00c      	beq.n	8004674 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	69b8      	ldr	r0, [r7, #24]
 8004662:	f7ff fefb 	bl	800445c <put_fat>
 8004666:	4603      	mov	r3, r0
 8004668:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <remove_chain+0x4a>
 8004670:	7ffb      	ldrb	r3, [r7, #31]
 8004672:	e03b      	b.n	80046ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff fe4b 	bl	8004312 <get_fat>
 800467c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d031      	beq.n	80046e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <remove_chain+0x64>
 800468a:	2302      	movs	r3, #2
 800468c:	e02e      	b.n	80046ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d101      	bne.n	800469a <remove_chain+0x70>
 8004696:	2301      	movs	r3, #1
 8004698:	e028      	b.n	80046ec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800469a:	2200      	movs	r2, #0
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	69b8      	ldr	r0, [r7, #24]
 80046a0:	f7ff fedc 	bl	800445c <put_fat>
 80046a4:	4603      	mov	r3, r0
 80046a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80046a8:	7ffb      	ldrb	r3, [r7, #31]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <remove_chain+0x88>
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
 80046b0:	e01c      	b.n	80046ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	3b02      	subs	r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d20b      	bcs.n	80046d8 <remove_chain+0xae>
			fs->free_clst++;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3c6      	bcc.n	8004674 <remove_chain+0x4a>
 80046e6:	e000      	b.n	80046ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80046e8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <create_chain+0x2c>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d31b      	bcc.n	8004758 <create_chain+0x64>
 8004720:	2301      	movs	r3, #1
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e018      	b.n	8004758 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fdf2 	bl	8004312 <get_fat>
 800472e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d801      	bhi.n	800473a <create_chain+0x46>
 8004736:	2301      	movs	r3, #1
 8004738:	e070      	b.n	800481c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d101      	bne.n	8004746 <create_chain+0x52>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	e06a      	b.n	800481c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d201      	bcs.n	8004754 <create_chain+0x60>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e063      	b.n	800481c <create_chain+0x128>
		scl = clst;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3301      	adds	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d307      	bcc.n	800477c <create_chain+0x88>
				ncl = 2;
 800476c:	2302      	movs	r3, #2
 800476e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d901      	bls.n	800477c <create_chain+0x88>
 8004778:	2300      	movs	r3, #0
 800477a:	e04f      	b.n	800481c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fdc7 	bl	8004312 <get_fat>
 8004784:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d003      	beq.n	800479a <create_chain+0xa6>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d101      	bne.n	800479e <create_chain+0xaa>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	e03e      	b.n	800481c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d1da      	bne.n	800475c <create_chain+0x68>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e038      	b.n	800481c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80047aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	69f9      	ldr	r1, [r7, #28]
 80047b2:	6938      	ldr	r0, [r7, #16]
 80047b4:	f7ff fe52 	bl	800445c <put_fat>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <create_chain+0xe2>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d006      	beq.n	80047d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6938      	ldr	r0, [r7, #16]
 80047ce:	f7ff fe45 	bl	800445c <put_fat>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <create_chain+0x116>
		fs->last_clst = ncl;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	3b02      	subs	r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d804      	bhi.n	80047fa <create_chain+0x106>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	791b      	ldrb	r3, [r3, #4]
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	711a      	strb	r2, [r3, #4]
 8004808:	e007      	b.n	800481a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <create_chain+0x122>
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	e000      	b.n	8004818 <create_chain+0x124>
 8004816:	2301      	movs	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800481a:	69fb      	ldr	r3, [r7, #28]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	3304      	adds	r3, #4
 800483a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	0a5b      	lsrs	r3, r3, #9
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	8952      	ldrh	r2, [r2, #10]
 8004844:	fbb3 f3f2 	udiv	r3, r3, r2
 8004848:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1d1a      	adds	r2, r3, #4
 800484e:	613a      	str	r2, [r7, #16]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <clmt_clust+0x3a>
 800485a:	2300      	movs	r3, #0
 800485c:	e010      	b.n	8004880 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d307      	bcc.n	8004876 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3304      	adds	r3, #4
 8004872:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004874:	e7e9      	b.n	800484a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004876:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a2:	d204      	bcs.n	80048ae <dir_sdi+0x22>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80048ae:	2302      	movs	r3, #2
 80048b0:	e063      	b.n	800497a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <dir_sdi+0x46>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d902      	bls.n	80048d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	8912      	ldrh	r2, [r2, #8]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d301      	bcc.n	80048e8 <dir_sdi+0x5c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e048      	b.n	800497a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	61da      	str	r2, [r3, #28]
 80048f0:	e029      	b.n	8004946 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	895b      	ldrh	r3, [r3, #10]
 80048f6:	025b      	lsls	r3, r3, #9
 80048f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80048fa:	e019      	b.n	8004930 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fd06 	bl	8004312 <get_fat>
 8004906:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d101      	bne.n	8004914 <dir_sdi+0x88>
 8004910:	2301      	movs	r3, #1
 8004912:	e032      	b.n	800497a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d904      	bls.n	8004924 <dir_sdi+0x98>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	429a      	cmp	r2, r3
 8004922:	d301      	bcc.n	8004928 <dir_sdi+0x9c>
 8004924:	2302      	movs	r3, #2
 8004926:	e028      	b.n	800497a <dir_sdi+0xee>
			ofs -= csz;
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d2e1      	bcs.n	80048fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	6938      	ldr	r0, [r7, #16]
 800493c:	f7ff fcca 	bl	80042d4 <clust2sect>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <dir_sdi+0xcc>
 8004954:	2302      	movs	r3, #2
 8004956:	e010      	b.n	800497a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	441a      	add	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	3320      	adds	r3, #32
 8004998:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <dir_next+0x28>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a8:	d301      	bcc.n	80049ae <dir_next+0x2c>
 80049aa:	2304      	movs	r3, #4
 80049ac:	e0aa      	b.n	8004b04 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 8098 	bne.w	8004aea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	8912      	ldrh	r2, [r2, #8]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f0c0 8088 	bcc.w	8004aea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	61da      	str	r2, [r3, #28]
 80049e0:	2304      	movs	r3, #4
 80049e2:	e08f      	b.n	8004b04 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	0a5b      	lsrs	r3, r3, #9
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	8952      	ldrh	r2, [r2, #10]
 80049ec:	3a01      	subs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d17a      	bne.n	8004aea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f7ff fc88 	bl	8004312 <get_fat>
 8004a02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d801      	bhi.n	8004a0e <dir_next+0x8c>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e07a      	b.n	8004b04 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d101      	bne.n	8004a1a <dir_next+0x98>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e074      	b.n	8004b04 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d358      	bcc.n	8004ad6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	61da      	str	r2, [r3, #28]
 8004a30:	2304      	movs	r3, #4
 8004a32:	e067      	b.n	8004b04 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7ff fe59 	bl	80046f4 <create_chain>
 8004a42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <dir_next+0xcc>
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	e05a      	b.n	8004b04 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <dir_next+0xd6>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e055      	b.n	8004b04 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d101      	bne.n	8004a64 <dir_next+0xe2>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e04f      	b.n	8004b04 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fb55 	bl	8004114 <sync_window>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <dir_next+0xf2>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e047      	b.n	8004b04 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3330      	adds	r3, #48	; 0x30
 8004a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff f97f 	bl	8003d82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fc22 	bl	80042d4 <clust2sect>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a96:	e012      	b.n	8004abe <dir_next+0x13c>
						fs->wflag = 1;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff fb38 	bl	8004114 <sync_window>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <dir_next+0x12c>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e02a      	b.n	8004b04 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	895b      	ldrh	r3, [r3, #10]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d3e6      	bcc.n	8004a98 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad2      	subs	r2, r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004adc:	6979      	ldr	r1, [r7, #20]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fbf8 	bl	80042d4 <clust2sect>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff feb4 	bl	800488c <dir_sdi>
 8004b24:	4603      	mov	r3, r0
 8004b26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d12b      	bne.n	8004b86 <dir_alloc+0x7a>
		n = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	4619      	mov	r1, r3
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff fb2f 	bl	800419c <move_window>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11d      	bne.n	8004b84 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2be5      	cmp	r3, #229	; 0xe5
 8004b50:	d004      	beq.n	8004b5c <dir_alloc+0x50>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d102      	bne.n	8004b70 <dir_alloc+0x64>
 8004b6a:	e00c      	b.n	8004b86 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004b70:	2101      	movs	r1, #1
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff05 	bl	8004982 <dir_next>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0d7      	beq.n	8004b32 <dir_alloc+0x26>
 8004b82:	e000      	b.n	8004b86 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004b84:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d101      	bne.n	8004b90 <dir_alloc+0x84>
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	331a      	adds	r3, #26
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff f847 	bl	8003c3c <ld_word>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d109      	bne.n	8004bce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f83c 	bl	8003c3c <ld_word>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	331a      	adds	r3, #26
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	b292      	uxth	r2, r2
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff f85f 	bl	8003cb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d109      	bne.n	8004c10 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f103 0214 	add.w	r2, r3, #20
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff f851 	bl	8003cb2 <st_word>
	}
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004c26:	2100      	movs	r1, #0
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe2f 	bl	800488c <dir_sdi>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <dir_find+0x24>
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	e03e      	b.n	8004cba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4619      	mov	r1, r3
 8004c42:	6938      	ldr	r0, [r7, #16]
 8004c44:	f7ff faaa 	bl	800419c <move_window>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12f      	bne.n	8004cb2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <dir_find+0x4e>
 8004c60:	2304      	movs	r3, #4
 8004c62:	75fb      	strb	r3, [r7, #23]
 8004c64:	e028      	b.n	8004cb8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	330b      	adds	r3, #11
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	330b      	adds	r3, #11
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <dir_find+0x86>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a18      	ldr	r0, [r3, #32]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	220b      	movs	r2, #11
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7ff f88f 	bl	8003db6 <mem_cmp>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fe6e 	bl	8004982 <dir_next>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0c5      	beq.n	8004c3c <dir_find+0x24>
 8004cb0:	e002      	b.n	8004cb8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004cb6:	bf00      	nop

	return res;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff1a 	bl	8004b0c <dir_alloc>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d11c      	bne.n	8004d1c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	68b8      	ldr	r0, [r7, #8]
 8004cea:	f7ff fa57 	bl	800419c <move_window>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff f83e 	bl	8003d82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a18      	ldr	r0, [r3, #32]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3324      	adds	r3, #36	; 0x24
 8004d0e:	220b      	movs	r2, #11
 8004d10:	4619      	mov	r1, r3
 8004d12:	f7ff f815 	bl	8003d40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004d3e:	220b      	movs	r2, #11
 8004d40:	2120      	movs	r1, #32
 8004d42:	68b8      	ldr	r0, [r7, #8]
 8004d44:	f7ff f81d 	bl	8003d82 <mem_set>
	si = i = 0; ni = 8;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	2308      	movs	r3, #8
 8004d52:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	617a      	str	r2, [r7, #20]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d94e      	bls.n	8004e06 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
 8004d6a:	2b2f      	cmp	r3, #47	; 0x2f
 8004d6c:	d006      	beq.n	8004d7c <create_name+0x54>
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	2b5c      	cmp	r3, #92	; 0x5c
 8004d72:	d110      	bne.n	8004d96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004d74:	e002      	b.n	8004d7c <create_name+0x54>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b2f      	cmp	r3, #47	; 0x2f
 8004d86:	d0f6      	beq.n	8004d76 <create_name+0x4e>
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b5c      	cmp	r3, #92	; 0x5c
 8004d92:	d0f0      	beq.n	8004d76 <create_name+0x4e>
			break;
 8004d94:	e038      	b.n	8004e08 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004d96:	7ffb      	ldrb	r3, [r7, #31]
 8004d98:	2b2e      	cmp	r3, #46	; 0x2e
 8004d9a:	d003      	beq.n	8004da4 <create_name+0x7c>
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d30c      	bcc.n	8004dbe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b0b      	cmp	r3, #11
 8004da8:	d002      	beq.n	8004db0 <create_name+0x88>
 8004daa:	7ffb      	ldrb	r3, [r7, #31]
 8004dac:	2b2e      	cmp	r3, #46	; 0x2e
 8004dae:	d001      	beq.n	8004db4 <create_name+0x8c>
 8004db0:	2306      	movs	r3, #6
 8004db2:	e044      	b.n	8004e3e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004db4:	2308      	movs	r3, #8
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	230b      	movs	r3, #11
 8004dba:	61bb      	str	r3, [r7, #24]
			continue;
 8004dbc:	e022      	b.n	8004e04 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004dbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da04      	bge.n	8004dd0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	3b80      	subs	r3, #128	; 0x80
 8004dca:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <create_name+0x120>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
 8004dce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	481d      	ldr	r0, [pc, #116]	; (8004e4c <create_name+0x124>)
 8004dd6:	f7ff f815 	bl	8003e04 <chk_chr>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <create_name+0xbc>
 8004de0:	2306      	movs	r3, #6
 8004de2:	e02c      	b.n	8004e3e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b60      	cmp	r3, #96	; 0x60
 8004de8:	d905      	bls.n	8004df6 <create_name+0xce>
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b7a      	cmp	r3, #122	; 0x7a
 8004dee:	d802      	bhi.n	8004df6 <create_name+0xce>
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	3b20      	subs	r3, #32
 8004df4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	613a      	str	r2, [r7, #16]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4413      	add	r3, r2
 8004e00:	7ffa      	ldrb	r2, [r7, #31]
 8004e02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004e04:	e7a6      	b.n	8004d54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004e06:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <create_name+0xf4>
 8004e18:	2306      	movs	r3, #6
 8004e1a:	e010      	b.n	8004e3e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2be5      	cmp	r3, #229	; 0xe5
 8004e22:	d102      	bne.n	8004e2a <create_name+0x102>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2205      	movs	r2, #5
 8004e28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004e2a:	7ffb      	ldrb	r3, [r7, #31]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d801      	bhi.n	8004e34 <create_name+0x10c>
 8004e30:	2204      	movs	r2, #4
 8004e32:	e000      	b.n	8004e36 <create_name+0x10e>
 8004e34:	2200      	movs	r2, #0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	330b      	adds	r3, #11
 8004e3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e3c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	08006ca4 	.word	0x08006ca4
 8004e4c:	08006bc4 	.word	0x08006bc4

08004e50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004e64:	e002      	b.n	8004e6c <follow_path+0x1c>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b2f      	cmp	r3, #47	; 0x2f
 8004e72:	d0f8      	beq.n	8004e66 <follow_path+0x16>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b5c      	cmp	r3, #92	; 0x5c
 8004e7a:	d0f4      	beq.n	8004e66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b1f      	cmp	r3, #31
 8004e88:	d80a      	bhi.n	8004ea0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004e92:	2100      	movs	r1, #0
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fcf9 	bl	800488c <dir_sdi>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]
 8004e9e:	e043      	b.n	8004f28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff3f 	bl	8004d28 <create_name>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d134      	bne.n	8004f1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff feaf 	bl	8004c18 <dir_find>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ec4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d127      	bne.n	8004f22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004ed2:	7afb      	ldrb	r3, [r7, #11]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d122      	bne.n	8004f22 <follow_path+0xd2>
 8004edc:	2305      	movs	r3, #5
 8004ede:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004ee0:	e01f      	b.n	8004f22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11c      	bne.n	8004f26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	799b      	ldrb	r3, [r3, #6]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004ef8:	2305      	movs	r3, #5
 8004efa:	75fb      	strb	r3, [r7, #23]
 8004efc:	e014      	b.n	8004f28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	4413      	add	r3, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff fe42 	bl	8004b9a <ld_clust>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f1c:	e7c0      	b.n	8004ea0 <follow_path+0x50>
			if (res != FR_OK) break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <follow_path+0xd8>
				break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f26:	bf00      	nop
			}
		}
	}

	return res;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d031      	beq.n	8004fac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e002      	b.n	8004f56 <get_ldnumber+0x24>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d903      	bls.n	8004f66 <get_ldnumber+0x34>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b3a      	cmp	r3, #58	; 0x3a
 8004f64:	d1f4      	bne.n	8004f50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b3a      	cmp	r3, #58	; 0x3a
 8004f6c:	d11c      	bne.n	8004fa8 <get_ldnumber+0x76>
			tp = *path;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	60fa      	str	r2, [r7, #12]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d80e      	bhi.n	8004fa4 <get_ldnumber+0x72>
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d10a      	bne.n	8004fa4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <get_ldnumber+0x72>
					vol = (int)i;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	e002      	b.n	8004fae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004fac:	693b      	ldr	r3, [r7, #16]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	70da      	strb	r2, [r3, #3]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff f8e0 	bl	800419c <move_window>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <check_fs+0x2a>
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e038      	b.n	8005058 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3330      	adds	r3, #48	; 0x30
 8004fea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fe24 	bl	8003c3c <ld_word>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <check_fs+0x48>
 8005000:	2303      	movs	r3, #3
 8005002:	e029      	b.n	8005058 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800500a:	2be9      	cmp	r3, #233	; 0xe9
 800500c:	d009      	beq.n	8005022 <check_fs+0x66>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005014:	2beb      	cmp	r3, #235	; 0xeb
 8005016:	d11e      	bne.n	8005056 <check_fs+0x9a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800501e:	2b90      	cmp	r3, #144	; 0x90
 8005020:	d119      	bne.n	8005056 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3330      	adds	r3, #48	; 0x30
 8005026:	3336      	adds	r3, #54	; 0x36
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fe1f 	bl	8003c6c <ld_dword>
 800502e:	4603      	mov	r3, r0
 8005030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <check_fs+0xa4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <check_fs+0x82>
 800503a:	2300      	movs	r3, #0
 800503c:	e00c      	b.n	8005058 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3330      	adds	r3, #48	; 0x30
 8005042:	3352      	adds	r3, #82	; 0x52
 8005044:	4618      	mov	r0, r3
 8005046:	f7fe fe11 	bl	8003c6c <ld_dword>
 800504a:	4602      	mov	r2, r0
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <check_fs+0xa8>)
 800504e:	429a      	cmp	r2, r3
 8005050:	d101      	bne.n	8005056 <check_fs+0x9a>
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005056:	2302      	movs	r3, #2
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00544146 	.word	0x00544146
 8005064:	33544146 	.word	0x33544146

08005068 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b096      	sub	sp, #88	; 0x58
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff ff58 	bl	8004f32 <get_ldnumber>
 8005082:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	da01      	bge.n	800508e <find_volume+0x26>
 800508a:	230b      	movs	r3, #11
 800508c:	e22e      	b.n	80054ec <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800508e:	4aa8      	ldr	r2, [pc, #672]	; (8005330 <find_volume+0x2c8>)
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <find_volume+0x3a>
 800509e:	230c      	movs	r3, #12
 80050a0:	e224      	b.n	80054ec <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01a      	beq.n	80050ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe fd1f 	bl	8003b00 <disk_status>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80050c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <find_volume+0x82>
 80050da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80050e6:	230a      	movs	r3, #10
 80050e8:	e200      	b.n	80054ec <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80050ea:	2300      	movs	r3, #0
 80050ec:	e1fe      	b.n	80054ec <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe fd17 	bl	8003b34 <disk_initialize>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800510c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005118:	2303      	movs	r3, #3
 800511a:	e1e7      	b.n	80054ec <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <find_volume+0xca>
 8005122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800512e:	230a      	movs	r3, #10
 8005130:	e1dc      	b.n	80054ec <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005136:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800513a:	f7ff ff3f 	bl	8004fbc <check_fs>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005148:	2b02      	cmp	r3, #2
 800514a:	d14b      	bne.n	80051e4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800514c:	2300      	movs	r3, #0
 800514e:	643b      	str	r3, [r7, #64]	; 0x40
 8005150:	e01f      	b.n	8005192 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005160:	4413      	add	r3, r2
 8005162:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	3304      	adds	r3, #4
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <find_volume+0x114>
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	3308      	adds	r3, #8
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fd7a 	bl	8003c6c <ld_dword>
 8005178:	4602      	mov	r2, r0
 800517a:	e000      	b.n	800517e <find_volume+0x116>
 800517c:	2200      	movs	r2, #0
 800517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005186:	440b      	add	r3, r1
 8005188:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800518c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518e:	3301      	adds	r3, #1
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
 8005192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005194:	2b03      	cmp	r3, #3
 8005196:	d9dc      	bls.n	8005152 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005198:	2300      	movs	r3, #0
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <find_volume+0x140>
 80051a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a4:	3b01      	subs	r3, #1
 80051a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80051b0:	4413      	add	r3, r2
 80051b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80051b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <find_volume+0x162>
 80051be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051c2:	f7ff fefb 	bl	8004fbc <check_fs>
 80051c6:	4603      	mov	r3, r0
 80051c8:	e000      	b.n	80051cc <find_volume+0x164>
 80051ca:	2303      	movs	r3, #3
 80051cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80051d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d905      	bls.n	80051e4 <find_volume+0x17c>
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	3301      	adds	r3, #1
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d9e1      	bls.n	80051a8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d101      	bne.n	80051f0 <find_volume+0x188>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e17d      	b.n	80054ec <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80051f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d901      	bls.n	80051fc <find_volume+0x194>
 80051f8:	230d      	movs	r3, #13
 80051fa:	e177      	b.n	80054ec <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	3330      	adds	r3, #48	; 0x30
 8005200:	330b      	adds	r3, #11
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fd1a 	bl	8003c3c <ld_word>
 8005208:	4603      	mov	r3, r0
 800520a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520e:	d001      	beq.n	8005214 <find_volume+0x1ac>
 8005210:	230d      	movs	r3, #13
 8005212:	e16b      	b.n	80054ec <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	3330      	adds	r3, #48	; 0x30
 8005218:	3316      	adds	r3, #22
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fd0e 	bl	8003c3c <ld_word>
 8005220:	4603      	mov	r3, r0
 8005222:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <find_volume+0x1d0>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	3330      	adds	r3, #48	; 0x30
 800522e:	3324      	adds	r3, #36	; 0x24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fd1b 	bl	8003c6c <ld_dword>
 8005236:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800523c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d005      	beq.n	800525c <find_volume+0x1f4>
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	789b      	ldrb	r3, [r3, #2]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d001      	beq.n	800525c <find_volume+0x1f4>
 8005258:	230d      	movs	r3, #13
 800525a:	e147      	b.n	80054ec <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	789b      	ldrb	r3, [r3, #2]
 8005260:	461a      	mov	r2, r3
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005270:	b29a      	uxth	r2, r3
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	895b      	ldrh	r3, [r3, #10]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <find_volume+0x228>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	895b      	ldrh	r3, [r3, #10]
 8005282:	461a      	mov	r2, r3
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	895b      	ldrh	r3, [r3, #10]
 8005288:	3b01      	subs	r3, #1
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <find_volume+0x22c>
 8005290:	230d      	movs	r3, #13
 8005292:	e12b      	b.n	80054ec <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	3330      	adds	r3, #48	; 0x30
 8005298:	3311      	adds	r3, #17
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fcce 	bl	8003c3c <ld_word>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	891b      	ldrh	r3, [r3, #8]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <find_volume+0x252>
 80052b6:	230d      	movs	r3, #13
 80052b8:	e118      	b.n	80054ec <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	3330      	adds	r3, #48	; 0x30
 80052be:	3313      	adds	r3, #19
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe fcbb 	bl	8003c3c <ld_word>
 80052c6:	4603      	mov	r3, r0
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <find_volume+0x276>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	3330      	adds	r3, #48	; 0x30
 80052d4:	3320      	adds	r3, #32
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fcc8 	bl	8003c6c <ld_dword>
 80052dc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	3330      	adds	r3, #48	; 0x30
 80052e2:	330e      	adds	r3, #14
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fca9 	bl	8003c3c <ld_word>
 80052ea:	4603      	mov	r3, r0
 80052ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80052ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <find_volume+0x290>
 80052f4:	230d      	movs	r3, #13
 80052f6:	e0f9      	b.n	80054ec <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80052f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	4413      	add	r3, r2
 80052fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005300:	8912      	ldrh	r2, [r2, #8]
 8005302:	0912      	lsrs	r2, r2, #4
 8005304:	b292      	uxth	r2, r2
 8005306:	4413      	add	r3, r2
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800530a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	429a      	cmp	r2, r3
 8005310:	d201      	bcs.n	8005316 <find_volume+0x2ae>
 8005312:	230d      	movs	r3, #13
 8005314:	e0ea      	b.n	80054ec <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531e:	8952      	ldrh	r2, [r2, #10]
 8005320:	fbb3 f3f2 	udiv	r3, r3, r2
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <find_volume+0x2cc>
 800532c:	230d      	movs	r3, #13
 800532e:	e0dd      	b.n	80054ec <find_volume+0x484>
 8005330:	20000118 	.word	0x20000118
		fmt = FS_FAT32;
 8005334:	2303      	movs	r3, #3
 8005336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005340:	4293      	cmp	r3, r2
 8005342:	d802      	bhi.n	800534a <find_volume+0x2e2>
 8005344:	2302      	movs	r3, #2
 8005346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005350:	4293      	cmp	r3, r2
 8005352:	d802      	bhi.n	800535a <find_volume+0x2f2>
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005366:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005368:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536c:	441a      	add	r2, r3
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005372:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	441a      	add	r2, r3
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800537c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005380:	2b03      	cmp	r3, #3
 8005382:	d11e      	bne.n	80053c2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	3330      	adds	r3, #48	; 0x30
 8005388:	332a      	adds	r3, #42	; 0x2a
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fc56 	bl	8003c3c <ld_word>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <find_volume+0x332>
 8005396:	230d      	movs	r3, #13
 8005398:	e0a8      	b.n	80054ec <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	891b      	ldrh	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <find_volume+0x33e>
 80053a2:	230d      	movs	r3, #13
 80053a4:	e0a2      	b.n	80054ec <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	3330      	adds	r3, #48	; 0x30
 80053aa:	332c      	adds	r3, #44	; 0x2c
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fc5d 	bl	8003c6c <ld_dword>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	e01f      	b.n	8005402 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	891b      	ldrh	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <find_volume+0x366>
 80053ca:	230d      	movs	r3, #13
 80053cc:	e08e      	b.n	80054ec <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d4:	441a      	add	r2, r3
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80053da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d103      	bne.n	80053ea <find_volume+0x382>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	e00a      	b.n	8005400 <find_volume+0x398>
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	085a      	lsrs	r2, r3, #1
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	429a      	cmp	r2, r3
 8005410:	d201      	bcs.n	8005416 <find_volume+0x3ae>
 8005412:	230d      	movs	r3, #13
 8005414:	e06a      	b.n	80054ec <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	611a      	str	r2, [r3, #16]
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2280      	movs	r2, #128	; 0x80
 800542a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800542c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005430:	2b03      	cmp	r3, #3
 8005432:	d149      	bne.n	80054c8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	3330      	adds	r3, #48	; 0x30
 8005438:	3330      	adds	r3, #48	; 0x30
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fbfe 	bl	8003c3c <ld_word>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d140      	bne.n	80054c8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005448:	3301      	adds	r3, #1
 800544a:	4619      	mov	r1, r3
 800544c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800544e:	f7fe fea5 	bl	800419c <move_window>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d137      	bne.n	80054c8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	2200      	movs	r2, #0
 800545c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fbe8 	bl	8003c3c <ld_word>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005474:	429a      	cmp	r2, r3
 8005476:	d127      	bne.n	80054c8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	3330      	adds	r3, #48	; 0x30
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe fbf5 	bl	8003c6c <ld_dword>
 8005482:	4602      	mov	r2, r0
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <find_volume+0x48c>)
 8005486:	429a      	cmp	r2, r3
 8005488:	d11e      	bne.n	80054c8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	3330      	adds	r3, #48	; 0x30
 800548e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fbea 	bl	8003c6c <ld_dword>
 8005498:	4602      	mov	r2, r0
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <find_volume+0x490>)
 800549c:	429a      	cmp	r2, r3
 800549e:	d113      	bne.n	80054c8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	3330      	adds	r3, #48	; 0x30
 80054a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fbdf 	bl	8003c6c <ld_dword>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	3330      	adds	r3, #48	; 0x30
 80054b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fbd5 	bl	8003c6c <ld_dword>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80054ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <find_volume+0x494>)
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <find_volume+0x494>)
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <find_volume+0x494>)
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80054e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054e6:	f7fe fdf1 	bl	80040cc <clear_lock>
#endif
	return FR_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3758      	adds	r7, #88	; 0x58
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	41615252 	.word	0x41615252
 80054f8:	61417272 	.word	0x61417272
 80054fc:	2000011c 	.word	0x2000011c

08005500 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800550a:	2309      	movs	r3, #9
 800550c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01c      	beq.n	800554e <validate+0x4e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <validate+0x4e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <validate+0x4e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	889a      	ldrh	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	88db      	ldrh	r3, [r3, #6]
 8005530:	429a      	cmp	r2, r3
 8005532:	d10c      	bne.n	800554e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fae0 	bl	8003b00 <disk_status>
 8005540:	4603      	mov	r3, r0
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <validate+0x4e>
			res = FR_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <validate+0x5a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	e000      	b.n	800555c <validate+0x5c>
 800555a:	2300      	movs	r3, #0
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	6013      	str	r3, [r2, #0]
	return res;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800557e:	f107 0310 	add.w	r3, r7, #16
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fcd5 	bl	8004f32 <get_ldnumber>
 8005588:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	da01      	bge.n	8005594 <f_mount+0x28>
 8005590:	230b      	movs	r3, #11
 8005592:	e02b      	b.n	80055ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <f_mount+0x88>)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80055a4:	69b8      	ldr	r0, [r7, #24]
 80055a6:	f7fe fd91 	bl	80040cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	490d      	ldr	r1, [pc, #52]	; (80055f4 <f_mount+0x88>)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <f_mount+0x66>
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <f_mount+0x6a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	e00a      	b.n	80055ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80055d6:	f107 010c 	add.w	r1, r7, #12
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	2200      	movs	r2, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fd41 	bl	8005068 <find_volume>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000118 	.word	0x20000118

080055f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b098      	sub	sp, #96	; 0x60
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <f_open+0x18>
 800560c:	2309      	movs	r3, #9
 800560e:	e1ad      	b.n	800596c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005616:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005618:	79fa      	ldrb	r2, [r7, #7]
 800561a:	f107 0110 	add.w	r1, r7, #16
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fd20 	bl	8005068 <find_volume>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800562e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 8191 	bne.w	800595a <f_open+0x362>
		dj.obj.fs = fs;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	f107 0314 	add.w	r3, r7, #20
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fc03 	bl	8004e50 <follow_path>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11a      	bne.n	800568e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005658:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800565c:	b25b      	sxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	da03      	bge.n	800566a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005662:	2306      	movs	r3, #6
 8005664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005668:	e011      	b.n	800568e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fbda 	bl	8003e3c <chk_lock>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	f003 031c 	and.w	r3, r3, #28
 8005694:	2b00      	cmp	r3, #0
 8005696:	d07f      	beq.n	8005798 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80056a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d10e      	bne.n	80056c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80056a8:	f7fe fc24 	bl	8003ef4 <enq_lock>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d006      	beq.n	80056c0 <f_open+0xc8>
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fb03 	bl	8004cc2 <dir_register>
 80056bc:	4603      	mov	r3, r0
 80056be:	e000      	b.n	80056c2 <f_open+0xca>
 80056c0:	2312      	movs	r3, #18
 80056c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	f043 0308 	orr.w	r3, r3, #8
 80056cc:	71fb      	strb	r3, [r7, #7]
 80056ce:	e010      	b.n	80056f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80056d0:	7ebb      	ldrb	r3, [r7, #26]
 80056d2:	f003 0311 	and.w	r3, r3, #17
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <f_open+0xea>
					res = FR_DENIED;
 80056da:	2307      	movs	r3, #7
 80056dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056e0:	e007      	b.n	80056f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <f_open+0xfa>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80056f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d168      	bne.n	80057cc <f_open+0x1d4>
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d063      	beq.n	80057cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8005704:	f7fe f89e 	bl	8003844 <get_fattime>
 8005708:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	330e      	adds	r3, #14
 800570e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fae9 	bl	8003ce8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	3316      	adds	r3, #22
 800571a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fae3 	bl	8003ce8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	330b      	adds	r3, #11
 8005726:	2220      	movs	r2, #32
 8005728:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fa32 	bl	8004b9a <ld_clust>
 8005736:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800573c:	2200      	movs	r2, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fa4a 	bl	8004bd8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	331c      	adds	r3, #28
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe facc 	bl	8003ce8 <st_dword>
					fs->wflag = 1;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2201      	movs	r2, #1
 8005754:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d037      	beq.n	80057cc <f_open+0x1d4>
						dw = fs->winsect;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	2200      	movs	r2, #0
 8005768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe ff5d 	bl	800462a <remove_chain>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800577a:	2b00      	cmp	r3, #0
 800577c:	d126      	bne.n	80057cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fd0a 	bl	800419c <move_window>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005792:	3a01      	subs	r2, #1
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e019      	b.n	80057cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800579c:	2b00      	cmp	r3, #0
 800579e:	d115      	bne.n	80057cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80057a0:	7ebb      	ldrb	r3, [r7, #26]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80057aa:	2304      	movs	r3, #4
 80057ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057b0:	e00c      	b.n	80057cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <f_open+0x1d4>
 80057bc:	7ebb      	ldrb	r3, [r7, #26]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <f_open+0x1d4>
						res = FR_DENIED;
 80057c6:	2307      	movs	r3, #7
 80057c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80057cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d128      	bne.n	8005826 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80057ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fb93 	bl	8003f38 <inc_lock>
 8005812:	4602      	mov	r2, r0
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <f_open+0x22e>
 8005820:	2302      	movs	r3, #2
 8005822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8095 	bne.w	800595a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff f9af 	bl	8004b9a <ld_clust>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	331c      	adds	r3, #28
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fa10 	bl	8003c6c <ld_dword>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	88da      	ldrh	r2, [r3, #6]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	79fa      	ldrb	r2, [r7, #7]
 800586a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3330      	adds	r3, #48	; 0x30
 8005882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe fa7a 	bl	8003d82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d060      	beq.n	800595a <f_open+0x362>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05c      	beq.n	800595a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	895b      	ldrh	r3, [r3, #10]
 80058ac:	025b      	lsls	r3, r3, #9
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	657b      	str	r3, [r7, #84]	; 0x54
 80058bc:	e016      	b.n	80058ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fd25 	bl	8004312 <get_fat>
 80058c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80058ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d802      	bhi.n	80058d6 <f_open+0x2de>
 80058d0:	2302      	movs	r3, #2
 80058d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80058d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d102      	bne.n	80058e4 <f_open+0x2ec>
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80058e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	657b      	str	r3, [r7, #84]	; 0x54
 80058ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <f_open+0x304>
 80058f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d8e0      	bhi.n	80058be <f_open+0x2c6>
				}
				fp->clust = clst;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005900:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005906:	2b00      	cmp	r3, #0
 8005908:	d127      	bne.n	800595a <f_open+0x362>
 800590a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fcdb 	bl	80042d4 <clust2sect>
 800591e:	6478      	str	r0, [r7, #68]	; 0x44
 8005920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <f_open+0x336>
						res = FR_INT_ERR;
 8005926:	2302      	movs	r3, #2
 8005928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800592c:	e015      	b.n	800595a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800592e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005930:	0a5a      	lsrs	r2, r3, #9
 8005932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	7858      	ldrb	r0, [r3, #1]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	2301      	movs	r3, #1
 800594a:	f7fe f919 	bl	8003b80 <disk_read>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <f_open+0x362>
 8005954:	2301      	movs	r3, #1
 8005956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800595a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <f_open+0x370>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800596c:	4618      	mov	r0, r3
 800596e:	3760      	adds	r7, #96	; 0x60
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f107 0214 	add.w	r2, r7, #20
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fdb3 	bl	8005500 <validate>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80059a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <f_read+0x44>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	7d5b      	ldrb	r3, [r3, #21]
 80059ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80059b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <f_read+0x4a>
 80059b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059bc:	e115      	b.n	8005bea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	7d1b      	ldrb	r3, [r3, #20]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <f_read+0x5a>
 80059ca:	2307      	movs	r3, #7
 80059cc:	e10d      	b.n	8005bea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	429a      	cmp	r2, r3
 80059e0:	f240 80fe 	bls.w	8005be0 <f_read+0x26c>
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80059e8:	e0fa      	b.n	8005be0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80c6 	bne.w	8005b84 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	0a5b      	lsrs	r3, r3, #9
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	8952      	ldrh	r2, [r2, #10]
 8005a02:	3a01      	subs	r2, #1
 8005a04:	4013      	ands	r3, r2
 8005a06:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d12f      	bne.n	8005a6e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1c:	e013      	b.n	8005a46 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7fe fef9 	bl	8004824 <clmt_clust>
 8005a32:	6338      	str	r0, [r7, #48]	; 0x30
 8005a34:	e007      	b.n	8005a46 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fe fc67 	bl	8004312 <get_fat>
 8005a44:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d804      	bhi.n	8005a56 <f_read+0xe2>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	755a      	strb	r2, [r3, #21]
 8005a52:	2302      	movs	r3, #2
 8005a54:	e0c9      	b.n	8005bea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d104      	bne.n	8005a68 <f_read+0xf4>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	755a      	strb	r2, [r3, #21]
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0c0      	b.n	8005bea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fe fc2c 	bl	80042d4 <clust2sect>
 8005a7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <f_read+0x11a>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2202      	movs	r2, #2
 8005a88:	755a      	strb	r2, [r3, #21]
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0ad      	b.n	8005bea <f_read+0x276>
			sect += csect;
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0a5b      	lsrs	r3, r3, #9
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d039      	beq.n	8005b16 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	4413      	add	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	8952      	ldrh	r2, [r2, #10]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d905      	bls.n	8005abc <f_read+0x148>
					cc = fs->csize - csect;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	895b      	ldrh	r3, [r3, #10]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	7858      	ldrb	r0, [r3, #1]
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac6:	f7fe f85b 	bl	8003b80 <disk_read>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <f_read+0x166>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	755a      	strb	r2, [r3, #21]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e087      	b.n	8005bea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	7d1b      	ldrb	r3, [r3, #20]
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da14      	bge.n	8005b0e <f_read+0x19a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d90d      	bls.n	8005b0e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	025b      	lsls	r3, r3, #9
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	18d0      	adds	r0, r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3330      	adds	r3, #48	; 0x30
 8005b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f7fe f919 	bl	8003d40 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	025b      	lsls	r3, r3, #9
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005b14:	e050      	b.n	8005bb8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d02e      	beq.n	8005b7e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	7d1b      	ldrb	r3, [r3, #20]
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da18      	bge.n	8005b5c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	7858      	ldrb	r0, [r3, #1]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f7fe f841 	bl	8003bc0 <disk_write>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <f_read+0x1da>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	755a      	strb	r2, [r3, #21]
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e04d      	b.n	8005bea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	7d1b      	ldrb	r3, [r3, #20]
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	7858      	ldrb	r0, [r3, #1]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b66:	2301      	movs	r3, #1
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	f7fe f809 	bl	8003b80 <disk_read>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <f_read+0x20a>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	755a      	strb	r2, [r3, #21]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e035      	b.n	8005bea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d901      	bls.n	8005b9e <f_read+0x22a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bac:	4413      	add	r3, r2
 8005bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb4:	f7fe f8c4 	bl	8003d40 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	4413      	add	r3, r2
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	441a      	add	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	619a      	str	r2, [r3, #24]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	441a      	add	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f47f af01 	bne.w	80059ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3738      	adds	r7, #56	; 0x38
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b08c      	sub	sp, #48	; 0x30
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f107 0210 	add.w	r2, r7, #16
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff fc74 	bl	8005500 <validate>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <f_write+0x44>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	7d5b      	ldrb	r3, [r3, #21]
 8005c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <f_write+0x4a>
 8005c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c3a:	e14b      	b.n	8005ed4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7d1b      	ldrb	r3, [r3, #20]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <f_write+0x5a>
 8005c48:	2307      	movs	r3, #7
 8005c4a:	e143      	b.n	8005ed4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	441a      	add	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	f080 812d 	bcs.w	8005eb8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005c66:	e127      	b.n	8005eb8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 80e3 	bne.w	8005e3c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	0a5b      	lsrs	r3, r3, #9
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	8952      	ldrh	r2, [r2, #10]
 8005c80:	3a01      	subs	r2, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d143      	bne.n	8005d14 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10c      	bne.n	8005cae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11a      	bne.n	8005cd6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fd25 	bl	80046f4 <create_chain>
 8005caa:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cac:	e013      	b.n	8005cd6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f7fe fdb1 	bl	8004824 <clmt_clust>
 8005cc2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cc4:	e007      	b.n	8005cd6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fd10 	bl	80046f4 <create_chain>
 8005cd4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80f2 	beq.w	8005ec2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d104      	bne.n	8005cee <f_write+0xfc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	755a      	strb	r2, [r3, #21]
 8005cea:	2302      	movs	r3, #2
 8005cec:	e0f2      	b.n	8005ed4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d104      	bne.n	8005d00 <f_write+0x10e>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	755a      	strb	r2, [r3, #21]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0e9      	b.n	8005ed4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <f_write+0x122>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	7d1b      	ldrb	r3, [r3, #20]
 8005d18:	b25b      	sxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da18      	bge.n	8005d50 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	7858      	ldrb	r0, [r3, #1]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f7fd ff47 	bl	8003bc0 <disk_write>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <f_write+0x150>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	755a      	strb	r2, [r3, #21]
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0c8      	b.n	8005ed4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	7d1b      	ldrb	r3, [r3, #20]
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe fabb 	bl	80042d4 <clust2sect>
 8005d5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <f_write+0x17e>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	755a      	strb	r2, [r3, #21]
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0b1      	b.n	8005ed4 <f_write+0x2e2>
			sect += csect;
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4413      	add	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0a5b      	lsrs	r3, r3, #9
 8005d7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d03c      	beq.n	8005dfe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	4413      	add	r3, r2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	8952      	ldrh	r2, [r2, #10]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d905      	bls.n	8005d9e <f_write+0x1ac>
					cc = fs->csize - csect;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	895b      	ldrh	r3, [r3, #10]
 8005d96:	461a      	mov	r2, r3
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	7858      	ldrb	r0, [r3, #1]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	69f9      	ldr	r1, [r7, #28]
 8005da8:	f7fd ff0a 	bl	8003bc0 <disk_write>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <f_write+0x1ca>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	755a      	strb	r2, [r3, #21]
 8005db8:	2301      	movs	r3, #1
 8005dba:	e08b      	b.n	8005ed4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d915      	bls.n	8005df6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	025b      	lsls	r3, r3, #9
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de2:	4619      	mov	r1, r3
 8005de4:	f7fd ffac 	bl	8003d40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	7d1b      	ldrb	r3, [r3, #20]
 8005dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	025b      	lsls	r3, r3, #9
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005dfc:	e03f      	b.n	8005e7e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d016      	beq.n	8005e36 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d210      	bcs.n	8005e36 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	7858      	ldrb	r0, [r3, #1]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e1e:	2301      	movs	r3, #1
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	f7fd fead 	bl	8003b80 <disk_read>
 8005e26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	755a      	strb	r2, [r3, #21]
 8005e32:	2301      	movs	r3, #1
 8005e34:	e04e      	b.n	8005ed4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d901      	bls.n	8005e56 <f_write+0x264>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	4413      	add	r3, r2
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd ff68 	bl	8003d40 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	7d1b      	ldrb	r3, [r3, #20]
 8005e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	4413      	add	r3, r2
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf38      	it	cc
 8005e9e:	461a      	movcc	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	60da      	str	r2, [r3, #12]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	441a      	add	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f aed4 	bne.w	8005c68 <f_write+0x76>
 8005ec0:	e000      	b.n	8005ec4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ec2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	7d1b      	ldrb	r3, [r3, #20]
 8005ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3730      	adds	r7, #48	; 0x30
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f107 0208 	add.w	r2, r7, #8
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fb07 	bl	8005500 <validate>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d168      	bne.n	8005fce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7d1b      	ldrb	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d062      	beq.n	8005fce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7d1b      	ldrb	r3, [r3, #20]
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da15      	bge.n	8005f3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	7858      	ldrb	r0, [r3, #1]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	2301      	movs	r3, #1
 8005f22:	f7fd fe4d 	bl	8003bc0 <disk_write>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <f_sync+0x54>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e04f      	b.n	8005fd0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7d1b      	ldrb	r3, [r3, #20]
 8005f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005f3e:	f7fd fc81 	bl	8003844 <get_fattime>
 8005f42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f7fe f925 	bl	800419c <move_window>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d138      	bne.n	8005fce <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	330b      	adds	r3, #11
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	330b      	adds	r3, #11
 8005f6c:	f042 0220 	orr.w	r2, r2, #32
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f7fe fe2a 	bl	8004bd8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f103 021c 	add.w	r2, r3, #28
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7fd fea9 	bl	8003ce8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3316      	adds	r3, #22
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fd fea3 	bl	8003ce8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3312      	adds	r3, #18
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd fe82 	bl	8003cb2 <st_word>
					fs->wflag = 1;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe f91e 	bl	80041f8 <sync_fs>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7d1b      	ldrb	r3, [r3, #20]
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff7b 	bl	8005edc <f_sync>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d118      	bne.n	8006022 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f107 0208 	add.w	r2, r7, #8
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fa81 	bl	8005500 <validate>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10c      	bne.n	8006022 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4618      	mov	r0, r3
 800600e:	f7fe f821 	bl	8004054 <dec_lock>
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b09d      	sub	sp, #116	; 0x74
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	460b      	mov	r3, r1
 800603a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800603c:	2301      	movs	r3, #1
 800603e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006044:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006046:	f107 030c 	add.w	r3, r7, #12
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe ff71 	bl	8004f32 <get_ldnumber>
 8006050:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	da02      	bge.n	800605e <f_mkfs+0x32>
 8006058:	230b      	movs	r3, #11
 800605a:	f000 bc0d 	b.w	8006878 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800605e:	4a94      	ldr	r2, [pc, #592]	; (80062b0 <f_mkfs+0x284>)
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <f_mkfs+0x4a>
 800606a:	4a91      	ldr	r2, [pc, #580]	; (80062b0 <f_mkfs+0x284>)
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800607c:	2300      	movs	r3, #0
 800607e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8006082:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006086:	4618      	mov	r0, r3
 8006088:	f7fd fd54 	bl	8003b34 <disk_initialize>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8006092:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <f_mkfs+0x76>
 800609e:	2303      	movs	r3, #3
 80060a0:	e3ea      	b.n	8006878 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80060a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <f_mkfs+0x86>
 80060ae:	230a      	movs	r3, #10
 80060b0:	e3e2      	b.n	8006878 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80060b2:	f107 0214 	add.w	r2, r7, #20
 80060b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060ba:	2103      	movs	r1, #3
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fd9f 	bl	8003c00 <disk_ioctl>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10c      	bne.n	80060e2 <f_mkfs+0xb6>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <f_mkfs+0xb6>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	d805      	bhi.n	80060e2 <f_mkfs+0xb6>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <f_mkfs+0xba>
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80060e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ea:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <f_mkfs+0xce>
 80060f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d309      	bcc.n	800610e <f_mkfs+0xe2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006100:	d805      	bhi.n	800610e <f_mkfs+0xe2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <f_mkfs+0xe6>
 800610e:	2313      	movs	r3, #19
 8006110:	e3b2      	b.n	8006878 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8006112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006120:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800612c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	fb02 f303 	mul.w	r3, r2, r3
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <f_mkfs+0x114>
 800613c:	230e      	movs	r3, #14
 800613e:	e39b      	b.n	8006878 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006140:	f107 0210 	add.w	r2, r7, #16
 8006144:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006148:	2101      	movs	r1, #1
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd fd58 	bl	8003c00 <disk_ioctl>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <f_mkfs+0x12e>
 8006156:	2301      	movs	r3, #1
 8006158:	e38e      	b.n	8006878 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <f_mkfs+0x13c>
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <f_mkfs+0x13e>
 8006168:	233f      	movs	r3, #63	; 0x3f
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006170:	429a      	cmp	r2, r3
 8006172:	d901      	bls.n	8006178 <f_mkfs+0x14c>
 8006174:	230e      	movs	r3, #14
 8006176:	e37f      	b.n	8006878 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d801      	bhi.n	800618a <f_mkfs+0x15e>
 8006186:	230e      	movs	r3, #14
 8006188:	e376      	b.n	8006878 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d901      	bls.n	8006194 <f_mkfs+0x168>
 8006190:	2313      	movs	r3, #19
 8006192:	e371      	b.n	8006878 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d004      	beq.n	80061b2 <f_mkfs+0x186>
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80061b2:	2303      	movs	r3, #3
 80061b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80061b8:	e009      	b.n	80061ce <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <f_mkfs+0x19c>
 80061c4:	2313      	movs	r3, #19
 80061c6:	e357      	b.n	8006878 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80061d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d13c      	bne.n	8006254 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11b      	bne.n	8006218 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	0c5b      	lsrs	r3, r3, #17
 80061e4:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80061e6:	2300      	movs	r3, #0
 80061e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ea:	2301      	movs	r3, #1
 80061ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ee:	e005      	b.n	80061fc <f_mkfs+0x1d0>
 80061f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f2:	3301      	adds	r3, #1
 80061f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061fc:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <f_mkfs+0x288>)
 80061fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <f_mkfs+0x1ec>
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <f_mkfs+0x288>)
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006210:	461a      	mov	r2, r3
 8006212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006214:	4293      	cmp	r3, r2
 8006216:	d2eb      	bcs.n	80061f0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	3302      	adds	r3, #2
 8006226:	009a      	lsls	r2, r3, #2
 8006228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800622a:	4413      	add	r3, r2
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8006236:	2320      	movs	r3, #32
 8006238:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800623a:	2300      	movs	r3, #0
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006244:	4293      	cmp	r3, r2
 8006246:	d903      	bls.n	8006250 <f_mkfs+0x224>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <f_mkfs+0x28c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d952      	bls.n	80062f6 <f_mkfs+0x2ca>
 8006250:	230e      	movs	r3, #14
 8006252:	e311      	b.n	8006878 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8006254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11b      	bne.n	8006292 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	0b1b      	lsrs	r3, r3, #12
 800625e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006260:	2300      	movs	r3, #0
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
 8006264:	2301      	movs	r3, #1
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006268:	e005      	b.n	8006276 <f_mkfs+0x24a>
 800626a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626c:	3301      	adds	r3, #1
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006276:	4a11      	ldr	r2, [pc, #68]	; (80062bc <f_mkfs+0x290>)
 8006278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <f_mkfs+0x266>
 8006282:	4a0e      	ldr	r2, [pc, #56]	; (80062bc <f_mkfs+0x290>)
 8006284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628a:	461a      	mov	r2, r3
 800628c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628e:	4293      	cmp	r3, r2
 8006290:	d2eb      	bcs.n	800626a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d90c      	bls.n	80062c0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	3302      	adds	r3, #2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	663b      	str	r3, [r7, #96]	; 0x60
 80062ae:	e012      	b.n	80062d6 <f_mkfs+0x2aa>
 80062b0:	20000118 	.word	0x20000118
 80062b4:	08006d24 	.word	0x08006d24
 80062b8:	0ffffff5 	.word	0x0ffffff5
 80062bc:	08006d34 	.word	0x08006d34
				} else {
					fmt = FS_FAT12;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80062c6:	6a3a      	ldr	r2, [r7, #32]
 80062c8:	4613      	mov	r3, r2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	4413      	add	r3, r2
 80062ce:	3301      	adds	r3, #1
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	3303      	adds	r3, #3
 80062d4:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80062d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062da:	4413      	add	r3, r2
 80062dc:	1e5a      	subs	r2, r3, #1
 80062de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 80062e6:	2301      	movs	r3, #1
 80062e8:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80062ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80062f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062fa:	4413      	add	r3, r2
 80062fc:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80062fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006302:	fb02 f203 	mul.w	r2, r2, r3
 8006306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006308:	4413      	add	r3, r2
 800630a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800630c:	4413      	add	r3, r2
 800630e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	1e5a      	subs	r2, r3, #1
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	425b      	negs	r3, r3
 800631c:	401a      	ands	r2, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006328:	2b03      	cmp	r3, #3
 800632a:	d108      	bne.n	800633e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800632c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800632e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006330:	4413      	add	r3, r2
 8006332:	65bb      	str	r3, [r7, #88]	; 0x58
 8006334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006338:	4413      	add	r3, r2
 800633a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633c:	e006      	b.n	800634c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800633e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006348:	4413      	add	r3, r2
 800634a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800634c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634e:	011a      	lsls	r2, r3, #4
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	441a      	add	r2, r3
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	429a      	cmp	r2, r3
 800635c:	d901      	bls.n	8006362 <f_mkfs+0x336>
 800635e:	230e      	movs	r3, #14
 8006360:	e28a      	b.n	8006878 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800637e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006382:	2b03      	cmp	r3, #3
 8006384:	d10f      	bne.n	80063a6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800638c:	4293      	cmp	r3, r2
 800638e:	d80a      	bhi.n	80063a6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d105      	bne.n	80063a2 <f_mkfs+0x376>
 8006396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d144      	bne.n	800642c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80063a2:	230e      	movs	r3, #14
 80063a4:	e268      	b.n	8006878 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80063a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d133      	bne.n	8006416 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d91e      	bls.n	80063f6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d107      	bne.n	80063ce <f_mkfs+0x3a2>
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	2b40      	cmp	r3, #64	; 0x40
 80063c4:	d803      	bhi.n	80063ce <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80063c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e033      	b.n	8006436 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80063d8:	2303      	movs	r3, #3
 80063da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063de:	e02a      	b.n	8006436 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d105      	bne.n	80063f2 <f_mkfs+0x3c6>
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b80      	cmp	r3, #128	; 0x80
 80063f0:	d91e      	bls.n	8006430 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80063f2:	230e      	movs	r3, #14
 80063f4:	e240      	b.n	8006878 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d80a      	bhi.n	8006416 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <f_mkfs+0x3e6>
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b80      	cmp	r3, #128	; 0x80
 8006410:	d910      	bls.n	8006434 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8006412:	230e      	movs	r3, #14
 8006414:	e230      	b.n	8006878 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006416:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800641a:	2b01      	cmp	r3, #1
 800641c:	d10c      	bne.n	8006438 <f_mkfs+0x40c>
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006424:	4293      	cmp	r3, r2
 8006426:	d907      	bls.n	8006438 <f_mkfs+0x40c>
 8006428:	230e      	movs	r3, #14
 800642a:	e225      	b.n	8006878 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800642c:	bf00      	nop
 800642e:	e6ce      	b.n	80061ce <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006430:	bf00      	nop
 8006432:	e6cc      	b.n	80061ce <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006434:	bf00      	nop
			pau = au;
 8006436:	e6ca      	b.n	80061ce <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8006438:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800643a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800643c:	461a      	mov	r2, r3
 800643e:	2100      	movs	r1, #0
 8006440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006442:	f7fd fc9e 	bl	8003d82 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8006446:	220b      	movs	r2, #11
 8006448:	49bc      	ldr	r1, [pc, #752]	; (800673c <f_mkfs+0x710>)
 800644a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800644c:	f7fd fc78 	bl	8003d40 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	330b      	adds	r3, #11
 8006454:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f7fd fc2a 	bl	8003cb2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	330d      	adds	r3, #13
 8006462:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	330e      	adds	r3, #14
 800646c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800646e:	b292      	uxth	r2, r2
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd fc1d 	bl	8003cb2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	3310      	adds	r3, #16
 800647c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f103 0211 	add.w	r2, r3, #17
 8006488:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800648c:	2b03      	cmp	r3, #3
 800648e:	d002      	beq.n	8006496 <f_mkfs+0x46a>
 8006490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006492:	b29b      	uxth	r3, r3
 8006494:	e000      	b.n	8006498 <f_mkfs+0x46c>
 8006496:	2300      	movs	r3, #0
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f7fd fc09 	bl	8003cb2 <st_word>
		if (sz_vol < 0x10000) {
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a6:	d208      	bcs.n	80064ba <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	3313      	adds	r3, #19
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	b292      	uxth	r2, r2
 80064b0:	4611      	mov	r1, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fbfd 	bl	8003cb2 <st_word>
 80064b8:	e006      	b.n	80064c8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	3320      	adds	r3, #32
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4611      	mov	r1, r2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd fc10 	bl	8003ce8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	3315      	adds	r3, #21
 80064cc:	22f8      	movs	r2, #248	; 0xf8
 80064ce:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	3318      	adds	r3, #24
 80064d4:	213f      	movs	r1, #63	; 0x3f
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fd fbeb 	bl	8003cb2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	331a      	adds	r3, #26
 80064e0:	21ff      	movs	r1, #255	; 0xff
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fbe5 	bl	8003cb2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	331c      	adds	r3, #28
 80064ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fbfa 	bl	8003ce8 <st_dword>
		if (fmt == FS_FAT32) {
 80064f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d131      	bne.n	8006560 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8006502:	f7fd f99f 	bl	8003844 <get_fattime>
 8006506:	4603      	mov	r3, r0
 8006508:	4619      	mov	r1, r3
 800650a:	4620      	mov	r0, r4
 800650c:	f7fd fbec 	bl	8003ce8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006516:	4618      	mov	r0, r3
 8006518:	f7fd fbe6 	bl	8003ce8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	332c      	adds	r3, #44	; 0x2c
 8006520:	2102      	movs	r1, #2
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fbe0 	bl	8003ce8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	3330      	adds	r3, #48	; 0x30
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f7fd fbbf 	bl	8003cb2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	3332      	adds	r3, #50	; 0x32
 8006538:	2106      	movs	r1, #6
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fbb9 	bl	8003cb2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	3340      	adds	r3, #64	; 0x40
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	3342      	adds	r3, #66	; 0x42
 800654c:	2229      	movs	r2, #41	; 0x29
 800654e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	3347      	adds	r3, #71	; 0x47
 8006554:	2213      	movs	r2, #19
 8006556:	497a      	ldr	r1, [pc, #488]	; (8006740 <f_mkfs+0x714>)
 8006558:	4618      	mov	r0, r3
 800655a:	f7fd fbf1 	bl	8003d40 <mem_cpy>
 800655e:	e020      	b.n	80065a2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8006566:	f7fd f96d 	bl	8003844 <get_fattime>
 800656a:	4603      	mov	r3, r0
 800656c:	4619      	mov	r1, r3
 800656e:	4620      	mov	r0, r4
 8006570:	f7fd fbba 	bl	8003ce8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	3316      	adds	r3, #22
 8006578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800657a:	b292      	uxth	r2, r2
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fb97 	bl	8003cb2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	3324      	adds	r3, #36	; 0x24
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	3326      	adds	r3, #38	; 0x26
 8006590:	2229      	movs	r2, #41	; 0x29
 8006592:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	332b      	adds	r3, #43	; 0x2b
 8006598:	2213      	movs	r2, #19
 800659a:	496a      	ldr	r1, [pc, #424]	; (8006744 <f_mkfs+0x718>)
 800659c:	4618      	mov	r0, r3
 800659e:	f7fd fbcf 	bl	8003d40 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fd fb80 	bl	8003cb2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80065b2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80065b6:	2301      	movs	r3, #1
 80065b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065bc:	f7fd fb00 	bl	8003bc0 <disk_write>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <f_mkfs+0x59e>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e156      	b.n	8006878 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80065ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d140      	bne.n	8006654 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	1d9a      	adds	r2, r3, #6
 80065d6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80065da:	2301      	movs	r3, #1
 80065dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065de:	f7fd faef 	bl	8003bc0 <disk_write>
			mem_set(buf, 0, ss);
 80065e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065e4:	461a      	mov	r2, r3
 80065e6:	2100      	movs	r1, #0
 80065e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ea:	f7fd fbca 	bl	8003d82 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80065ee:	4956      	ldr	r1, [pc, #344]	; (8006748 <f_mkfs+0x71c>)
 80065f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f2:	f7fd fb79 	bl	8003ce8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065fc:	4953      	ldr	r1, [pc, #332]	; (800674c <f_mkfs+0x720>)
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd fb72 	bl	8003ce8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	3b01      	subs	r3, #1
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fd fb69 	bl	8003ce8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800661c:	2102      	movs	r1, #2
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fb62 	bl	8003ce8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800662a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800662e:	4618      	mov	r0, r3
 8006630:	f7fd fb3f 	bl	8003cb2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	1dda      	adds	r2, r3, #7
 8006638:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800663c:	2301      	movs	r3, #1
 800663e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006640:	f7fd fabe 	bl	8003bc0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800664c:	2301      	movs	r3, #1
 800664e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006650:	f7fd fab6 	bl	8003bc0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8006654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006656:	2100      	movs	r1, #0
 8006658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800665a:	f7fd fb92 	bl	8003d82 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006662:	2300      	movs	r3, #0
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	e04b      	b.n	8006700 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8006668:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800666c:	2b03      	cmp	r3, #3
 800666e:	d113      	bne.n	8006698 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8006670:	f06f 0107 	mvn.w	r1, #7
 8006674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006676:	f7fd fb37 	bl	8003ce8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	3304      	adds	r3, #4
 800667e:	f04f 31ff 	mov.w	r1, #4294967295
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fb30 	bl	8003ce8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	3308      	adds	r3, #8
 800668c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006690:	4618      	mov	r0, r3
 8006692:	f7fd fb29 	bl	8003ce8 <st_dword>
 8006696:	e00b      	b.n	80066b0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8006698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <f_mkfs+0x678>
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <f_mkfs+0x724>)
 80066a2:	e001      	b.n	80066a8 <f_mkfs+0x67c>
 80066a4:	f06f 0307 	mvn.w	r3, #7
 80066a8:	4619      	mov	r1, r3
 80066aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ac:	f7fd fb1c 	bl	8003ce8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80066b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b2:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80066b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	4293      	cmp	r3, r2
 80066ba:	bf28      	it	cs
 80066bc:	4613      	movcs	r3, r2
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80066c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80066c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ca:	f7fd fa79 	bl	8003bc0 <disk_write>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <f_mkfs+0x6ac>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0cf      	b.n	8006878 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80066d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066da:	461a      	mov	r2, r3
 80066dc:	2100      	movs	r1, #0
 80066de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e0:	f7fd fb4f 	bl	8003d82 <mem_set>
				sect += n; nsect -= n;
 80066e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e8:	4413      	add	r3, r2
 80066ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1dc      	bne.n	80066b4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80066fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fc:	3301      	adds	r3, #1
 80066fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006704:	429a      	cmp	r2, r3
 8006706:	d3af      	bcc.n	8006668 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8006708:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800670c:	2b03      	cmp	r3, #3
 800670e:	d101      	bne.n	8006714 <f_mkfs+0x6e8>
 8006710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006712:	e000      	b.n	8006716 <f_mkfs+0x6ea>
 8006714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006716:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	4293      	cmp	r3, r2
 800671e:	bf28      	it	cs
 8006720:	4613      	movcs	r3, r2
 8006722:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8006724:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800672a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800672c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800672e:	f7fd fa47 	bl	8003bc0 <disk_write>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00d      	beq.n	8006754 <f_mkfs+0x728>
 8006738:	2301      	movs	r3, #1
 800673a:	e09d      	b.n	8006878 <f_mkfs+0x84c>
 800673c:	08006bd4 	.word	0x08006bd4
 8006740:	08006be0 	.word	0x08006be0
 8006744:	08006bf4 	.word	0x08006bf4
 8006748:	41615252 	.word	0x41615252
 800674c:	61417272 	.word	0x61417272
 8006750:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8006754:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006758:	4413      	add	r3, r2
 800675a:	66bb      	str	r3, [r7, #104]	; 0x68
 800675c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800675e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8006764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1d6      	bne.n	8006718 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800676a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800676e:	2b03      	cmp	r3, #3
 8006770:	d103      	bne.n	800677a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8006772:	230c      	movs	r3, #12
 8006774:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006778:	e010      	b.n	800679c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d303      	bcc.n	800678a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8006782:	2306      	movs	r3, #6
 8006784:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006788:	e008      	b.n	800679c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800678a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800678e:	2b02      	cmp	r3, #2
 8006790:	d101      	bne.n	8006796 <f_mkfs+0x76a>
 8006792:	2304      	movs	r3, #4
 8006794:	e000      	b.n	8006798 <f_mkfs+0x76c>
 8006796:	2301      	movs	r3, #1
 8006798:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d15b      	bne.n	800685e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80067a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067a8:	461a      	mov	r2, r3
 80067aa:	2100      	movs	r1, #0
 80067ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ae:	f7fd fae8 	bl	8003d82 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fd fa78 	bl	8003cb2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067c8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	3301      	adds	r3, #1
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3302      	adds	r3, #2
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	3303      	adds	r3, #3
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	3304      	adds	r3, #4
 80067ec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80067f0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	441a      	add	r2, r3
 80067f8:	4b21      	ldr	r3, [pc, #132]	; (8006880 <f_mkfs+0x854>)
 80067fa:	fba3 1302 	umull	r1, r3, r3, r2
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	0852      	lsrs	r2, r2, #1
 8006802:	4413      	add	r3, r2
 8006804:	0b5b      	lsrs	r3, r3, #13
 8006806:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	3305      	adds	r3, #5
 800680c:	22fe      	movs	r2, #254	; 0xfe
 800680e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8006810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006812:	089b      	lsrs	r3, r3, #2
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	3306      	adds	r3, #6
 800681a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	3307      	adds	r3, #7
 8006826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	3308      	adds	r3, #8
 8006830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd fa58 	bl	8003ce8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	330c      	adds	r3, #12
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7fd fa51 	bl	8003ce8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006846:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800684a:	2301      	movs	r3, #1
 800684c:	2200      	movs	r2, #0
 800684e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006850:	f7fd f9b6 	bl	8003bc0 <disk_write>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <f_mkfs+0x832>
 800685a:	2301      	movs	r3, #1
 800685c:	e00c      	b.n	8006878 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800685e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006862:	2200      	movs	r2, #0
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd f9ca 	bl	8003c00 <disk_ioctl>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <f_mkfs+0x84a>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <f_mkfs+0x84c>

	return FR_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3774      	adds	r7, #116	; 0x74
 800687c:	46bd      	mov	sp, r7
 800687e:	bd90      	pop	{r4, r7, pc}
 8006880:	0515565b 	.word	0x0515565b

08006884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800689a:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 800689c:	7a5b      	ldrb	r3, [r3, #9]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d131      	bne.n	8006908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068a6:	7a5b      	ldrb	r3, [r3, #9]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068b4:	7a5b      	ldrb	r3, [r3, #9]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4a17      	ldr	r2, [pc, #92]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068c4:	7a5b      	ldrb	r3, [r3, #9]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068cc:	4413      	add	r3, r2
 80068ce:	79fa      	ldrb	r2, [r7, #7]
 80068d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	b2d1      	uxtb	r1, r2
 80068dc:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <FATFS_LinkDriverEx+0x94>)
 80068de:	7251      	strb	r1, [r2, #9]
 80068e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80068e2:	7dbb      	ldrb	r3, [r7, #22]
 80068e4:	3330      	adds	r3, #48	; 0x30
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	3301      	adds	r3, #1
 80068f0:	223a      	movs	r2, #58	; 0x3a
 80068f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3302      	adds	r3, #2
 80068f8:	222f      	movs	r2, #47	; 0x2f
 80068fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	3303      	adds	r3, #3
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
}
 800690a:	4618      	mov	r0, r3
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000140 	.word	0x20000140

0800691c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006926:	2200      	movs	r2, #0
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ffaa 	bl	8006884 <FATFS_LinkDriverEx>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <__errno>:
 800693c:	4b01      	ldr	r3, [pc, #4]	; (8006944 <__errno+0x8>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000024 	.word	0x20000024

08006948 <__libc_init_array>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	4e0d      	ldr	r6, [pc, #52]	; (8006980 <__libc_init_array+0x38>)
 800694c:	4c0d      	ldr	r4, [pc, #52]	; (8006984 <__libc_init_array+0x3c>)
 800694e:	1ba4      	subs	r4, r4, r6
 8006950:	10a4      	asrs	r4, r4, #2
 8006952:	2500      	movs	r5, #0
 8006954:	42a5      	cmp	r5, r4
 8006956:	d109      	bne.n	800696c <__libc_init_array+0x24>
 8006958:	4e0b      	ldr	r6, [pc, #44]	; (8006988 <__libc_init_array+0x40>)
 800695a:	4c0c      	ldr	r4, [pc, #48]	; (800698c <__libc_init_array+0x44>)
 800695c:	f000 f8ea 	bl	8006b34 <_init>
 8006960:	1ba4      	subs	r4, r4, r6
 8006962:	10a4      	asrs	r4, r4, #2
 8006964:	2500      	movs	r5, #0
 8006966:	42a5      	cmp	r5, r4
 8006968:	d105      	bne.n	8006976 <__libc_init_array+0x2e>
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006970:	4798      	blx	r3
 8006972:	3501      	adds	r5, #1
 8006974:	e7ee      	b.n	8006954 <__libc_init_array+0xc>
 8006976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800697a:	4798      	blx	r3
 800697c:	3501      	adds	r5, #1
 800697e:	e7f2      	b.n	8006966 <__libc_init_array+0x1e>
 8006980:	08006d44 	.word	0x08006d44
 8006984:	08006d44 	.word	0x08006d44
 8006988:	08006d44 	.word	0x08006d44
 800698c:	08006d48 	.word	0x08006d48

08006990 <malloc>:
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <malloc+0xc>)
 8006992:	4601      	mov	r1, r0
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f000 b861 	b.w	8006a5c <_malloc_r>
 800699a:	bf00      	nop
 800699c:	20000024 	.word	0x20000024

080069a0 <free>:
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <free+0xc>)
 80069a2:	4601      	mov	r1, r0
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	f000 b80b 	b.w	80069c0 <_free_r>
 80069aa:	bf00      	nop
 80069ac:	20000024 	.word	0x20000024

080069b0 <memset>:
 80069b0:	4402      	add	r2, r0
 80069b2:	4603      	mov	r3, r0
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d100      	bne.n	80069ba <memset+0xa>
 80069b8:	4770      	bx	lr
 80069ba:	f803 1b01 	strb.w	r1, [r3], #1
 80069be:	e7f9      	b.n	80069b4 <memset+0x4>

080069c0 <_free_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4605      	mov	r5, r0
 80069c4:	2900      	cmp	r1, #0
 80069c6:	d045      	beq.n	8006a54 <_free_r+0x94>
 80069c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069cc:	1f0c      	subs	r4, r1, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	18e4      	addlt	r4, r4, r3
 80069d4:	f000 f8ac 	bl	8006b30 <__malloc_lock>
 80069d8:	4a1f      	ldr	r2, [pc, #124]	; (8006a58 <_free_r+0x98>)
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	4610      	mov	r0, r2
 80069de:	b933      	cbnz	r3, 80069ee <_free_r+0x2e>
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	6014      	str	r4, [r2, #0]
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ea:	f000 b8a2 	b.w	8006b32 <__malloc_unlock>
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	d90c      	bls.n	8006a0c <_free_r+0x4c>
 80069f2:	6821      	ldr	r1, [r4, #0]
 80069f4:	1862      	adds	r2, r4, r1
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bf04      	itt	eq
 80069fa:	681a      	ldreq	r2, [r3, #0]
 80069fc:	685b      	ldreq	r3, [r3, #4]
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	bf04      	itt	eq
 8006a02:	1852      	addeq	r2, r2, r1
 8006a04:	6022      	streq	r2, [r4, #0]
 8006a06:	6004      	str	r4, [r0, #0]
 8006a08:	e7ec      	b.n	80069e4 <_free_r+0x24>
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	b10a      	cbz	r2, 8006a14 <_free_r+0x54>
 8006a10:	42a2      	cmp	r2, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x4a>
 8006a14:	6819      	ldr	r1, [r3, #0]
 8006a16:	1858      	adds	r0, r3, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x74>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1858      	adds	r0, r3, r1
 8006a22:	4282      	cmp	r2, r0
 8006a24:	6019      	str	r1, [r3, #0]
 8006a26:	d1dd      	bne.n	80069e4 <_free_r+0x24>
 8006a28:	6810      	ldr	r0, [r2, #0]
 8006a2a:	6852      	ldr	r2, [r2, #4]
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	4401      	add	r1, r0
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	e7d7      	b.n	80069e4 <_free_r+0x24>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x7c>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d3      	b.n	80069e4 <_free_r+0x24>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428a      	cmp	r2, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6811      	ldreq	r1, [r2, #0]
 8006a46:	6852      	ldreq	r2, [r2, #4]
 8006a48:	6062      	str	r2, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	605c      	str	r4, [r3, #4]
 8006a52:	e7c7      	b.n	80069e4 <_free_r+0x24>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	2000014c 	.word	0x2000014c

08006a5c <_malloc_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	1ccd      	adds	r5, r1, #3
 8006a60:	f025 0503 	bic.w	r5, r5, #3
 8006a64:	3508      	adds	r5, #8
 8006a66:	2d0c      	cmp	r5, #12
 8006a68:	bf38      	it	cc
 8006a6a:	250c      	movcc	r5, #12
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	db01      	blt.n	8006a76 <_malloc_r+0x1a>
 8006a72:	42a9      	cmp	r1, r5
 8006a74:	d903      	bls.n	8006a7e <_malloc_r+0x22>
 8006a76:	230c      	movs	r3, #12
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	f000 f857 	bl	8006b30 <__malloc_lock>
 8006a82:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <_malloc_r+0xac>)
 8006a84:	6814      	ldr	r4, [r2, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	b991      	cbnz	r1, 8006ab0 <_malloc_r+0x54>
 8006a8a:	4c20      	ldr	r4, [pc, #128]	; (8006b0c <_malloc_r+0xb0>)
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	b91b      	cbnz	r3, 8006a98 <_malloc_r+0x3c>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f83d 	bl	8006b10 <_sbrk_r>
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f838 	bl	8006b10 <_sbrk_r>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d124      	bne.n	8006aee <_malloc_r+0x92>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	6033      	str	r3, [r6, #0]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f842 	bl	8006b32 <__malloc_unlock>
 8006aae:	e7e4      	b.n	8006a7a <_malloc_r+0x1e>
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	1b5b      	subs	r3, r3, r5
 8006ab4:	d418      	bmi.n	8006ae8 <_malloc_r+0x8c>
 8006ab6:	2b0b      	cmp	r3, #11
 8006ab8:	d90f      	bls.n	8006ada <_malloc_r+0x7e>
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	50cd      	str	r5, [r1, r3]
 8006abe:	18cc      	adds	r4, r1, r3
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f836 	bl	8006b32 <__malloc_unlock>
 8006ac6:	f104 000b 	add.w	r0, r4, #11
 8006aca:	1d23      	adds	r3, r4, #4
 8006acc:	f020 0007 	bic.w	r0, r0, #7
 8006ad0:	1ac3      	subs	r3, r0, r3
 8006ad2:	d0d3      	beq.n	8006a7c <_malloc_r+0x20>
 8006ad4:	425a      	negs	r2, r3
 8006ad6:	50e2      	str	r2, [r4, r3]
 8006ad8:	e7d0      	b.n	8006a7c <_malloc_r+0x20>
 8006ada:	428c      	cmp	r4, r1
 8006adc:	684b      	ldr	r3, [r1, #4]
 8006ade:	bf16      	itet	ne
 8006ae0:	6063      	strne	r3, [r4, #4]
 8006ae2:	6013      	streq	r3, [r2, #0]
 8006ae4:	460c      	movne	r4, r1
 8006ae6:	e7eb      	b.n	8006ac0 <_malloc_r+0x64>
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6849      	ldr	r1, [r1, #4]
 8006aec:	e7cc      	b.n	8006a88 <_malloc_r+0x2c>
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d005      	beq.n	8006b04 <_malloc_r+0xa8>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f808 	bl	8006b10 <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0cf      	beq.n	8006aa4 <_malloc_r+0x48>
 8006b04:	6025      	str	r5, [r4, #0]
 8006b06:	e7db      	b.n	8006ac0 <_malloc_r+0x64>
 8006b08:	2000014c 	.word	0x2000014c
 8006b0c:	20000150 	.word	0x20000150

08006b10 <_sbrk_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4c06      	ldr	r4, [pc, #24]	; (8006b2c <_sbrk_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4605      	mov	r5, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	f7f9 fb66 	bl	80001ec <_sbrk>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_sbrk_r+0x1a>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_sbrk_r+0x1a>
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	200007bc 	.word	0x200007bc

08006b30 <__malloc_lock>:
 8006b30:	4770      	bx	lr

08006b32 <__malloc_unlock>:
 8006b32:	4770      	bx	lr

08006b34 <_init>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr

08006b40 <_fini>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr
