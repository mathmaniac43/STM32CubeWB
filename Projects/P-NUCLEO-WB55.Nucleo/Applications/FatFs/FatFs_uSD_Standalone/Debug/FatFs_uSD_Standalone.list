
FatFs_uSD_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006418  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000004  0800673c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000313c  20000088  080067c0  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000804  200031c4  080067c0  000231c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000f472  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001201c  00000000  00000000  0002f52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000280c  00000000  00000000  00041546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001100  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000d3ebe  00000000  00000000  00044e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  00118d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000219fc  00000000  00000000  00119ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013b6dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045d0  00000000  00000000  0013b758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	0800653c 	.word	0x0800653c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	0800653c 	.word	0x0800653c

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000198:	480c      	ldr	r0, [pc, #48]	; (80001cc <LoopForever+0x8>)
 800019a:	490d      	ldr	r1, [pc, #52]	; (80001d0 <LoopForever+0xc>)
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <LoopForever+0x10>)
 800019e:	2300      	movs	r3, #0
 80001a0:	f7ff ffef 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <LoopForever+0x14>)
 80001a6:	490d      	ldr	r1, [pc, #52]	; (80001dc <LoopForever+0x18>)
 80001a8:	2300      	movs	r3, #0
 80001aa:	f7ff fff0 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <LoopForever+0x1c>)
 80001b0:	490c      	ldr	r1, [pc, #48]	; (80001e4 <LoopForever+0x20>)
 80001b2:	2300      	movs	r3, #0
 80001b4:	f7ff ffeb 	bl	800018e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001b8:	f000 f93a 	bl	8000430 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001bc:	f006 f8c8 	bl	8006350 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f840 	bl	8000244 <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000004 	.word	0x20000004
 80001d0:	20000088 	.word	0x20000088
 80001d4:	0800673c 	.word	0x0800673c
  INIT_BSS _sbss, _ebss
 80001d8:	20000088 	.word	0x20000088
 80001dc:	200031c4 	.word	0x200031c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>
	...

080001ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <_sbrk+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d102      	bne.n	8000202 <_sbrk+0x16>
		heap_end = &end;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <_sbrk+0x50>)
 80001fe:	4a10      	ldr	r2, [pc, #64]	; (8000240 <_sbrk+0x54>)
 8000200:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <_sbrk+0x50>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <_sbrk+0x50>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	466a      	mov	r2, sp
 8000212:	4293      	cmp	r3, r2
 8000214:	d907      	bls.n	8000226 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000216:	f006 f895 	bl	8006344 <__errno>
 800021a:	4602      	mov	r2, r0
 800021c:	230c      	movs	r3, #12
 800021e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	e006      	b.n	8000234 <_sbrk+0x48>
	}

	heap_end += incr;
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <_sbrk+0x50>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <_sbrk+0x50>)
 8000230:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000232:	68fb      	ldr	r3, [r7, #12]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000a4 	.word	0x200000a4
 8000240:	200031c8 	.word	0x200031c8

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f001 fa5d 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f85d 	bl	8000310 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED_OK and LED_ERROR */
  BSP_LED_Init(LED_OK);
 8000256:	2001      	movs	r0, #1
 8000258:	f001 f8b6 	bl	80013c8 <BSP_LED_Init>
  BSP_LED_Init(LED_ERROR);
 800025c:	2002      	movs	r0, #2
 800025e:	f001 f8b3 	bl	80013c8 <BSP_LED_Init>

  /* Initialize the micro SD Card */
  BSP_SD_Init();
 8000262:	f000 f9dd 	bl	8000620 <BSP_SD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  if (MX_FATFS_Init() != APP_OK) {
 8000266:	f003 fad3 	bl	8003810 <MX_FATFS_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0x30>
    Error_Handler();
 8000270:	f000 f89f 	bl	80003b2 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    ProcessStatus = MX_FATFS_Process();
 8000274:	f003 fae4 	bl	8003840 <MX_FATFS_Process>
 8000278:	4602      	mov	r2, r0
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <main+0xc4>)
 800027c:	601a      	str	r2, [r3, #0]
    /* Call middleware background task */
    if (ProcessStatus == APP_ERROR)
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <main+0xc4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000286:	d102      	bne.n	800028e <main+0x4a>
    {
      Error_Handler();
 8000288:	f000 f893 	bl	80003b2 <Error_Handler>
      continue;
 800028c:	e03a      	b.n	8000304 <main+0xc0>
    }
    else
    {
      BSP_LED_Off(LED_ERROR);
 800028e:	2002      	movs	r0, #2
 8000290:	f001 f8ee 	bl	8001470 <BSP_LED_Off>
      BSP_LED_On(LED_OK);
 8000294:	2001      	movs	r0, #1
 8000296:	f001 f8d1 	bl	800143c <BSP_LED_On>
    }
    ProcessStatus = MX_FATFS_Process();
 800029a:	f003 fad1 	bl	8003840 <MX_FATFS_Process>
 800029e:	4602      	mov	r2, r0
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <main+0xc4>)
 80002a2:	601a      	str	r2, [r3, #0]

    uint8_t card_state = BSP_SD_GetCardState();
 80002a4:	f000 fb78 	bl	8000998 <BSP_SD_GetCardState>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80002ae:	f102 0217 	add.w	r2, r2, #23
 80002b2:	7013      	strb	r3, [r2, #0]
    if (BSP_SD_OK != card_state)
 80002b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80002b8:	f103 0317 	add.w	r3, r3, #23
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d002      	beq.n	80002c8 <main+0x84>
    {
      Error_Handler();
 80002c2:	f000 f876 	bl	80003b2 <Error_Handler>
      continue;
 80002c6:	e01d      	b.n	8000304 <main+0xc0>
    }

    FIL f;
    FRESULT result_open = f_open(&f, "pnl.txt", FA_READ);
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	3b14      	subs	r3, #20
 80002ce:	2201      	movs	r2, #1
 80002d0:	490e      	ldr	r1, [pc, #56]	; (800030c <main+0xc8>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f005 fa72 	bl	80057bc <f_open>
 80002d8:	4603      	mov	r3, r0
 80002da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80002de:	f102 0216 	add.w	r2, r2, #22
 80002e2:	7013      	strb	r3, [r2, #0]
    if (FR_OK != result_open)
 80002e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80002e8:	f103 0316 	add.w	r3, r3, #22
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <main+0xb4>
    {
    	Error_Handler();
 80002f2:	f000 f85e 	bl	80003b2 <Error_Handler>
    	continue;
 80002f6:	e005      	b.n	8000304 <main+0xc0>
    }

    f_close(&f);
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	3b14      	subs	r3, #20
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 ff99 	bl	8006236 <f_close>
  {
 8000304:	e7b6      	b.n	8000274 <main+0x30>
 8000306:	bf00      	nop
 8000308:	200000a8 	.word	0x200000a8
 800030c:	08006554 	.word	0x08006554

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	2248      	movs	r2, #72	; 0x48
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f006 f84a 	bl	80063b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]
 8000334:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000336:	2320      	movs	r3, #32
 8000338:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800033e:	2300      	movs	r3, #0
 8000340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000342:	2360      	movs	r3, #96	; 0x60
 8000344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800034a:	2301      	movs	r3, #1
 800034c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000352:	2320      	movs	r3, #32
 8000354:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000356:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800035a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800035c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000360:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000362:	2304      	movs	r3, #4
 8000364:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	f107 0320 	add.w	r3, r7, #32
 800036a:	4618      	mov	r0, r3
 800036c:	f002 f87a 	bl	8002464 <HAL_RCC_OscConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000376:	f000 f81c 	bl	80003b2 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800037a:	236f      	movs	r3, #111	; 0x6f
 800037c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037e:	2303      	movs	r3, #3
 8000380:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2103      	movs	r1, #3
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fbc0 	bl	8002b20 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003a6:	f000 f804 	bl	80003b2 <Error_Handler>
  /** Initializes the peripherals clocks 
  */
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003aa:	bf00      	nop
 80003ac:	3768      	adds	r7, #104	; 0x68
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  BSP_LED_Off(LED_OK);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 f85a 	bl	8001470 <BSP_LED_Off>
  BSP_LED_On(LED_ERROR);
 80003bc:	2002      	movs	r0, #2
 80003be:	f001 f83d 	bl	800143c <BSP_LED_On>
  while(1)
 80003c2:	e7fe      	b.n	80003c2 <Error_Handler+0x10>

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <HardFault_Handler+0x4>

080003e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <MemManage_Handler+0x4>

080003ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <BusFault_Handler+0x4>

080003f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <UsageFault_Handler+0x4>

080003f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000426:	f001 f9cb 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000434:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <SystemInit+0xa0>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <SystemInit+0xa0>)
 800043c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000440:	4a23      	ldr	r2, [pc, #140]	; (80004d0 <SystemInit+0xa0>)
 8000442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800044a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800045a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000462:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800046e:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <SystemInit+0xa4>)
 8000470:	4013      	ands	r3, r2
 8000472:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800047c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000480:	f023 0305 	bic.w	r3, r3, #5
 8000484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <SystemInit+0xa8>)
 80004a2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80004a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <SystemInit+0xa8>)
 80004aa:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	faf6fefb 	.word	0xfaf6fefb
 80004d8:	22041000 	.word	0x22041000

080004dc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b087      	sub	sp, #28
 80004e0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80004e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	091b      	lsrs	r3, r3, #4
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	4a47      	ldr	r2, [pc, #284]	; (800060c <SystemCoreClockUpdate+0x130>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	2b0c      	cmp	r3, #12
 8000502:	d867      	bhi.n	80005d4 <SystemCoreClockUpdate+0xf8>
 8000504:	a201      	add	r2, pc, #4	; (adr r2, 800050c <SystemCoreClockUpdate+0x30>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	08000541 	.word	0x08000541
 8000510:	080005d5 	.word	0x080005d5
 8000514:	080005d5 	.word	0x080005d5
 8000518:	080005d5 	.word	0x080005d5
 800051c:	08000549 	.word	0x08000549
 8000520:	080005d5 	.word	0x080005d5
 8000524:	080005d5 	.word	0x080005d5
 8000528:	080005d5 	.word	0x080005d5
 800052c:	08000551 	.word	0x08000551
 8000530:	080005d5 	.word	0x080005d5
 8000534:	080005d5 	.word	0x080005d5
 8000538:	080005d5 	.word	0x080005d5
 800053c:	08000559 	.word	0x08000559
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000540:	4a33      	ldr	r2, [pc, #204]	; (8000610 <SystemCoreClockUpdate+0x134>)
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	6013      	str	r3, [r2, #0]
      break;
 8000546:	e049      	b.n	80005dc <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <SystemCoreClockUpdate+0x134>)
 800054a:	4a32      	ldr	r2, [pc, #200]	; (8000614 <SystemCoreClockUpdate+0x138>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	e045      	b.n	80005dc <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000550:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <SystemCoreClockUpdate+0x134>)
 8000552:	4a31      	ldr	r2, [pc, #196]	; (8000618 <SystemCoreClockUpdate+0x13c>)
 8000554:	601a      	str	r2, [r3, #0]
      break;
 8000556:	e041      	b.n	80005dc <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	091b      	lsrs	r3, r3, #4
 800056c:	f003 0307 	and.w	r3, r3, #7
 8000570:	3301      	adds	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d105      	bne.n	8000586 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <SystemCoreClockUpdate+0x138>)
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e00d      	b.n	80005a2 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d105      	bne.n	8000598 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800058c:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemCoreClockUpdate+0x13c>)
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e004      	b.n	80005a2 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000598:	693a      	ldr	r2, [r7, #16]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0f5b      	lsrs	r3, r3, #29
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <SystemCoreClockUpdate+0x134>)
 80005d0:	6013      	str	r3, [r2, #0]
      break;
 80005d2:	e003      	b.n	80005dc <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <SystemCoreClockUpdate+0x134>)
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	6013      	str	r3, [r2, #0]
      break;
 80005da:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <SystemCoreClockUpdate+0x140>)
 80005ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ee:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <SystemCoreClockUpdate+0x134>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <SystemCoreClockUpdate+0x134>)
 80005fc:	6013      	str	r3, [r2, #0]

}
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	08006658 	.word	0x08006658
 8000610:	20000004 	.word	0x20000004
 8000614:	00f42400 	.word	0x00f42400
 8000618:	007a1200 	.word	0x007a1200
 800061c:	08006618 	.word	0x08006618

08000620 <BSP_SD_Init>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Configure IO functionalities for SD pin */
  SD_IO_Init();
 8000624:	f000 ffe8 	bl	80015f8 <SD_IO_Init>

  /* SD detection pin is not physically mapped on the Adafruit shield */
  SdStatus = SD_PRESENT;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <BSP_SD_Init+0x18>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]

  /* SD initialized and set to SPI mode properly */
  return SD_GoIdleState();
 800062e:	f000 fd5b 	bl	80010e8 <SD_GoIdleState>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000ac 	.word	0x200000ac

0800063c <BSP_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
uint8_t BSP_SD_GetCardInfo(SD_CardInfo *pCardInfo)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint8_t status;

  status = SD_GetCSDRegister(&(pCardInfo->Csd));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f9c4 	bl	80009d4 <SD_GetCSDRegister>
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3318      	adds	r3, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fbbf 	bl	8000dd8 <SD_GetCIDRegister>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	4313      	orrs	r3, r2
 8000662:	73fb      	strb	r3, [r7, #15]
  if(flag_SDHC == 1 )
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <BSP_SD_GetCardInfo+0xdc>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d11d      	bne.n	80006a8 <BSP_SD_GetCardInfo+0x6c>
  {
    pCardInfo->LogBlockSize = 512;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8000684:	3301      	adds	r3, #1
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800068c:	fb03 f302 	mul.w	r3, r3, r2
 8000690:	029a      	lsls	r2, r3, #10
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069e:	fbb2 f2f3 	udiv	r2, r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
 80006a6:	e032      	b.n	800070e <BSP_SD_GetCardInfo+0xd2>
  }
  else
  {
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	891b      	ldrh	r3, [r3, #8]
 80006ac:	f3c3 038b 	ubfx	r3, r3, #2, #12
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7b1b      	ldrb	r3, [r3, #12]
 80006c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	409a      	lsls	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockSize = 512;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2301      	movs	r3, #1
 80006e6:	4093      	lsls	r3, r2
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80006f6:	fb02 f203 	mul.w	r2, r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	fbb2 f2f3 	udiv	r2, r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return status;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000ae 	.word	0x200000ae

0800071c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af02      	add	r7, sp, #8
 8000722:	6178      	str	r0, [r7, #20]
 8000724:	6139      	str	r1, [r7, #16]
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t addr;
  uint8_t retr = BSP_SD_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t *ptr = NULL;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	83fb      	strh	r3, [r7, #30]

  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800073e:	8bfa      	ldrh	r2, [r7, #30]
 8000740:	f107 0018 	add.w	r0, r7, #24
 8000744:	2300      	movs	r3, #0
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	23ff      	movs	r3, #255	; 0xff
 800074a:	2110      	movs	r1, #16
 800074c:	f000 fbf8 	bl	8000f40 <SD_SendCmd>
  SD_IO_CSState(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 ff9d 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000756:	20ff      	movs	r0, #255	; 0xff
 8000758:	f000 ffc7 	bl	80016ea <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 800075c:	7e3b      	ldrb	r3, [r7, #24]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d15e      	bne.n	8000820 <BSP_SD_ReadBlocks+0x104>
  {
     goto error;
  }

  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000762:	8bfb      	ldrh	r3, [r7, #30]
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fe17 	bl	8006398 <malloc>
 800076a:	4603      	mov	r3, r0
 800076c:	623b      	str	r3, [r7, #32]
  if( ptr == NULL )
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d057      	beq.n	8000824 <BSP_SD_ReadBlocks+0x108>
  {
     goto error;
  }
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8000774:	8bfb      	ldrh	r3, [r7, #30]
 8000776:	461a      	mov	r2, r3
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	6a38      	ldr	r0, [r7, #32]
 800077c:	f005 fe1c 	bl	80063b8 <memset>

  /* Initialize the address */
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <BSP_SD_ReadBlocks+0x138>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d001      	beq.n	800078c <BSP_SD_ReadBlocks+0x70>
 8000788:	8bfb      	ldrh	r3, [r7, #30]
 800078a:	e000      	b.n	800078e <BSP_SD_ReadBlocks+0x72>
 800078c:	2301      	movs	r3, #1
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Data transfer */
  while (NumOfBlocks--)
 8000796:	e03a      	b.n	800080e <BSP_SD_ReadBlocks+0xf2>
  {
    /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
    /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000798:	4638      	mov	r0, r7
 800079a:	2300      	movs	r3, #0
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a2:	2111      	movs	r1, #17
 80007a4:	f000 fbcc 	bl	8000f40 <SD_SendCmd>
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	463a      	mov	r2, r7
 80007ae:	6810      	ldr	r0, [r2, #0]
 80007b0:	6018      	str	r0, [r3, #0]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	711a      	strb	r2, [r3, #4]
    if ( response.r1 != SD_R1_NO_ERROR)
 80007b6:	7e3b      	ldrb	r3, [r7, #24]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d135      	bne.n	8000828 <BSP_SD_ReadBlocks+0x10c>
    {
      goto error;
    }

    /* Now look for the data token to signify the start of the data */
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80007bc:	20fe      	movs	r0, #254	; 0xfe
 80007be:	f000 fdaf 	bl	8001320 <SD_WaitData>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d131      	bne.n	800082c <BSP_SD_ReadBlocks+0x110>
    {
      /* Read the SD block data : read NumByteToRead data */
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007cc:	4413      	add	r3, r2
 80007ce:	8bfa      	ldrh	r2, [r7, #30]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6a38      	ldr	r0, [r7, #32]
 80007d4:	f000 ff78 	bl	80016c8 <SD_IO_WriteReadData>

      /* Set next read address*/
      offset += BlockSize;
 80007d8:	8bfb      	ldrh	r3, [r7, #30]
 80007da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007dc:	4413      	add	r3, r2
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <BSP_SD_ReadBlocks+0x138>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d102      	bne.n	80007ee <BSP_SD_ReadBlocks+0xd2>
 80007e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ea:	3301      	adds	r3, #1
 80007ec:	e002      	b.n	80007f4 <BSP_SD_ReadBlocks+0xd8>
 80007ee:	8bfa      	ldrh	r2, [r7, #30]
 80007f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f2:	4413      	add	r3, r2
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007f6:	20ff      	movs	r0, #255	; 0xff
 80007f8:	f000 ff77 	bl	80016ea <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80007fc:	20ff      	movs	r0, #255	; 0xff
 80007fe:	f000 ff74 	bl	80016ea <SD_IO_WriteByte>
    {
      goto error;
    }

    /* End the command data read cycle */
    SD_IO_CSState(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 ff44 	bl	8001690 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	f000 ff6e 	bl	80016ea <SD_IO_WriteByte>
  while (NumOfBlocks--)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	60fa      	str	r2, [r7, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1bf      	bne.n	8000798 <BSP_SD_ReadBlocks+0x7c>
  }

  retr = BSP_SD_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800081e:	e006      	b.n	800082e <BSP_SD_ReadBlocks+0x112>
     goto error;
 8000820:	bf00      	nop
 8000822:	e004      	b.n	800082e <BSP_SD_ReadBlocks+0x112>
     goto error;
 8000824:	bf00      	nop
 8000826:	e002      	b.n	800082e <BSP_SD_ReadBlocks+0x112>
      goto error;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <BSP_SD_ReadBlocks+0x112>
      goto error;
 800082c:	bf00      	nop

error :
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 ff2e 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000834:	20ff      	movs	r0, #255	; 0xff
 8000836:	f000 ff58 	bl	80016ea <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <BSP_SD_ReadBlocks+0x12a>
 8000840:	6a38      	ldr	r0, [r7, #32]
 8000842:	f005 fdb1 	bl	80063a8 <free>

  /* Return the reponse */
  return retr;
 8000846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800084a:	4618      	mov	r0, r3
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000ae 	.word	0x200000ae

08000858 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: This parameter is used for compatibility with BSP implementation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af02      	add	r7, sp, #8
 800085e:	6178      	str	r0, [r7, #20]
 8000860:	6139      	str	r1, [r7, #16]
 8000862:	60fa      	str	r2, [r7, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  uint32_t offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t addr;
  uint8_t retr = BSP_SD_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t *ptr = NULL;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  SD_CmdAnswer_typedef response;
  uint16_t BlockSize = 512;
 8000874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000878:	83fb      	strh	r3, [r7, #30]

  /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
     Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800087a:	8bfa      	ldrh	r2, [r7, #30]
 800087c:	f107 0018 	add.w	r0, r7, #24
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	2110      	movs	r1, #16
 8000888:	f000 fb5a 	bl	8000f40 <SD_SendCmd>
  SD_IO_CSState(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 feff 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	f000 ff29 	bl	80016ea <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000898:	7e3b      	ldrb	r3, [r7, #24]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d160      	bne.n	8000960 <BSP_SD_WriteBlocks+0x108>
  {
    goto error;
  }

  ptr = malloc(sizeof(uint8_t)*BlockSize);
 800089e:	8bfb      	ldrh	r3, [r7, #30]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 fd79 	bl	8006398 <malloc>
 80008a6:	4603      	mov	r3, r0
 80008a8:	623b      	str	r3, [r7, #32]
  if (ptr == NULL)
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d059      	beq.n	8000964 <BSP_SD_WriteBlocks+0x10c>
  {
    goto error;
  }

  /* Initialize the address */
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <BSP_SD_WriteBlocks+0x13c>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d001      	beq.n	80008bc <BSP_SD_WriteBlocks+0x64>
 80008b8:	8bfb      	ldrh	r3, [r7, #30]
 80008ba:	e000      	b.n	80008be <BSP_SD_WriteBlocks+0x66>
 80008bc:	2301      	movs	r3, #1
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Data transfer */
  while (NumOfBlocks--)
 80008c6:	e042      	b.n	800094e <BSP_SD_WriteBlocks+0xf6>
  {
    /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
       Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 80008c8:	4638      	mov	r0, r7
 80008ca:	2300      	movs	r3, #0
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	23ff      	movs	r3, #255	; 0xff
 80008d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008d2:	2118      	movs	r1, #24
 80008d4:	f000 fb34 	bl	8000f40 <SD_SendCmd>
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	463a      	mov	r2, r7
 80008de:	6810      	ldr	r0, [r2, #0]
 80008e0:	6018      	str	r0, [r3, #0]
 80008e2:	7912      	ldrb	r2, [r2, #4]
 80008e4:	711a      	strb	r2, [r3, #4]
    if (response.r1 != SD_R1_NO_ERROR)
 80008e6:	7e3b      	ldrb	r3, [r7, #24]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d13d      	bne.n	8000968 <BSP_SD_WriteBlocks+0x110>
    {
      goto error;
    }

    /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	f000 fefc 	bl	80016ea <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	f000 fef9 	bl	80016ea <SD_IO_WriteByte>

    /* Send the data token to signify the start of the data */
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 80008f8:	20fe      	movs	r0, #254	; 0xfe
 80008fa:	f000 fef6 	bl	80016ea <SD_IO_WriteByte>

    /* Write the block data to SD */
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000902:	4413      	add	r3, r2
 8000904:	8bfa      	ldrh	r2, [r7, #30]
 8000906:	6a39      	ldr	r1, [r7, #32]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fedd 	bl	80016c8 <SD_IO_WriteReadData>

    /* Set next write address */
    offset += BlockSize;
 800090e:	8bfb      	ldrh	r3, [r7, #30]
 8000910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000912:	4413      	add	r3, r2
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <BSP_SD_WriteBlocks+0x13c>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <BSP_SD_WriteBlocks+0xcc>
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	3301      	adds	r3, #1
 8000922:	e002      	b.n	800092a <BSP_SD_WriteBlocks+0xd2>
 8000924:	8bfa      	ldrh	r2, [r7, #30]
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	4413      	add	r3, r2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Put CRC bytes (not really needed by us, but required by SD) */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	f000 fedc 	bl	80016ea <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000932:	20ff      	movs	r0, #255	; 0xff
 8000934:	f000 fed9 	bl	80016ea <SD_IO_WriteByte>

    /* Read data response */
    if (SD_GetDataResponse() != SD_DATA_OK)
 8000938:	f000 fba4 	bl	8001084 <SD_GetDataResponse>
 800093c:	4603      	mov	r3, r0
 800093e:	2b05      	cmp	r3, #5
 8000940:	d114      	bne.n	800096c <BSP_SD_WriteBlocks+0x114>
    {
      /* Set response value to failure */
      goto error;
    }

    SD_IO_CSState(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fea4 	bl	8001690 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	f000 fece 	bl	80016ea <SD_IO_WriteByte>
  while (NumOfBlocks--)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	60fa      	str	r2, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1b7      	bne.n	80008c8 <BSP_SD_WriteBlocks+0x70>
  }
  retr = BSP_SD_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800095e:	e006      	b.n	800096e <BSP_SD_WriteBlocks+0x116>
    goto error;
 8000960:	bf00      	nop
 8000962:	e004      	b.n	800096e <BSP_SD_WriteBlocks+0x116>
    goto error;
 8000964:	bf00      	nop
 8000966:	e002      	b.n	800096e <BSP_SD_WriteBlocks+0x116>
      goto error;
 8000968:	bf00      	nop
 800096a:	e000      	b.n	800096e <BSP_SD_WriteBlocks+0x116>
      goto error;
 800096c:	bf00      	nop

error :
  if(ptr != NULL) free(ptr);
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <BSP_SD_WriteBlocks+0x122>
 8000974:	6a38      	ldr	r0, [r7, #32]
 8000976:	f005 fd17 	bl	80063a8 <free>
  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fe88 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	f000 feb2 	bl	80016ea <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800098a:	4618      	mov	r0, r3
 800098c:	3730      	adds	r7, #48	; 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000ae 	.word	0x200000ae

08000998 <BSP_SD_GetCardState>:
  * @brief  Returns the SD status.
  * @param  None
  * @retval The SD status.
  */
uint8_t BSP_SD_GetCardState(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef retr;

  /* Send CMD13 (SD_SEND_STATUS) to get SD status */
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 800099e:	4638      	mov	r0, r7
 80009a0:	2302      	movs	r3, #2
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	2200      	movs	r2, #0
 80009a8:	210d      	movs	r1, #13
 80009aa:	f000 fac9 	bl	8000f40 <SD_SendCmd>
  SD_IO_CSState(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fe6e 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	f000 fe98 	bl	80016ea <SD_IO_WriteByte>

  /* Find SD status according to card state */
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 80009ba:	783b      	ldrb	r3, [r7, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d104      	bne.n	80009ca <BSP_SD_GetCardState+0x32>
 80009c0:	787b      	ldrb	r3, [r7, #1]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <BSP_SD_GetCardState+0x32>
  {
    return BSP_SD_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <BSP_SD_GetCardState+0x34>
  }

  return BSP_SD_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd: pointer on an SCD register structure
  * @retval SD status
  */
uint8_t SD_GetCSDRegister(SD_CSD* Csd)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08d      	sub	sp, #52	; 0x34
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
  uint16_t counter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t CSD_Tab[16];
  uint8_t retr = BSP_SD_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  SD_CmdAnswer_typedef response;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80009e6:	f107 000c 	add.w	r0, r7, #12
 80009ea:	2300      	movs	r3, #0
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	23ff      	movs	r3, #255	; 0xff
 80009f0:	2200      	movs	r2, #0
 80009f2:	2109      	movs	r1, #9
 80009f4:	f000 faa4 	bl	8000f40 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 81dd 	bne.w	8000dba <SD_GetCSDRegister+0x3e6>
  {
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000a00:	20fe      	movs	r0, #254	; 0xfe
 8000a02:	f000 fc8d 	bl	8001320 <SD_WaitData>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 81d6 	bne.w	8000dba <SD_GetCSDRegister+0x3e6>
    {
      for (counter = 0; counter < 16; counter++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a12:	e00d      	b.n	8000a30 <SD_GetCSDRegister+0x5c>
      {
        /* Store CSD register value on CSD_Tab */
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a14:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	f000 fe67 	bl	80016ea <SD_IO_WriteByte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4423      	add	r3, r4
 8000a26:	f803 2c14 	strb.w	r2, [r3, #-20]
      for (counter = 0; counter < 16; counter++)
 8000a2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a32:	2b0f      	cmp	r3, #15
 8000a34:	d9ee      	bls.n	8000a14 <SD_GetCSDRegister+0x40>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	f000 fe57 	bl	80016ea <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	f000 fe54 	bl	80016ea <SD_IO_WriteByte>
      /*************************************************************************
        CSD header decoding
      *************************************************************************/

      /* Byte 0 */
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8000a42:	7d3b      	ldrb	r3, [r7, #20]
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	b2d9      	uxtb	r1, r3
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	7813      	ldrb	r3, [r2, #0]
 8000a52:	f361 0301 	bfi	r3, r1, #0, #2
 8000a56:	7013      	strb	r3, [r2, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 8000a58:	7d3b      	ldrb	r3, [r7, #20]
 8000a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a5e:	b2d9      	uxtb	r1, r3
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7813      	ldrb	r3, [r2, #0]
 8000a64:	f361 0387 	bfi	r3, r1, #2, #6
 8000a68:	7013      	strb	r3, [r2, #0]

      /* Byte 1 */
      Csd->TAAC = CSD_Tab[1];
 8000a6a:	7d7a      	ldrb	r2, [r7, #21]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	705a      	strb	r2, [r3, #1]

      /* Byte 2 */
      Csd->NSAC = CSD_Tab[2];
 8000a70:	7dba      	ldrb	r2, [r7, #22]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	709a      	strb	r2, [r3, #2]

      /* Byte 3 */
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8000a76:	7dfa      	ldrb	r2, [r7, #23]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	70da      	strb	r2, [r3, #3]

      /* Byte 4/5 */
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8000a7c:	7e3b      	ldrb	r3, [r7, #24]
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	7e7b      	ldrb	r3, [r7, #25]
 8000a84:	091b      	lsrs	r3, r3, #4
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a92:	b299      	uxth	r1, r3
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	8893      	ldrh	r3, [r2, #4]
 8000a98:	f361 030b 	bfi	r3, r1, #0, #12
 8000a9c:	8093      	strh	r3, [r2, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8000a9e:	7e7b      	ldrb	r3, [r7, #25]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7953      	ldrb	r3, [r2, #5]
 8000aaa:	f361 1307 	bfi	r3, r1, #4, #4
 8000aae:	7153      	strb	r3, [r2, #5]

      /* Byte 6 */
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000ab0:	7ebb      	ldrb	r3, [r7, #26]
 8000ab2:	09db      	lsrs	r3, r3, #7
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	b2d9      	uxtb	r1, r3
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	7993      	ldrb	r3, [r2, #6]
 8000ac0:	f361 0300 	bfi	r3, r1, #0, #1
 8000ac4:	7193      	strb	r3, [r2, #6]
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8000ac6:	7ebb      	ldrb	r3, [r7, #26]
 8000ac8:	119b      	asrs	r3, r3, #6
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	b2d9      	uxtb	r1, r3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7993      	ldrb	r3, [r2, #6]
 8000ad4:	f361 0341 	bfi	r3, r1, #1, #1
 8000ad8:	7193      	strb	r3, [r2, #6]
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8000ada:	7ebb      	ldrb	r3, [r7, #26]
 8000adc:	115b      	asrs	r3, r3, #5
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2d9      	uxtb	r1, r3
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	7993      	ldrb	r3, [r2, #6]
 8000ae8:	f361 0382 	bfi	r3, r1, #2, #1
 8000aec:	7193      	strb	r3, [r2, #6]
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8000aee:	7ebb      	ldrb	r3, [r7, #26]
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2d9      	uxtb	r1, r3
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7993      	ldrb	r3, [r2, #6]
 8000afc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b00:	7193      	strb	r3, [r2, #6]

      /*************************************************************************
        CSD v1/v2 decoding
      *************************************************************************/

      if(flag_SDHC == 0)
 8000b02:	4bb4      	ldr	r3, [pc, #720]	; (8000dd4 <SD_GetCSDRegister+0x400>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d15f      	bne.n	8000bca <SD_GetCSDRegister+0x1f6>
      {
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8000b0a:	7ebb      	ldrb	r3, [r7, #26]
 8000b0c:	109b      	asrs	r3, r3, #2
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	b2d9      	uxtb	r1, r3
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	7a13      	ldrb	r3, [r2, #8]
 8000b18:	f361 0301 	bfi	r3, r1, #0, #2
 8000b1c:	7213      	strb	r3, [r2, #8]

        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000b1e:	7ebb      	ldrb	r3, [r7, #26]
 8000b20:	029b      	lsls	r3, r3, #10
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b28:	b21a      	sxth	r2, r3
                                    |  (CSD_Tab[7] << 2)
 8000b2a:	7efb      	ldrb	r3, [r7, #27]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21a      	sxth	r2, r3
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000b34:	7f3b      	ldrb	r3, [r7, #28]
 8000b36:	099b      	lsrs	r3, r3, #6
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b44:	b299      	uxth	r1, r3
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	8913      	ldrh	r3, [r2, #8]
 8000b4a:	f361 038d 	bfi	r3, r1, #2, #12
 8000b4e:	8113      	strh	r3, [r2, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000b50:	7f3b      	ldrb	r3, [r7, #28]
 8000b52:	10db      	asrs	r3, r3, #3
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	b2d9      	uxtb	r1, r3
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	7a93      	ldrb	r3, [r2, #10]
 8000b5e:	f361 0302 	bfi	r3, r1, #0, #3
 8000b62:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8000b64:	7f3b      	ldrb	r3, [r7, #28]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	7a93      	ldrb	r3, [r2, #10]
 8000b70:	f361 03c5 	bfi	r3, r1, #3, #3
 8000b74:	7293      	strb	r3, [r2, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000b76:	7f7b      	ldrb	r3, [r7, #29]
 8000b78:	095b      	lsrs	r3, r3, #5
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	b2d9      	uxtb	r1, r3
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	7ad3      	ldrb	r3, [r2, #11]
 8000b86:	f361 0302 	bfi	r3, r1, #0, #3
 8000b8a:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000b8c:	7f7b      	ldrb	r3, [r7, #29]
 8000b8e:	109b      	asrs	r3, r3, #2
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	b2d9      	uxtb	r1, r3
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	7ad3      	ldrb	r3, [r2, #11]
 8000b9a:	f361 03c5 	bfi	r3, r1, #3, #3
 8000b9e:	72d3      	strb	r3, [r2, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000ba0:	7f7b      	ldrb	r3, [r7, #29]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	f003 0306 	and.w	r3, r3, #6
 8000baa:	b25a      	sxtb	r2, r3
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8000bac:	7fbb      	ldrb	r3, [r7, #30]
 8000bae:	09db      	lsrs	r3, r3, #7
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	b2d9      	uxtb	r1, r3
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	7b13      	ldrb	r3, [r2, #12]
 8000bc2:	f361 0302 	bfi	r3, r1, #0, #3
 8000bc6:	7313      	strb	r3, [r2, #12]
 8000bc8:	e028      	b.n	8000c1c <SD_GetCSDRegister+0x248>
      }
      else
      {
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000bca:	7ebb      	ldrb	r3, [r7, #26]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000bd4:	b25a      	sxtb	r2, r3
 8000bd6:	7efb      	ldrb	r3, [r7, #27]
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000be6:	b2d9      	uxtb	r1, r3
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	7a13      	ldrb	r3, [r2, #8]
 8000bec:	f361 0305 	bfi	r3, r1, #0, #6
 8000bf0:	7213      	strb	r3, [r2, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000bf2:	7efb      	ldrb	r3, [r7, #27]
 8000bf4:	041b      	lsls	r3, r3, #16
 8000bf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	7f7a      	ldrb	r2, [r7, #29]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	f3c3 0115 	ubfx	r1, r3, #0, #22
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6893      	ldr	r3, [r2, #8]
 8000c0c:	f361 139b 	bfi	r3, r1, #6, #22
 8000c10:	6093      	str	r3, [r2, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	7ad3      	ldrb	r3, [r2, #11]
 8000c16:	f36f 1304 	bfc	r3, #4, #1
 8000c1a:	72d3      	strb	r3, [r2, #11]
      }

      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000c1c:	7fbb      	ldrb	r3, [r7, #30]
 8000c1e:	119b      	asrs	r3, r3, #6
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	7c13      	ldrb	r3, [r2, #16]
 8000c2a:	f361 0300 	bfi	r3, r1, #0, #1
 8000c2e:	7413      	strb	r3, [r2, #16]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000c30:	7fbb      	ldrb	r3, [r7, #30]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c3a:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	09db      	lsrs	r3, r3, #7
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c4c:	b2d9      	uxtb	r1, r3
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	7c13      	ldrb	r3, [r2, #16]
 8000c52:	f361 0347 	bfi	r3, r1, #1, #7
 8000c56:	7413      	strb	r3, [r2, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	7c53      	ldrb	r3, [r2, #17]
 8000c64:	f361 0306 	bfi	r3, r1, #0, #7
 8000c68:	7453      	strb	r3, [r2, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6e:	09db      	lsrs	r3, r3, #7
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	7c53      	ldrb	r3, [r2, #17]
 8000c7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c80:	7453      	strb	r3, [r2, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000c82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c86:	115b      	asrs	r3, r3, #5
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	b2d9      	uxtb	r1, r3
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	7c93      	ldrb	r3, [r2, #18]
 8000c92:	f361 0301 	bfi	r3, r1, #0, #2
 8000c96:	7493      	strb	r3, [r2, #18]
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000c98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c9c:	109b      	asrs	r3, r3, #2
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	b2d9      	uxtb	r1, r3
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	7c93      	ldrb	r3, [r2, #18]
 8000ca8:	f361 0384 	bfi	r3, r1, #2, #3
 8000cac:	7493      	strb	r3, [r2, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000cae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	b25a      	sxtb	r2, r3
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000cbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cc0:	099b      	lsrs	r3, r3, #6
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	b2d9      	uxtb	r1, r3
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	7cd3      	ldrb	r3, [r2, #19]
 8000cd4:	f361 0303 	bfi	r3, r1, #0, #4
 8000cd8:	74d3      	strb	r3, [r2, #19]
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000cda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cde:	115b      	asrs	r3, r3, #5
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	7cd3      	ldrb	r3, [r2, #19]
 8000cea:	f361 1304 	bfi	r3, r1, #4, #1
 8000cee:	74d3      	strb	r3, [r2, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8000cf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000cf4:	f003 031f 	and.w	r3, r3, #31
 8000cf8:	b2d9      	uxtb	r1, r3
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	7d13      	ldrb	r3, [r2, #20]
 8000cfe:	f361 0304 	bfi	r3, r1, #0, #5
 8000d02:	7513      	strb	r3, [r2, #20]
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8000d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d08:	09db      	lsrs	r3, r3, #7
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	b2d9      	uxtb	r1, r3
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	7d13      	ldrb	r3, [r2, #20]
 8000d16:	f361 1345 	bfi	r3, r1, #5, #1
 8000d1a:	7513      	strb	r3, [r2, #20]
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8000d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d20:	119b      	asrs	r3, r3, #6
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	b2d9      	uxtb	r1, r3
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	7d13      	ldrb	r3, [r2, #20]
 8000d2c:	f361 1386 	bfi	r3, r1, #6, #1
 8000d30:	7513      	strb	r3, [r2, #20]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d36:	115b      	asrs	r3, r3, #5
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	b2d9      	uxtb	r1, r3
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	7d13      	ldrb	r3, [r2, #20]
 8000d42:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d46:	7513      	strb	r3, [r2, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000d48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d4c:	111b      	asrs	r3, r3, #4
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b2d9      	uxtb	r1, r3
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	7d53      	ldrb	r3, [r2, #21]
 8000d58:	f361 0300 	bfi	r3, r1, #0, #1
 8000d5c:	7553      	strb	r3, [r2, #21]
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8000d5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d62:	109b      	asrs	r3, r3, #2
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	b2d9      	uxtb	r1, r3
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	7d53      	ldrb	r3, [r2, #21]
 8000d6e:	f361 0342 	bfi	r3, r1, #1, #2
 8000d72:	7553      	strb	r3, [r2, #21]
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8000d74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	b2d9      	uxtb	r1, r3
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	7d53      	ldrb	r3, [r2, #21]
 8000d82:	f361 03c4 	bfi	r3, r1, #3, #2
 8000d86:	7553      	strb	r3, [r2, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8000d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	7d93      	ldrb	r3, [r2, #22]
 8000d9a:	f361 0306 	bfi	r3, r1, #0, #7
 8000d9e:	7593      	strb	r3, [r2, #22]
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8000da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2d9      	uxtb	r1, r3
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	7d93      	ldrb	r3, [r2, #22]
 8000dae:	f361 13c7 	bfi	r3, r1, #7, #1
 8000db2:	7593      	strb	r3, [r2, #22]

      retr = BSP_SD_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    }
  }

  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fc68 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000dc0:	20ff      	movs	r0, #255	; 0xff
 8000dc2:	f000 fc92 	bl	80016ea <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000dc6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	372c      	adds	r7, #44	; 0x2c
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000ae 	.word	0x200000ae

08000dd8 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
uint8_t SD_GetCIDRegister(SD_CID* Cid)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t retr = BSP_SD_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t CID_Tab[16];
  SD_CmdAnswer_typedef response;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000dea:	f107 0008 	add.w	r0, r7, #8
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	23ff      	movs	r3, #255	; 0xff
 8000df4:	2200      	movs	r2, #0
 8000df6:	210a      	movs	r1, #10
 8000df8:	f000 f8a2 	bl	8000f40 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8000dfc:	7a3b      	ldrb	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8091 	bne.w	8000f26 <SD_GetCIDRegister+0x14e>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000e04:	20fe      	movs	r0, #254	; 0xfe
 8000e06:	f000 fa8b 	bl	8001320 <SD_WaitData>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 808a 	bne.w	8000f26 <SD_GetCIDRegister+0x14e>
    {
      /* Store CID register value on CID_Tab */
      for (counter = 0; counter < 16; counter++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
 8000e16:	e00d      	b.n	8000e34 <SD_GetCIDRegister+0x5c>
      {
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e18:	20ff      	movs	r0, #255	; 0xff
 8000e1a:	f000 fc66 	bl	80016ea <SD_IO_WriteByte>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4619      	mov	r1, r3
 8000e22:	f107 0210 	add.w	r2, r7, #16
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	4413      	add	r3, r2
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
      for (counter = 0; counter < 16; counter++)
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d9ee      	bls.n	8000e18 <SD_GetCIDRegister+0x40>
      }

      /* Get CRC bytes (not really needed by us, but required by SD) */
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	f000 fc55 	bl	80016ea <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e40:	20ff      	movs	r0, #255	; 0xff
 8000e42:	f000 fc52 	bl	80016ea <SD_IO_WriteByte>

      /* Byte 0 */
      Cid->ManufacturerID = CID_Tab[0];
 8000e46:	7c3a      	ldrb	r2, [r7, #16]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	701a      	strb	r2, [r3, #0]

      /* Byte 1 */
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000e4c:	7c7b      	ldrb	r3, [r7, #17]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	805a      	strh	r2, [r3, #2]

      /* Byte 2 */
      Cid->OEM_AppliID |= CID_Tab[2];
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	885b      	ldrh	r3, [r3, #2]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	7cbb      	ldrb	r3, [r7, #18]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	805a      	strh	r2, [r3, #2]

      /* Byte 3 */
      Cid->ProdName1 = CID_Tab[3] << 24;
 8000e6a:	7cfb      	ldrb	r3, [r7, #19]
 8000e6c:	061b      	lsls	r3, r3, #24
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	605a      	str	r2, [r3, #4]

      /* Byte 4 */
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	7d3a      	ldrb	r2, [r7, #20]
 8000e7a:	0412      	lsls	r2, r2, #16
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	605a      	str	r2, [r3, #4]

      /* Byte 5 */
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	7d7a      	ldrb	r2, [r7, #21]
 8000e88:	0212      	lsls	r2, r2, #8
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	605a      	str	r2, [r3, #4]

      /* Byte 6 */
      Cid->ProdName1 |= CID_Tab[6];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	7dba      	ldrb	r2, [r7, #22]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	605a      	str	r2, [r3, #4]

      /* Byte 7 */
      Cid->ProdName2 = CID_Tab[7];
 8000e9c:	7dfa      	ldrb	r2, [r7, #23]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	721a      	strb	r2, [r3, #8]

      /* Byte 8 */
      Cid->ProdRev = CID_Tab[8];
 8000ea2:	7e3a      	ldrb	r2, [r7, #24]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	725a      	strb	r2, [r3, #9]

      /* Byte 9 */
      Cid->ProdSN = CID_Tab[9] << 24;
 8000ea8:	7e7b      	ldrb	r3, [r7, #25]
 8000eaa:	061b      	lsls	r3, r3, #24
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]

      /* Byte 10 */
      Cid->ProdSN |= CID_Tab[10] << 16;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	7eba      	ldrb	r2, [r7, #26]
 8000eb8:	0412      	lsls	r2, r2, #16
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]

      /* Byte 11 */
      Cid->ProdSN |= CID_Tab[11] << 8;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	7efa      	ldrb	r2, [r7, #27]
 8000ec6:	0212      	lsls	r2, r2, #8
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60da      	str	r2, [r3, #12]

      /* Byte 12 */
      Cid->ProdSN |= CID_Tab[12];
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	7f3a      	ldrb	r2, [r7, #28]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60da      	str	r2, [r3, #12]

      /* Byte 13 */
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7c1b      	ldrb	r3, [r3, #16]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	7f7b      	ldrb	r3, [r7, #29]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	741a      	strb	r2, [r3, #16]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8000eee:	7f7b      	ldrb	r3, [r7, #29]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	825a      	strh	r2, [r3, #18]

      /* Byte 14 */
      Cid->ManufactDate |= CID_Tab[14];
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	8a5b      	ldrh	r3, [r3, #18]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	7fbb      	ldrb	r3, [r7, #30]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	825a      	strh	r2, [r3, #18]

      /* Byte 15 */
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000f10:	7ffb      	ldrb	r3, [r7, #31]
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	751a      	strb	r2, [r3, #20]
      Cid->Reserved2 = 1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	755a      	strb	r2, [r3, #21]

      retr = BSP_SD_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

  /* Send dummy byte: 8 Clock pulses of delay */
  SD_IO_CSState(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fbb2 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000f2c:	20ff      	movs	r0, #255	; 0xff
 8000f2e:	f000 fbdc 	bl	80016ea <SD_IO_WriteByte>

  /* Return the reponse */
  return retr;
 8000f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <SD_SendCmd>:
  * @param  Crc: The CRC.
  * @param  Answer: SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD status
  */
SD_CmdAnswer_typedef SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	72fb      	strb	r3, [r7, #11]
 8000f50:	4613      	mov	r3, r2
 8000f52:	72bb      	strb	r3, [r7, #10]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <SD_SendCmd+0x140>)
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	6018      	str	r0, [r3, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	7019      	strb	r1, [r3, #0]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f887 3020 	strb.w	r3, [r7, #32]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	0e1b      	lsrs	r3, r3, #24
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Send the command */
  SD_IO_CSState(0);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fb74 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8000fa8:	f107 0118 	add.w	r1, r7, #24
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb88 	bl	80016c8 <SD_IO_WriteReadData>

  switch(Answer)
 8000fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d851      	bhi.n	8001064 <SD_SendCmd+0x124>
 8000fc0:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <SD_SendCmd+0x88>)
 8000fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc6:	bf00      	nop
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000feb 	.word	0x08000feb
 8000fd0:	0800101f 	.word	0x0800101f
 8000fd4:	08001033 	.word	0x08001033
 8000fd8:	08001065 	.word	0x08001065
 8000fdc:	08001033 	.word	0x08001033
  {
  case SD_ANSWER_R1_EXPECTED :
    retr.r1 = SD_ReadData();
 8000fe0:	f000 f986 	bl	80012f0 <SD_ReadData>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	743b      	strb	r3, [r7, #16]
    break;
 8000fe8:	e03d      	b.n	8001066 <SD_SendCmd+0x126>
  case SD_ANSWER_R1B_EXPECTED :
    retr.r1 = SD_ReadData();
 8000fea:	f000 f981 	bl	80012f0 <SD_ReadData>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000ff2:	20ff      	movs	r0, #255	; 0xff
 8000ff4:	f000 fb79 	bl	80016ea <SD_IO_WriteByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	747b      	strb	r3, [r7, #17]
    /* Set CS High */
    SD_IO_CSState(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fb47 	bl	8001690 <SD_IO_CSState>
    HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fc06 	bl	8001814 <HAL_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 fb41 	bl	8001690 <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 800100e:	bf00      	nop
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	f000 fb6a 	bl	80016ea <SD_IO_WriteByte>
 8001016:	4603      	mov	r3, r0
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d1f9      	bne.n	8001010 <SD_SendCmd+0xd0>
    break;
 800101c:	e023      	b.n	8001066 <SD_SendCmd+0x126>
  case SD_ANSWER_R2_EXPECTED :
    retr.r1 = SD_ReadData();
 800101e:	f000 f967 	bl	80012f0 <SD_ReadData>
 8001022:	4603      	mov	r3, r0
 8001024:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f000 fb5f 	bl	80016ea <SD_IO_WriteByte>
 800102c:	4603      	mov	r3, r0
 800102e:	747b      	strb	r3, [r7, #17]
    break;
 8001030:	e019      	b.n	8001066 <SD_SendCmd+0x126>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    retr.r1 = SD_ReadData();
 8001032:	f000 f95d 	bl	80012f0 <SD_ReadData>
 8001036:	4603      	mov	r3, r0
 8001038:	743b      	strb	r3, [r7, #16]
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800103a:	20ff      	movs	r0, #255	; 0xff
 800103c:	f000 fb55 	bl	80016ea <SD_IO_WriteByte>
 8001040:	4603      	mov	r3, r0
 8001042:	747b      	strb	r3, [r7, #17]
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001044:	20ff      	movs	r0, #255	; 0xff
 8001046:	f000 fb50 	bl	80016ea <SD_IO_WriteByte>
 800104a:	4603      	mov	r3, r0
 800104c:	74bb      	strb	r3, [r7, #18]
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	f000 fb4b 	bl	80016ea <SD_IO_WriteByte>
 8001054:	4603      	mov	r3, r0
 8001056:	74fb      	strb	r3, [r7, #19]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	f000 fb46 	bl	80016ea <SD_IO_WriteByte>
 800105e:	4603      	mov	r3, r0
 8001060:	753b      	strb	r3, [r7, #20]
    break;
 8001062:	e000      	b.n	8001066 <SD_SendCmd+0x126>
  default :
    break;
 8001064:	bf00      	nop
  }
  return retr;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	461a      	mov	r2, r3
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	6010      	str	r0, [r2, #0]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	7113      	strb	r3, [r2, #4]
}
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0800655c 	.word	0x0800655c

08001084 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
uint8_t SD_GetDataResponse(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  uint8_t dataresponse;
  uint8_t rvalue = SD_DATA_OTHER_ERROR;
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	71fb      	strb	r3, [r7, #7]

  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800108e:	20ff      	movs	r0, #255	; 0xff
 8001090:	f000 fb2b 	bl	80016ea <SD_IO_WriteByte>
 8001094:	4603      	mov	r3, r0
 8001096:	71bb      	strb	r3, [r7, #6]
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8001098:	20ff      	movs	r0, #255	; 0xff
 800109a:	f000 fb26 	bl	80016ea <SD_IO_WriteByte>

  /* Mask unused bits */
  switch (dataresponse & 0x1F)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2b0b      	cmp	r3, #11
 80010a6:	d014      	beq.n	80010d2 <SD_GetDataResponse+0x4e>
 80010a8:	2b0d      	cmp	r3, #13
 80010aa:	d015      	beq.n	80010d8 <SD_GetDataResponse+0x54>
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d000      	beq.n	80010b2 <SD_GetDataResponse+0x2e>
    break;
  case SD_DATA_WRITE_ERROR:
    rvalue = SD_DATA_WRITE_ERROR;
    break;
  default:
    break;
 80010b0:	e015      	b.n	80010de <SD_GetDataResponse+0x5a>
    rvalue = SD_DATA_OK;
 80010b2:	2305      	movs	r3, #5
 80010b4:	71fb      	strb	r3, [r7, #7]
    SD_IO_CSState(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 faea 	bl	8001690 <SD_IO_CSState>
    SD_IO_CSState(0);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fae7 	bl	8001690 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80010c2:	bf00      	nop
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	f000 fb10 	bl	80016ea <SD_IO_WriteByte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d1f9      	bne.n	80010c4 <SD_GetDataResponse+0x40>
    break;
 80010d0:	e005      	b.n	80010de <SD_GetDataResponse+0x5a>
    rvalue =  SD_DATA_CRC_ERROR;
 80010d2:	230b      	movs	r3, #11
 80010d4:	71fb      	strb	r3, [r7, #7]
    break;
 80010d6:	e002      	b.n	80010de <SD_GetDataResponse+0x5a>
    rvalue = SD_DATA_WRITE_ERROR;
 80010d8:	230d      	movs	r3, #13
 80010da:	71fb      	strb	r3, [r7, #7]
    break;
 80010dc:	bf00      	nop
  }

  /* Return response */
  return rvalue;
 80010de:	79fb      	ldrb	r3, [r7, #7]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
uint8_t SD_GoIdleState(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af02      	add	r7, sp, #8
  SD_CmdAnswer_typedef response;
  __IO uint8_t counter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
     wait for In Idle State Response (R1 Format) equal to 0x01 */
  do{
    counter++;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 80010fc:	f107 0010 	add.w	r0, r7, #16
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2395      	movs	r3, #149	; 0x95
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	f7ff ff19 	bl	8000f40 <SD_SendCmd>
    SD_IO_CSState(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 fabe 	bl	8001690 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001114:	20ff      	movs	r0, #255	; 0xff
 8001116:	f000 fae8 	bl	80016ea <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b63      	cmp	r3, #99	; 0x63
 8001120:	d901      	bls.n	8001126 <SD_GoIdleState+0x3e>
    {
      return BSP_SD_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0dd      	b.n	80012e2 <SD_GoIdleState+0x1fa>
    }
  }
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8001126:	7c3b      	ldrb	r3, [r7, #16]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d1e2      	bne.n	80010f2 <SD_GoIdleState+0xa>


  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
     and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 800112c:	4638      	mov	r0, r7
 800112e:	2305      	movs	r3, #5
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2387      	movs	r3, #135	; 0x87
 8001134:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8001138:	2108      	movs	r1, #8
 800113a:	f7ff ff01 	bl	8000f40 <SD_SendCmd>
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	463a      	mov	r2, r7
 8001144:	6810      	ldr	r0, [r2, #0]
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	7912      	ldrb	r2, [r2, #4]
 800114a:	711a      	strb	r2, [r3, #4]
  SD_IO_CSState(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fa9f 	bl	8001690 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001152:	20ff      	movs	r0, #255	; 0xff
 8001154:	f000 fac9 	bl	80016ea <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8001158:	7c3b      	ldrb	r3, [r7, #16]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d030      	beq.n	80011c4 <SD_GoIdleState+0xdc>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001162:	4638      	mov	r0, r7
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	2200      	movs	r2, #0
 800116c:	2137      	movs	r1, #55	; 0x37
 800116e:	f7ff fee7 	bl	8000f40 <SD_SendCmd>
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	463a      	mov	r2, r7
 8001178:	6810      	ldr	r0, [r2, #0]
 800117a:	6018      	str	r0, [r3, #0]
 800117c:	7912      	ldrb	r2, [r2, #4]
 800117e:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fa85 	bl	8001690 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001186:	20ff      	movs	r0, #255	; 0xff
 8001188:	f000 faaf 	bl	80016ea <SD_IO_WriteByte>

      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800118c:	4638      	mov	r0, r7
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	2200      	movs	r2, #0
 8001196:	2129      	movs	r1, #41	; 0x29
 8001198:	f7ff fed2 	bl	8000f40 <SD_SendCmd>
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	463a      	mov	r2, r7
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	6018      	str	r0, [r3, #0]
 80011a6:	7912      	ldrb	r2, [r2, #4]
 80011a8:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 fa70 	bl	8001690 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011b0:	20ff      	movs	r0, #255	; 0xff
 80011b2:	f000 fa9a 	bl	80016ea <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80011b6:	7c3b      	ldrb	r3, [r7, #16]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d0d2      	beq.n	8001162 <SD_GoIdleState+0x7a>
    flag_SDHC = 0;
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <SD_GoIdleState+0x204>)
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	e08d      	b.n	80012e0 <SD_GoIdleState+0x1f8>
  }
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f040 8088 	bne.w	80012dc <SD_GoIdleState+0x1f4>
  {
      /* initialise card V2 */
    do {

      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80011cc:	4638      	mov	r0, r7
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	2200      	movs	r2, #0
 80011d6:	2137      	movs	r1, #55	; 0x37
 80011d8:	f7ff feb2 	bl	8000f40 <SD_SendCmd>
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	463a      	mov	r2, r7
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	6018      	str	r0, [r3, #0]
 80011e6:	7912      	ldrb	r2, [r2, #4]
 80011e8:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 fa50 	bl	8001690 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80011f0:	20ff      	movs	r0, #255	; 0xff
 80011f2:	f000 fa7a 	bl	80016ea <SD_IO_WriteByte>

      /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80011f6:	4638      	mov	r0, r7
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	23ff      	movs	r3, #255	; 0xff
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	2129      	movs	r1, #41	; 0x29
 8001204:	f7ff fe9c 	bl	8000f40 <SD_SendCmd>
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	463a      	mov	r2, r7
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	7912      	ldrb	r2, [r2, #4]
 8001214:	711a      	strb	r2, [r3, #4]
      SD_IO_CSState(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 fa3a 	bl	8001690 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800121c:	20ff      	movs	r0, #255	; 0xff
 800121e:	f000 fa64 	bl	80016ea <SD_IO_WriteByte>
    }
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d0d1      	beq.n	80011cc <SD_GoIdleState+0xe4>

    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8001228:	7c3b      	ldrb	r3, [r7, #16]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d031      	beq.n	8001296 <SD_GoIdleState+0x1ae>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001232:	4638      	mov	r0, r7
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	2200      	movs	r2, #0
 800123c:	2137      	movs	r1, #55	; 0x37
 800123e:	f7ff fe7f 	bl	8000f40 <SD_SendCmd>
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	463a      	mov	r2, r7
 8001248:	6810      	ldr	r0, [r2, #0]
 800124a:	6018      	str	r0, [r3, #0]
 800124c:	7912      	ldrb	r2, [r2, #4]
 800124e:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fa1d 	bl	8001690 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001256:	20ff      	movs	r0, #255	; 0xff
 8001258:	f000 fa47 	bl	80016ea <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d001      	beq.n	8001266 <SD_GoIdleState+0x17e>
        {
          return BSP_SD_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e03d      	b.n	80012e2 <SD_GoIdleState+0x1fa>
        }
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001266:	4638      	mov	r0, r7
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	23ff      	movs	r3, #255	; 0xff
 800126e:	2200      	movs	r2, #0
 8001270:	2129      	movs	r1, #41	; 0x29
 8001272:	f7ff fe65 	bl	8000f40 <SD_SendCmd>
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	463a      	mov	r2, r7
 800127c:	6810      	ldr	r0, [r2, #0]
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	7912      	ldrb	r2, [r2, #4]
 8001282:	711a      	strb	r2, [r3, #4]
        SD_IO_CSState(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fa03 	bl	8001690 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 800128a:	20ff      	movs	r0, #255	; 0xff
 800128c:	f000 fa2d 	bl	80016ea <SD_IO_WriteByte>
      }
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001290:	7c3b      	ldrb	r3, [r7, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d0cd      	beq.n	8001232 <SD_GoIdleState+0x14a>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8001296:	4638      	mov	r0, r7
 8001298:	2303      	movs	r3, #3
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	23ff      	movs	r3, #255	; 0xff
 800129e:	2200      	movs	r2, #0
 80012a0:	213a      	movs	r1, #58	; 0x3a
 80012a2:	f7ff fe4d 	bl	8000f40 <SD_SendCmd>
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	463a      	mov	r2, r7
 80012ac:	6810      	ldr	r0, [r2, #0]
 80012ae:	6018      	str	r0, [r3, #0]
 80012b0:	7912      	ldrb	r2, [r2, #4]
 80012b2:	711a      	strb	r2, [r3, #4]
    SD_IO_CSState(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 f9eb 	bl	8001690 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80012ba:	20ff      	movs	r0, #255	; 0xff
 80012bc:	f000 fa15 	bl	80016ea <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 80012c0:	7c3b      	ldrb	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SD_GoIdleState+0x1e2>
    {
      return BSP_SD_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00b      	b.n	80012e2 <SD_GoIdleState+0x1fa>
    }
    flag_SDHC = (response.r2 & 0x40) >> 6;
 80012ca:	7c7b      	ldrb	r3, [r7, #17]
 80012cc:	119b      	asrs	r3, r3, #6
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SD_GoIdleState+0x204>)
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	e001      	b.n	80012e0 <SD_GoIdleState+0x1f8>
  }
  else
  {
    return BSP_SD_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <SD_GoIdleState+0x1fa>
  }

  return BSP_SD_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000ae 	.word	0x200000ae

080012f0 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  uint8_t timeout = 0x08;
 80012f6:	2308      	movs	r3, #8
 80012f8:	71fb      	strb	r3, [r7, #7]
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80012fa:	20ff      	movs	r0, #255	; 0xff
 80012fc:	f000 f9f5 	bl	80016ea <SD_IO_WriteByte>
 8001300:	4603      	mov	r3, r0
 8001302:	71bb      	strb	r3, [r7, #6]
    timeout--;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	3b01      	subs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2bff      	cmp	r3, #255	; 0xff
 800130e:	d102      	bne.n	8001316 <SD_ReadData+0x26>
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f1      	bne.n	80012fa <SD_ReadData+0xa>

  /* Right response got */
  return readvalue;
 8001316:	79bb      	ldrb	r3, [r7, #6]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 800132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132e:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001330:	20ff      	movs	r0, #255	; 0xff
 8001332:	f000 f9da 	bl	80016ea <SD_IO_WriteByte>
 8001336:	4603      	mov	r3, r0
 8001338:	737b      	strb	r3, [r7, #13]
    timeout--;
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	3b01      	subs	r3, #1
 800133e:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != data) && timeout);
 8001340:	7b7a      	ldrb	r2, [r7, #13]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	429a      	cmp	r2, r3
 8001346:	d002      	beq.n	800134e <SD_WaitData+0x2e>
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <SD_WaitData+0x10>

  if (timeout == 0)
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <SD_WaitData+0x38>
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8001354:	2302      	movs	r3, #2
 8001356:	e000      	b.n	800135a <SD_WaitData+0x3a>
  }

  /* Right response got */
  return BSP_SD_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4313      	orrs	r3, r2
 8001378:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff ffbd 	bl	8001362 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <BSP_LED_Init+0x6c>)
 80013ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <BSP_LED_Init+0x70>)
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fb07 	bl	8001a20 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <BSP_LED_Init+0x70>)
 8001416:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <BSP_LED_Init+0x6c>)
 800141e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	f000 fc6b 	bl	8001d00 <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08006698 	.word	0x08006698
 8001438:	20000008 	.word	0x20000008

0800143c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <BSP_LED_On+0x2c>)
 800144a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <BSP_LED_On+0x30>)
 8001452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	f000 fc51 	bl	8001d00 <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	08006698 	.word	0x08006698

08001470 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <BSP_LED_Off+0x2c>)
 800147e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <BSP_LED_Off+0x30>)
 8001486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	f000 fc37 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008
 80014a0:	08006698 	.word	0x08006698

080014a4 <SPIx_MspInit>:
/**
  * @brief  Initialize SPI MSP.
  * @retval None
  */
static void SPIx_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ff52 	bl	8001362 <LL_AHB2_GRP1_EnableClock>
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff ff4f 	bl	8001362 <LL_AHB2_GRP1_EnableClock>

  /* Configure SPI SCK */
  gpioinitstruct.Pin        = NUCLEO_SPIx_SCK_PIN;
 80014c4:	2320      	movs	r3, #32
 80014c6:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Pull       = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Alternate  = NUCLEO_SPIx_SCK_AF;
 80014d4:	2305      	movs	r3, #5
 80014d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e0:	f000 fa9e 	bl	8001a20 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  gpioinitstruct.Pin        = NUCLEO_SPIx_MOSI_PIN;
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Alternate  = NUCLEO_SPIx_MISO_MOSI_AF;
 80014e8:	2305      	movs	r3, #5
 80014ea:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Pull       = GPIO_PULLDOWN;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f000 fa92 	bl	8001a20 <HAL_GPIO_Init>
  
  gpioinitstruct.Pin        = NUCLEO_SPIx_MISO_PIN;
 80014fc:	2340      	movs	r3, #64	; 0x40
 80014fe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f000 fa8a 	bl	8001a20 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 800150c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001510:	f7ff ff40 	bl	8001394 <LL_APB2_GRP1_EnableClock>
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001520:	481c      	ldr	r0, [pc, #112]	; (8001594 <SPIx_Init+0x78>)
 8001522:	f002 f84a 	bl	80035ba <HAL_SPI_GetState>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d131      	bne.n	8001590 <SPIx_Init+0x74>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <SPIx_Init+0x78>)
 800152e:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <SPIx_Init+0x7c>)
 8001530:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 32 MHz 
       */
    hnucleo_Spi.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_4;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <SPIx_Init+0x78>)
 8001534:	2208      	movs	r2, #8
 8001536:	61da      	str	r2, [r3, #28]
    hnucleo_Spi.Init.Direction          = SPI_DIRECTION_2LINES;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <SPIx_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
    hnucleo_Spi.Init.CLKPhase           = SPI_PHASE_2EDGE;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <SPIx_Init+0x78>)
 8001540:	2201      	movs	r2, #1
 8001542:	615a      	str	r2, [r3, #20]
    hnucleo_Spi.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <SPIx_Init+0x78>)
 8001546:	2202      	movs	r2, #2
 8001548:	611a      	str	r2, [r3, #16]
    hnucleo_Spi.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLE;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SPIx_Init+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Spi.Init.CRCPolynomial      = 7;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SPIx_Init+0x78>)
 8001552:	2207      	movs	r2, #7
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Spi.Init.CRCLength          = SPI_CRC_LENGTH_DATASIZE;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SPIx_Init+0x78>)
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
    hnucleo_Spi.Init.DataSize           = SPI_DATASIZE_8BIT;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <SPIx_Init+0x78>)
 800155e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001562:	60da      	str	r2, [r3, #12]
    hnucleo_Spi.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <SPIx_Init+0x78>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
    hnucleo_Spi.Init.NSS                = SPI_NSS_SOFT;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SPIx_Init+0x78>)
 800156c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001570:	619a      	str	r2, [r3, #24]
    hnucleo_Spi.Init.NSSPMode           = SPI_NSS_PULSE_DISABLE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <SPIx_Init+0x78>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
    hnucleo_Spi.Init.TIMode             = SPI_TIMODE_DISABLE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SPIx_Init+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Spi.Init.Mode               = SPI_MODE_MASTER;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SPIx_Init+0x78>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit();
 8001586:	f7ff ff8d 	bl	80014a4 <SPIx_MspInit>
    HAL_SPI_Init(&hnucleo_Spi);
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <SPIx_Init+0x78>)
 800158c:	f001 fd3c 	bl	8003008 <HAL_SPI_Init>
  }
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000b0 	.word	0x200000b0
 8001598:	40013000 	.word	0x40013000

0800159c <SPIx_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, hnucleo_SpixTimeout);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <SPIx_WriteReadData+0x3c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4613      	mov	r3, r2
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <SPIx_WriteReadData+0x40>)
 80015be:	f001 fde9 	bl	8003194 <HAL_SPI_TransmitReceive>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SPIx_WriteReadData+0x34>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 80015cc:	f000 f808 	bl	80015e0 <SPIx_Error>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000014 	.word	0x20000014
 80015dc:	200000b0 	.word	0x200000b0

080015e0 <SPIx_Error>:
/**
  * @brief  SPI error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <SPIx_Error+0x14>)
 80015e6:	f001 fd99 	bl	800311c <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 80015ea:	f7ff ff97 	bl	800151c <SPIx_Init>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000b0 	.word	0x200000b0

080015f8 <SD_IO_Init>:
  * @brief  Initialize the SD Card and put it into StandBy State (Ready for 
  *         data transfer).
  * @retval None
  */
void SD_IO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  uint8_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	75fb      	strb	r3, [r7, #23]

  /* SD_CS_GPIO Periph clock enable */
  SD_CS_GPIO_CLK_ENABLE();
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff fea6 	bl	8001362 <LL_AHB2_GRP1_EnableClock>

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  gpioinitstruct.Pin    = SD_CS_PIN;
 8001616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161a:	603b      	str	r3, [r7, #0]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <SD_IO_Init+0x94>)
 800162e:	f000 f9f7 	bl	8001a20 <HAL_GPIO_Init>

  /* Configure LCD_CS_PIN pin: LCD Card CS pin */
  gpioinitstruct.Pin   = LCD_CS_PIN;
 8001632:	2310      	movs	r3, #16
 8001634:	603b      	str	r3, [r7, #0]
  gpioinitstruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
  gpioinitstruct.Pull  = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpioinitstruct);
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 f9e9 	bl	8001a20 <HAL_GPIO_Init>
  LCD_CS_HIGH();
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fb53 	bl	8001d00 <HAL_GPIO_WritePin>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  SPIx_Init();
 800165a:	f7ff ff5f 	bl	800151c <SPIx_Init>

  /* SD chip select high */
  SD_CS_HIGH();
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <SD_IO_Init+0x94>)
 8001666:	f000 fb4b 	bl	8001d00 <HAL_GPIO_WritePin>
  
  /* Send dummy byte 0xFF, 10 times with CS high */
  /* Rise CS and MOSI for 80 clocks cycles */
  for (counter = 0; counter <= 9; counter++)
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
 800166e:	e005      	b.n	800167c <SD_IO_Init+0x84>
  {
    /* Send dummy byte 0xFF */
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001670:	20ff      	movs	r0, #255	; 0xff
 8001672:	f000 f83a 	bl	80016ea <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	3301      	adds	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b09      	cmp	r3, #9
 8001680:	d9f6      	bls.n	8001670 <SD_IO_Init+0x78>
  }
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	48000800 	.word	0x48000800

08001690 <SD_IO_CSState>:
  * @brief  Set SD interface Chip Select state
  * @param  val: 0 (low) or 1 (high) state
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if(val == 1) 
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <SD_IO_CSState+0x1e>
  {
    SD_CS_HIGH();
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <SD_IO_CSState+0x34>)
 80016a8:	f000 fb2a 	bl	8001d00 <HAL_GPIO_WritePin>
  }
  else
  {
    SD_CS_LOW();
  }
}
 80016ac:	e005      	b.n	80016ba <SD_IO_CSState+0x2a>
    SD_CS_LOW();
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <SD_IO_CSState+0x34>)
 80016b6:	f000 fb23 	bl	8001d00 <HAL_GPIO_WritePin>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	48000800 	.word	0x48000800

080016c8 <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	4613      	mov	r3, r2
 80016d4:	80fb      	strh	r3, [r7, #6]
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	461a      	mov	r2, r3
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff5d 	bl	800159c <SPIx_WriteReadData>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 80016f4:	f107 010f 	add.w	r1, r7, #15
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	2201      	movs	r2, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff4d 	bl	800159c <SPIx_WriteReadData>
  return tmp;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_Init+0x3c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x3c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f94a 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001728:	2000      	movs	r0, #0
 800172a:	f000 f80f 	bl	800174c <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	e001      	b.n	800173e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173a:	f7fe fe43 	bl	80003c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173e:	79fb      	ldrb	r3, [r7, #7]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	58004000 	.word	0x58004000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_InitTick+0x6c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8001760:	f001 fb86 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8001764:	4601      	mov	r1, r0
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_InitTick+0x6c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	fbb1 f3f3 	udiv	r3, r1, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f945 	bl	8001a06 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d809      	bhi.n	800179c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f91f 	bl	80019d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001794:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_InitTick+0x70>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e007      	b.n	80017ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e004      	b.n	80017ac <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e001      	b.n	80017ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000001c 	.word	0x2000001c
 80017bc:	20000018 	.word	0x20000018

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x1c>)
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000154 	.word	0x20000154
 80017e0:	2000001c 	.word	0x2000001c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000154 	.word	0x20000154

080017fc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTickPrio+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000018 	.word	0x20000018

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffe2 	bl	80017e4 <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d004      	beq.n	8001838 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_Delay+0x40>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001838:	bf00      	nop
 800183a:	f7ff ffd3 	bl	80017e4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	429a      	cmp	r2, r3
 8001848:	d8f7      	bhi.n	800183a <HAL_Delay+0x26>
    {
    }
  }
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000001c 	.word	0x2000001c

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff5e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff90 	bl	8001910 <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5f 	bl	80018bc <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffb2 	bl	8001978 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e14c      	b.n	8001cca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 813e 	beq.w	8001cc4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x38>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d123      	bne.n	8001aa0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	6939      	ldr	r1, [r7, #16]
 8001a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0203 	and.w	r2, r3, #3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d00b      	beq.n	8001af4 <HAL_GPIO_Init+0xd4>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae8:	2b11      	cmp	r3, #17
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b12      	cmp	r3, #18
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0201 	and.w	r2, r3, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8098 	beq.w	8001cc4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbe:	d019      	beq.n	8001bf4 <HAL_GPIO_Init+0x1d4>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_GPIO_Init+0x1d0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00d      	beq.n	8001bec <HAL_GPIO_Init+0x1cc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <HAL_GPIO_Init+0x1c8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_GPIO_Init+0x2d8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_GPIO_Init+0x1c4>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001be4:	2307      	movs	r3, #7
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4938      	ldr	r1, [pc, #224]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3a:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f aeab 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	48001000 	.word	0x48001000
 8001cfc:	58000800 	.word	0x58000800

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	58000400 	.word	0x58000400

08001d50 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	58000400 	.word	0x58000400

08001d6c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d7e:	d101      	bne.n	8001d84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_HSE_IsReady+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_HSE_IsReady+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d101      	bne.n	8001e80 <LL_RCC_HSI_IsReady+0x18>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <LL_RCC_HSI_IsReady+0x1a>
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d101      	bne.n	8001f12 <LL_RCC_HSI48_IsReady+0x18>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <LL_RCC_HSI48_IsReady+0x1a>
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d101      	bne.n	8001fbe <LL_RCC_LSE_IsReady+0x18>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_RCC_LSE_IsReady+0x1a>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d101      	bne.n	8002026 <LL_RCC_LSI1_IsReady+0x18>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_RCC_LSI1_IsReady+0x1a>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d101      	bne.n	800208e <LL_RCC_LSI2_IsReady+0x18>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_RCC_LSI2_IsReady+0x1a>
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d101      	bne.n	800211a <LL_RCC_MSI_IsReady+0x16>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_RCC_MSI_IsReady+0x18>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800215e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2bb0      	cmp	r3, #176	; 0xb0
 8002164:	d901      	bls.n	800216a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002166:	23b0      	movs	r3, #176	; 0xb0
 8002168:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800216a:	687b      	ldr	r3, [r7, #4]
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 0203 	bic.w	r2, r3, #3
 80021b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002216:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800221a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002246:	f023 020f 	bic.w	r2, r3, #15
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002336:	d101      	bne.n	800233c <LL_RCC_PLL_IsReady+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_RCC_PLL_IsReady+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0303 	and.w	r3, r3, #3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d101      	bne.n	80023c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e2:	d101      	bne.n	80023e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d101      	bne.n	800240e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800242c:	d101      	bne.n	8002432 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002450:	d101      	bne.n	8002456 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e34b      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 808f 	beq.w	80025a2 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002484:	f7ff fea1 	bl	80021ca <LL_RCC_GetSysClkSource>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800248a:	f7ff ff82 	bl	8002392 <LL_RCC_PLL_GetMainSource>
 800248e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3e>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d149      	bne.n	8002530 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d146      	bne.n	8002530 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a2:	f7ff fe2f 	bl	8002104 <LL_RCC_MSI_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e32a      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80024bc:	f7ff fe47 	bl	800214e <LL_RCC_MSI_GetRange>
 80024c0:	4603      	mov	r3, r0
 80024c2:	429c      	cmp	r4, r3
 80024c4:	d914      	bls.n	80024f0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fce4 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e319      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fe21 	bl	8002126 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe45 	bl	8002178 <LL_RCC_MSI_SetCalibTrimming>
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe16 	bl	8002126 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe3a 	bl	8002178 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fcc5 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e2fa      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002518:	f7fd ffe0 	bl	80004dc <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800251c:	4bb4      	ldr	r3, [pc, #720]	; (80027f0 <HAL_RCC_OscConfig+0x38c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f913 	bl	800174c <HAL_InitTick>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d039      	beq.n	80025a0 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e2ee      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01e      	beq.n	8002576 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002538:	f7ff fdc6 	bl	80020c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253c:	f7ff f952 	bl	80017e4 <HAL_GetTick>
 8002540:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002544:	f7ff f94e 	bl	80017e4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e2db      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002556:	f7ff fdd5 	bl	8002104 <LL_RCC_MSI_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f1      	beq.n	8002544 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fdde 	bl	8002126 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe02 	bl	8002178 <LL_RCC_MSI_SetCalibTrimming>
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002576:	f7ff fdb6 	bl	80020e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800257a:	f7ff f933 	bl	80017e4 <HAL_GetTick>
 800257e:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002582:	f7ff f92f 	bl	80017e4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e2bc      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002594:	f7ff fdb6 	bl	8002104 <LL_RCC_MSI_IsReady>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f1      	bne.n	8002582 <HAL_RCC_OscConfig+0x11e>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d05a      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ae:	f7ff fe0c 	bl	80021ca <LL_RCC_GetSysClkSource>
 80025b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b4:	f7ff feed 	bl	8002392 <LL_RCC_PLL_GetMainSource>
 80025b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x168>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d10d      	bne.n	80025e2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d10a      	bne.n	80025e2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	f7ff fc1c 	bl	8001e08 <LL_RCC_HSE_IsReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d045      	beq.n	8002662 <HAL_RCC_OscConfig+0x1fe>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d141      	bne.n	8002662 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e295      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x18e>
 80025ec:	f7ff fbee 	bl	8001dcc <LL_RCC_HSE_Enable>
 80025f0:	e00d      	b.n	800260e <HAL_RCC_OscConfig+0x1aa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fa:	d104      	bne.n	8002606 <HAL_RCC_OscConfig+0x1a2>
 80025fc:	f7ff fbc8 	bl	8001d90 <LL_RCC_HSE_EnableBypass>
 8002600:	f7ff fbe4 	bl	8001dcc <LL_RCC_HSE_Enable>
 8002604:	e003      	b.n	800260e <HAL_RCC_OscConfig+0x1aa>
 8002606:	f7ff fbf0 	bl	8001dea <LL_RCC_HSE_Disable>
 800260a:	f7ff fbd0 	bl	8001dae <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff f8e5 	bl	80017e4 <HAL_GetTick>
 800261a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261e:	f7ff f8e1 	bl	80017e4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e26e      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002630:	f7ff fbea 	bl	8001e08 <LL_RCC_HSE_IsReady>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f1      	beq.n	800261e <HAL_RCC_OscConfig+0x1ba>
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f8d2 	bl	80017e4 <HAL_GetTick>
 8002640:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff f8ce 	bl	80017e4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e25b      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002656:	f7ff fbd7 	bl	8001e08 <LL_RCC_HSE_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f1      	bne.n	8002644 <HAL_RCC_OscConfig+0x1e0>
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002662:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d051      	beq.n	8002714 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002670:	f7ff fdab 	bl	80021ca <LL_RCC_GetSysClkSource>
 8002674:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002676:	f7ff fe8c 	bl	8002392 <LL_RCC_PLL_GetMainSource>
 800267a:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x22a>
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	d113      	bne.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d110      	bne.n	80026b0 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268e:	f7ff fbeb 	bl	8001e68 <LL_RCC_HSI_IsReady>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_OscConfig+0x240>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e234      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fbef 	bl	8001e8c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ae:	e031      	b.n	8002714 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	f7ff fbb8 	bl	8001e2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f892 	bl	80017e4 <HAL_GetTick>
 80026c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7ff f88e 	bl	80017e4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e21b      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80026d6:	f7ff fbc7 	bl	8001e68 <LL_RCC_HSI_IsReady>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f1      	beq.n	80026c4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fbd1 	bl	8001e8c <LL_RCC_HSI_SetCalibTrimming>
 80026ea:	e013      	b.n	8002714 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ec:	f7ff fbad 	bl	8001e4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff f878 	bl	80017e4 <HAL_GetTick>
 80026f4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f8:	f7ff f874 	bl	80017e4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e201      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800270a:	f7ff fbad 	bl	8001e68 <LL_RCC_HSI_IsReady>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f1      	bne.n	80026f8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a2 	beq.w	8002872 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d046      	beq.n	80027d0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002742:	f7ff fc64 	bl	800200e <LL_RCC_LSI1_IsReady>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800274c:	f7ff fc3d 	bl	8001fca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002750:	f7ff f848 	bl	80017e4 <HAL_GetTick>
 8002754:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002758:	f7ff f844 	bl	80017e4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1d1      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800276a:	f7ff fc50 	bl	800200e <LL_RCC_LSI1_IsReady>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f1      	beq.n	8002758 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002774:	f7ff fc5d 	bl	8002032 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff f834 	bl	80017e4 <HAL_GetTick>
 800277c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002780:	f7ff f830 	bl	80017e4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b03      	cmp	r3, #3
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1bd      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002792:	f7ff fc70 	bl	8002076 <LL_RCC_LSI2_IsReady>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f1      	beq.n	8002780 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc7a 	bl	800209a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80027a6:	f7ff fc21 	bl	8001fec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff f81b 	bl	80017e4 <HAL_GetTick>
 80027ae:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027b2:	f7ff f817 	bl	80017e4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1a4      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80027c4:	f7ff fc23 	bl	800200e <LL_RCC_LSI1_IsReady>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f1      	bne.n	80027b2 <HAL_RCC_OscConfig+0x34e>
 80027ce:	e050      	b.n	8002872 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80027d0:	f7ff fbfb 	bl	8001fca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff f806 	bl	80017e4 <HAL_GetTick>
 80027d8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027dc:	f7ff f802 	bl	80017e4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d904      	bls.n	80027f4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e18f      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
 80027ee:	bf00      	nop
 80027f0:	20000018 	.word	0x20000018
        while (LL_RCC_LSI1_IsReady() == 0U)
 80027f4:	f7ff fc0b 	bl	800200e <LL_RCC_LSI1_IsReady>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80027fe:	f7ff fc29 	bl	8002054 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002804:	f7fe ffee 	bl	80017e4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e17b      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002816:	f7ff fc2e 	bl	8002076 <LL_RCC_LSI2_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f1      	bne.n	8002804 <HAL_RCC_OscConfig+0x3a0>
 8002820:	e027      	b.n	8002872 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002822:	f7ff fc17 	bl	8002054 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe ffdd 	bl	80017e4 <HAL_GetTick>
 800282a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800282e:	f7fe ffd9 	bl	80017e4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e166      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002840:	f7ff fc19 	bl	8002076 <LL_RCC_LSI2_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f1      	bne.n	800282e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800284a:	f7ff fbcf 	bl	8001fec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe ffc9 	bl	80017e4 <HAL_GetTick>
 8002852:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002856:	f7fe ffc5 	bl	80017e4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e152      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002868:	f7ff fbd1 	bl	800200e <LL_RCC_LSI1_IsReady>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f1      	bne.n	8002856 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d05b      	beq.n	8002936 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287e:	4ba6      	ldr	r3, [pc, #664]	; (8002b18 <HAL_RCC_OscConfig+0x6b4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d114      	bne.n	80028b4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800288a:	f7ff fa51 	bl	8001d30 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe ffa9 	bl	80017e4 <HAL_GetTick>
 8002892:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe ffa5 	bl	80017e4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e132      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a8:	4b9b      	ldr	r3, [pc, #620]	; (8002b18 <HAL_RCC_OscConfig+0x6b4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_RCC_OscConfig+0x45e>
 80028bc:	f7ff fb2f 	bl	8001f1e <LL_RCC_LSE_Enable>
 80028c0:	e00c      	b.n	80028dc <HAL_RCC_OscConfig+0x478>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d104      	bne.n	80028d4 <HAL_RCC_OscConfig+0x470>
 80028ca:	f7ff fb4a 	bl	8001f62 <LL_RCC_LSE_EnableBypass>
 80028ce:	f7ff fb26 	bl	8001f1e <LL_RCC_LSE_Enable>
 80028d2:	e003      	b.n	80028dc <HAL_RCC_OscConfig+0x478>
 80028d4:	f7ff fb34 	bl	8001f40 <LL_RCC_LSE_Disable>
 80028d8:	f7ff fb54 	bl	8001f84 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d014      	beq.n	800290e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe ff7e 	bl	80017e4 <HAL_GetTick>
 80028e8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe ff7a 	bl	80017e4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e105      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002902:	f7ff fb50 	bl	8001fa6 <LL_RCC_LSE_IsReady>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x488>
 800290c:	e013      	b.n	8002936 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe ff69 	bl	80017e4 <HAL_GetTick>
 8002912:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe ff65 	bl	80017e4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0f0      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800292c:	f7ff fb3b 	bl	8001fa6 <LL_RCC_LSE_IsReady>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ef      	bne.n	8002916 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02c      	beq.n	800299c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d014      	beq.n	8002974 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800294a:	f7ff fab4 	bl	8001eb6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe ff49 	bl	80017e4 <HAL_GetTick>
 8002952:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002956:	f7fe ff45 	bl	80017e4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0d2      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002968:	f7ff fac7 	bl	8001efa <LL_RCC_HSI48_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f1      	beq.n	8002956 <HAL_RCC_OscConfig+0x4f2>
 8002972:	e013      	b.n	800299c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002974:	f7ff fab0 	bl	8001ed8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe ff34 	bl	80017e4 <HAL_GetTick>
 800297c:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002980:	f7fe ff30 	bl	80017e4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0bd      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002992:	f7ff fab2 	bl	8001efa <LL_RCC_HSI48_IsReady>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f1      	bne.n	8002980 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b3 	beq.w	8002b0c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a6:	f7ff fc10 	bl	80021ca <LL_RCC_GetSysClkSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d076      	beq.n	8002a9e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d14b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b8:	f7ff fca5 	bl	8002306 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe ff12 	bl	80017e4 <HAL_GetTick>
 80029c0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe ff0e 	bl	80017e4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e09b      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80029d6:	f7ff fca5 	bl	8002324 <LL_RCC_PLL_IsReady>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f1      	bne.n	80029c4 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <HAL_RCC_OscConfig+0x6b8>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f8:	0212      	lsls	r2, r2, #8
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a16:	f7ff fc67 	bl	80022e8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fedb 	bl	80017e4 <HAL_GetTick>
 8002a2e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fed7 	bl	80017e4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e064      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a44:	f7ff fc6e 	bl	8002324 <LL_RCC_PLL_IsReady>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_OscConfig+0x5ce>
 8002a4e:	e05d      	b.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	f7ff fc59 	bl	8002306 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe feb4 	bl	80017e4 <HAL_GetTick>
 8002a7c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe feb0 	bl	80017e4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e03d      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a92:	f7ff fc47 	bl	8002324 <LL_RCC_PLL_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f1      	bne.n	8002a80 <HAL_RCC_OscConfig+0x61c>
 8002a9c:	e036      	b.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e031      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0203 	and.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d123      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d114      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10d      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	372c      	adds	r7, #44	; 0x2c
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	58000400 	.word	0x58000400
 8002b1c:	11c1808c 	.word	0x11c1808c

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e12a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b97      	ldr	r3, [pc, #604]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d91b      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4992      	ldr	r1, [pc, #584]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b52:	f7fe fe47 	bl	80017e4 <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b5a:	f7fe fe43 	bl	80017e4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e10e      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6c:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb29 	bl	80021e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fe28 	bl	80017e4 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b98:	f7fe fe24 	bl	80017e4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0ef      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002baa:	f7ff fbfe 	bl	80023aa <LL_RCC_IsActiveFlag_HPRE>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f1      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fb20 	bl	800220a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bca:	f7fe fe0b 	bl	80017e4 <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bd2:	f7fe fe07 	bl	80017e4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0d2      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002be4:	f7ff fbf3 	bl	80023ce <LL_RCC_IsActiveFlag_C2HPRE>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f1      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb19 	bl	8002236 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fdee 	bl	80017e4 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c0c:	f7fe fdea 	bl	80017e4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b5      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c1e:	f7ff fbe9 	bl	80023f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f1      	beq.n	8002c0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d016      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fb13 	bl	8002264 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fdd1 	bl	80017e4 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c46:	f7fe fdcd 	bl	80017e4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e098      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c58:	f7ff fbdf 	bl	800241a <LL_RCC_IsActiveFlag_PPRE1>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f1      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d017      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fb09 	bl	800228c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fdb3 	bl	80017e4 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c82:	f7fe fdaf 	bl	80017e4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e07a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c94:	f7ff fbd3 	bl	800243e <LL_RCC_IsActiveFlag_PPRE2>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f1      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d043      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002cb2:	f7ff f8a9 	bl	8001e08 <LL_RCC_HSE_IsReady>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11e      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e064      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002cc8:	f7ff fb2c 	bl	8002324 <LL_RCC_PLL_IsReady>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d113      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e059      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002cde:	f7ff fa11 	bl	8002104 <LL_RCC_MSI_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e04e      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002cec:	f7ff f8bc 	bl	8001e68 <LL_RCC_HSI_IsReady>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e047      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fa4f 	bl	80021a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fd6e 	bl	80017e4 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fd6a 	bl	80017e4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e033      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	f7ff fa52 	bl	80021ca <LL_RCC_GetSysClkSource>
 8002d26:	4602      	mov	r2, r0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1ec      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d21b      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 0207 	bic.w	r2, r3, #7
 8002d48:	4912      	ldr	r1, [pc, #72]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fe fd48 	bl	80017e4 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d58:	f7fe fd44 	bl	80017e4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e00f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1ef      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002d78:	f7fd fbb0 	bl	80004dc <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002d7c:	f7fe fd3e 	bl	80017fc <HAL_GetTickPrio>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fce2 	bl	800174c <HAL_InitTick>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	58004000 	.word	0x58004000

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	f7ff fa14 	bl	80021ca <LL_RCC_GetSysClkSource>
 8002da2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002daa:	f7ff f9d0 	bl	800214e <LL_RCC_MSI_GetRange>
 8002dae:	4603      	mov	r3, r0
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e04a      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e044      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d10a      	bne.n	8002de8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002dd2:	f7fe ffcb 	bl	8001d6c <LL_RCC_HSE_IsEnabledDiv2>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e039      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e036      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002de8:	f7ff fad3 	bl	8002392 <LL_RCC_PLL_GetMainSource>
 8002dec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d002      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x62>
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d003      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x68>
 8002df8:	e00d      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dfc:	60bb      	str	r3, [r7, #8]
        break;
 8002dfe:	e015      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e00:	f7fe ffb4 	bl	8001d6c <LL_RCC_HSE_IsEnabledDiv2>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e0c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e0e:	e00d      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e12:	60bb      	str	r3, [r7, #8]
        break;
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e16:	f7ff f99a 	bl	800214e <LL_RCC_MSI_GetRange>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	60bb      	str	r3, [r7, #8]
        break;
 8002e2a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002e2c:	f7ff fa8c 	bl	8002348 <LL_RCC_PLL_GetN>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	fb03 f402 	mul.w	r4, r3, r2
 8002e38:	f7ff fa9f 	bl	800237a <LL_RCC_PLL_GetDivider>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	3301      	adds	r3, #1
 8002e42:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e46:	f7ff fa8c 	bl	8002362 <LL_RCC_PLL_GetR>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	0f5b      	lsrs	r3, r3, #29
 8002e4e:	3301      	adds	r3, #1
 8002e50:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	08006658 	.word	0x08006658
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	003d0900 	.word	0x003d0900
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b598      	push	{r3, r4, r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e74:	f7ff ff90 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002e78:	4604      	mov	r4, r0
 8002e7a:	f7ff fa1b 	bl	80022b4 <LL_RCC_GetAHBPrescaler>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x24>)
 8002e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd98      	pop	{r3, r4, r7, pc}
 8002e94:	08006618 	.word	0x08006618

08002e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ea4:	d903      	bls.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e007      	b.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a11      	ldr	r2, [pc, #68]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ebe:	f7ff fa05 	bl	80022cc <LL_RCC_GetAHB4Prescaler>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9c      	lsrs	r4, r3, #18
 8002ee2:	f7fe ff35 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4620      	mov	r0, r4
 8002eec:	f000 f80c 	bl	8002f08 <RCC_SetFlashLatency>
 8002ef0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08006658 	.word	0x08006658
 8002f00:	08006618 	.word	0x08006618
 8002f04:	431bde83 	.word	0x431bde83

08002f08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b093      	sub	sp, #76	; 0x4c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <RCC_SetFlashLatency+0xf0>)
 8002f14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002f1e:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <RCC_SetFlashLatency+0xf4>)
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <RCC_SetFlashLatency+0xf8>)
 8002f2c:	f107 040c 	add.w	r4, r7, #12
 8002f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002f36:	2300      	movs	r3, #0
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d11c      	bne.n	8002f7c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
 8002f46:	e015      	b.n	8002f74 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f50:	4413      	add	r3, r2
 8002f52:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d808      	bhi.n	8002f6e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f64:	4413      	add	r3, r2
 8002f66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002f6c:	e022      	b.n	8002fb4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	3301      	adds	r3, #1
 8002f72:	643b      	str	r3, [r7, #64]	; 0x40
 8002f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d9e6      	bls.n	8002f48 <RCC_SetFlashLatency+0x40>
 8002f7a:	e01b      	b.n	8002fb4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	e015      	b.n	8002fae <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d808      	bhi.n	8002fa8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002fa6:	e005      	b.n	8002fb4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	3301      	adds	r3, #1
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d9e6      	bls.n	8002f82 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <RCC_SetFlashLatency+0xfc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 0207 	bic.w	r2, r3, #7
 8002fbc:	4911      	ldr	r1, [pc, #68]	; (8003004 <RCC_SetFlashLatency+0xfc>)
 8002fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fc4:	f7fe fc0e 	bl	80017e4 <HAL_GetTick>
 8002fc8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002fca:	e008      	b.n	8002fde <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fcc:	f7fe fc0a 	bl	80017e4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e007      	b.n	8002fee <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <RCC_SetFlashLatency+0xfc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1ef      	bne.n	8002fcc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	374c      	adds	r7, #76	; 0x4c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	08006564 	.word	0x08006564
 8002ffc:	08006574 	.word	0x08006574
 8003000:	08006580 	.word	0x08006580
 8003004:	58004000 	.word	0x58004000

08003008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07c      	b.n	8003114 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f899 	bl	800316c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003050:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800305a:	d902      	bls.n	8003062 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e002      	b.n	8003068 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003070:	d007      	beq.n	8003082 <HAL_SPI_Init+0x7a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800307a:	d002      	beq.n	8003082 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003092:	d903      	bls.n	800309c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
 800309a:	e002      	b.n	80030a2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	ea42 0103 	orr.w	r1, r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	f003 0204 	and.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	ea42 0103 	orr.w	r1, r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e01a      	b.n	8003164 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003144:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f81a 	bl	8003180 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031a2:	2301      	movs	r3, #1
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x26>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e1fb      	b.n	80035b2 <HAL_SPI_TransmitReceive+0x41e>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c2:	f7fe fb0f 	bl	80017e4 <HAL_GetTick>
 80031c6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031de:	7efb      	ldrb	r3, [r7, #27]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d00e      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x6e>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ea:	d106      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x66>
 80031f4:	7efb      	ldrb	r3, [r7, #27]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003200:	e1cd      	b.n	800359e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x80>
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800321a:	e1c0      	b.n	800359e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b04      	cmp	r3, #4
 8003226:	d003      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2205      	movs	r2, #5
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003272:	d802      	bhi.n	800327a <HAL_SPI_TransmitReceive+0xe6>
 8003274:	8a3b      	ldrh	r3, [r7, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d908      	bls.n	800328c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e007      	b.n	800329c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d007      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c2:	d97c      	bls.n	80033be <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x13e>
 80032cc:	8a7b      	ldrh	r3, [r7, #18]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d169      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	881a      	ldrh	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	1c9a      	adds	r2, r3, #2
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f6:	e056      	b.n	80033a6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d11b      	bne.n	800333e <HAL_SPI_TransmitReceive+0x1aa>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_SPI_TransmitReceive+0x1aa>
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	2b01      	cmp	r3, #1
 8003314:	d113      	bne.n	800333e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d11c      	bne.n	8003386 <HAL_SPI_TransmitReceive+0x1f2>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	b292      	uxth	r2, r2
 8003364:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003386:	f7fe fa2d 	bl	80017e4 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003392:	429a      	cmp	r2, r3
 8003394:	d807      	bhi.n	80033a6 <HAL_SPI_TransmitReceive+0x212>
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d003      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033a4:	e0fb      	b.n	800359e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1a3      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x164>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d19d      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x164>
 80033bc:	e0df      	b.n	800357e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x23a>
 80033c6:	8a7b      	ldrh	r3, [r7, #18]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 80cb 	bne.w	8003564 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d912      	bls.n	80033fe <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b02      	subs	r3, #2
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033fc:	e0b2      	b.n	8003564 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003424:	e09e      	b.n	8003564 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d134      	bne.n	800349e <HAL_SPI_TransmitReceive+0x30a>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02f      	beq.n	800349e <HAL_SPI_TransmitReceive+0x30a>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	2b01      	cmp	r3, #1
 8003442:	d12c      	bne.n	800349e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d912      	bls.n	8003474 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b02      	subs	r3, #2
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003472:	e012      	b.n	800349a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d148      	bne.n	800353e <HAL_SPI_TransmitReceive+0x3aa>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d042      	beq.n	800353e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d923      	bls.n	800350c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	b292      	uxth	r2, r2
 80034d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b02      	subs	r3, #2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d81f      	bhi.n	800353a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e016      	b.n	800353a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f103 020c 	add.w	r2, r3, #12
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800353a:	2301      	movs	r3, #1
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800353e:	f7fe f951 	bl	80017e4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354a:	429a      	cmp	r2, r3
 800354c:	d803      	bhi.n	8003556 <HAL_SPI_TransmitReceive+0x3c2>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d102      	bne.n	800355c <HAL_SPI_TransmitReceive+0x3c8>
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003562:	e01c      	b.n	800359e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f af5b 	bne.w	8003426 <HAL_SPI_TransmitReceive+0x292>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f af54 	bne.w	8003426 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8fe 	bl	8003784 <SPI_EndRxTxTransaction>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	661a      	str	r2, [r3, #96]	; 0x60
 800359a:	e000      	b.n	800359e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800359c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035c8:	b2db      	uxtb	r3, r3
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e6:	e04c      	b.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d048      	beq.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035f0:	f7fe f8f8 	bl	80017e4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d902      	bls.n	8003606 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d13d      	bne.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361e:	d111      	bne.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003628:	d004      	beq.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003632:	d107      	bne.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364c:	d10f      	bne.n	800366e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e00f      	b.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d1a3      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80036b8:	e057      	b.n	800376a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036c0:	d106      	bne.n	80036d0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d048      	beq.n	800376a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80036d8:	f7fe f884 	bl	80017e4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d902      	bls.n	80036ee <SPI_WaitFifoStateUntilTimeout+0x44>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d13d      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003706:	d111      	bne.n	800372c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003710:	d004      	beq.n	800371c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d107      	bne.n	800372c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003734:	d10f      	bne.n	8003756 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e008      	b.n	800377c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d19f      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff84 	bl	80036aa <SPI_WaitFifoStateUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e027      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff ff07 	bl	80035d6 <SPI_WaitFlagStateUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f043 0220 	orr.w	r2, r3, #32
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e014      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff5d 	bl	80036aa <SPI_WaitFifoStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e000      	b.n	8003808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <MX_FATFS_Init+0x24>)
 8003816:	4808      	ldr	r0, [pc, #32]	; (8003838 <MX_FATFS_Init+0x28>)
 8003818:	f002 fd84 	bl	8006324 <FATFS_LinkDriver>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e003      	b.n	8003830 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <MX_FATFS_Init+0x2c>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800382e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20001158 	.word	0x20001158
 8003838:	080066a0 	.word	0x080066a0
 800383c:	20000114 	.word	0x20000114

08003840 <MX_FATFS_Process>:
  * @brief  FatFs application main process
  * @param  None
  * @retval Process result
  */
int32_t MX_FATFS_Process(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
  /* Mass Storage Application State Machine */
  switch(Appli_state)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <MX_FATFS_Process+0x4c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d002      	beq.n	8003858 <MX_FATFS_Process+0x18>
 8003852:	2b02      	cmp	r3, #2
 8003854:	d00d      	beq.n	8003872 <MX_FATFS_Process+0x32>
      Appli_state = APPLICATION_IDLE;
    break;

  case APPLICATION_IDLE:
  default:
    break;
 8003856:	e013      	b.n	8003880 <MX_FATFS_Process+0x40>
    if(BSP_SD_GetCardState() == BSP_SD_OK)
 8003858:	f7fd f89e 	bl	8000998 <BSP_SD_GetCardState>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <MX_FATFS_Process+0x2a>
      Appli_state = APPLICATION_RUNNING;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <MX_FATFS_Process+0x4c>)
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
    break;
 8003868:	e00a      	b.n	8003880 <MX_FATFS_Process+0x40>
    process_res = APP_ERROR;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	607b      	str	r3, [r7, #4]
    break;
 8003870:	e006      	b.n	8003880 <MX_FATFS_Process+0x40>
      process_res = FS_FileOperations();
 8003872:	f000 f815 	bl	80038a0 <FS_FileOperations>
 8003876:	6078      	str	r0, [r7, #4]
      Appli_state = APPLICATION_IDLE;
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <MX_FATFS_Process+0x4c>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
    break;
 800387e:	bf00      	nop
  }
  return process_res;
 8003880:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END FATFS_Process */
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000114 	.word	0x20000114

08003890 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003894:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <FS_FileOperations>:
/**
  * @brief File system : file operation
  * @retval File operation result
  */
static int32_t FS_FileOperations(void)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b0aa      	sub	sp, #168	; 0xa8
 80038a4:	af00      	add	r7, sp, #0
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <FS_FileOperations+0xcc>)
 80038a8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80038ac:	461d      	mov	r5, r3
 80038ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038be:	6020      	str	r0, [r4, #0]
 80038c0:	3404      	adds	r4, #4
 80038c2:	8021      	strh	r1, [r4, #0]
 80038c4:	3402      	adds	r4, #2
 80038c6:	0c0b      	lsrs	r3, r1, #16
 80038c8:	7023      	strb	r3, [r4, #0]
  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80038ca:	2200      	movs	r2, #0
 80038cc:	4928      	ldr	r1, [pc, #160]	; (8003970 <FS_FileOperations+0xd0>)
 80038ce:	4829      	ldr	r0, [pc, #164]	; (8003974 <FS_FileOperations+0xd4>)
 80038d0:	f001 ff2e 	bl	8005730 <f_mount>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d142      	bne.n	8003960 <FS_FileOperations+0xc0>
  {
    /* Create and Open a new text file object with write access */
    if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80038da:	220a      	movs	r2, #10
 80038dc:	4926      	ldr	r1, [pc, #152]	; (8003978 <FS_FileOperations+0xd8>)
 80038de:	4827      	ldr	r0, [pc, #156]	; (800397c <FS_FileOperations+0xdc>)
 80038e0:	f001 ff6c 	bl	80057bc <f_open>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d13a      	bne.n	8003960 <FS_FileOperations+0xc0>
    {
      /* Write data to the text file */
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 80038ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038ee:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80038f2:	2237      	movs	r2, #55	; 0x37
 80038f4:	4821      	ldr	r0, [pc, #132]	; (800397c <FS_FileOperations+0xdc>)
 80038f6:	f002 fa8c 	bl	8005e12 <f_write>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

      if((byteswritten > 0) && (res == FR_OK))
 8003900:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02b      	beq.n	8003960 <FS_FileOperations+0xc0>
 8003908:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d127      	bne.n	8003960 <FS_FileOperations+0xc0>
      {
        /* Close the open text file */
        f_close(&SDFile);
 8003910:	481a      	ldr	r0, [pc, #104]	; (800397c <FS_FileOperations+0xdc>)
 8003912:	f002 fc90 	bl	8006236 <f_close>

        /* Open the text file object with read access */
        if(f_open(&SDFile, "STM32.TXT", FA_READ) == FR_OK)
 8003916:	2201      	movs	r2, #1
 8003918:	4917      	ldr	r1, [pc, #92]	; (8003978 <FS_FileOperations+0xd8>)
 800391a:	4818      	ldr	r0, [pc, #96]	; (800397c <FS_FileOperations+0xdc>)
 800391c:	f001 ff4e 	bl	80057bc <f_open>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11c      	bne.n	8003960 <FS_FileOperations+0xc0>
        {
          /* Read data from the text file */
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 8003926:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800392a:	4639      	mov	r1, r7
 800392c:	2264      	movs	r2, #100	; 0x64
 800392e:	4813      	ldr	r0, [pc, #76]	; (800397c <FS_FileOperations+0xdc>)
 8003930:	f002 f910 	bl	8005b54 <f_read>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

          if((bytesread > 0) && (res == FR_OK))
 800393a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <FS_FileOperations+0xc0>
 8003942:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <FS_FileOperations+0xc0>
          {
            /* Close the open text file */
            f_close(&SDFile);
 800394a:	480c      	ldr	r0, [pc, #48]	; (800397c <FS_FileOperations+0xdc>)
 800394c:	f002 fc73 	bl	8006236 <f_close>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 8003950:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003958:	429a      	cmp	r2, r3
 800395a:	d101      	bne.n	8003960 <FS_FileOperations+0xc0>
            {
              /* Success of the demo: no error occurrence */
              return 0;
 800395c:	2300      	movs	r3, #0
 800395e:	e001      	b.n	8003964 <FS_FileOperations+0xc4>
        }
      }
    }
  }
  /* Error */
  return -1;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003964:	4618      	mov	r0, r3
 8003966:	37a8      	adds	r7, #168	; 0xa8
 8003968:	46bd      	mov	sp, r7
 800396a:	bdb0      	pop	{r4, r5, r7, pc}
 800396c:	0800659c 	.word	0x0800659c
 8003970:	20001158 	.word	0x20001158
 8003974:	2000115c 	.word	0x2000115c
 8003978:	08006590 	.word	0x08006590
 800397c:	20002190 	.word	0x20002190

08003980 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <SD_CheckStatus+0x38>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == BSP_SD_OK)
 8003990:	f7fd f802 	bl	8000998 <BSP_SD_GetCardState>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <SD_CheckStatus+0x38>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <SD_CheckStatus+0x38>)
 80039a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80039aa:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <SD_CheckStatus+0x38>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000020 	.word	0x20000020

080039bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <SD_initialize+0x38>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80039cc:	f7fc fe28 	bl	8000620 <BSP_SD_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ffd1 	bl	8003980 <SD_CheckStatus>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <SD_initialize+0x38>)
 80039e4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <SD_initialize+0x38>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2db      	uxtb	r3, r3
  /* USER CODE END SDinitialize */
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000020 	.word	0x20000020

080039f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ffbb 	bl	8003980 <SD_CheckStatus>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <SD_read+0x40>)
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68b8      	ldr	r0, [r7, #8]
 8003a30:	f7fc fe74 	bl	800071c <BSP_SD_ReadBlocks>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <SD_read+0x36>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == BSP_SD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= BSP_SD_OK)
 8003a3a:	bf00      	nop
 8003a3c:	f7fc ffac 	bl	8000998 <BSP_SD_GetCardState>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1fa      	bne.n	8003a3c <SD_read+0x28>
    {
    }
    res = RES_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	05f5e100 	.word	0x05f5e100

08003a58 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <SD_write+0x40>)
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f7fc fef0 	bl	8000858 <BSP_SD_WriteBlocks>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <SD_write+0x36>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != BSP_SD_OK)
 8003a7e:	bf00      	nop
 8003a80:	f7fc ff8a 	bl	8000998 <BSP_SD_GetCardState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1fa      	bne.n	8003a80 <SD_write+0x28>
    {
    }
    res = RES_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]

}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	05f5e100 	.word	0x05f5e100

08003a9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b094      	sub	sp, #80	; 0x50
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	603a      	str	r2, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <SD_ioctl+0xac>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <SD_ioctl+0x28>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e03c      	b.n	8003b3e <SD_ioctl+0xa2>

  switch (cmd)
 8003ac4:	79bb      	ldrb	r3, [r7, #6]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d834      	bhi.n	8003b34 <SD_ioctl+0x98>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <SD_ioctl+0x34>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae9 	.word	0x08003ae9
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b1b 	.word	0x08003b1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003ae6:	e028      	b.n	8003b3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fc fda5 	bl	800063c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003afe:	e01c      	b.n	8003b3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fc fd99 	bl	800063c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003b18:	e00f      	b.n	8003b3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fd8c 	bl	800063c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	0a5a      	lsrs	r2, r3, #9
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    break;
 8003b32:	e002      	b.n	8003b3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return res;
 8003b3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3750      	adds	r7, #80	; 0x50
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000020 	.word	0x20000020

08003b4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <disk_status+0x30>)
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	79fa      	ldrb	r2, [r7, #7]
 8003b64:	4905      	ldr	r1, [pc, #20]	; (8003b7c <disk_status+0x30>)
 8003b66:	440a      	add	r2, r1
 8003b68:	7a12      	ldrb	r2, [r2, #8]
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4798      	blx	r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000140 	.word	0x20000140

08003b80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <disk_initialize+0x48>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <disk_initialize+0x48>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <disk_initialize+0x48>)
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <disk_initialize+0x48>)
 8003bb0:	440a      	add	r2, r1
 8003bb2:	7a12      	ldrb	r2, [r2, #8]
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000140 	.word	0x20000140

08003bcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <disk_read+0x3c>)
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	689c      	ldr	r4, [r3, #8]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	4a07      	ldr	r2, [pc, #28]	; (8003c08 <disk_read+0x3c>)
 8003bec:	4413      	add	r3, r2
 8003bee:	7a18      	ldrb	r0, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	47a0      	blx	r4
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000140 	.word	0x20000140

08003c0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <disk_write+0x3c>)
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	68dc      	ldr	r4, [r3, #12]
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <disk_write+0x3c>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7a18      	ldrb	r0, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	47a0      	blx	r4
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000140 	.word	0x20000140

08003c4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	603a      	str	r2, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <disk_ioctl+0x38>)
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	79fa      	ldrb	r2, [r7, #7]
 8003c6a:	4906      	ldr	r1, [pc, #24]	; (8003c84 <disk_ioctl+0x38>)
 8003c6c:	440a      	add	r2, r1
 8003c6e:	7a10      	ldrb	r0, [r2, #8]
 8003c70:	79b9      	ldrb	r1, [r7, #6]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4798      	blx	r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	73fb      	strb	r3, [r7, #15]
  return res;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000140 	.word	0x20000140

08003c88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3301      	adds	r3, #1
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	b21a      	sxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003caa:	89fb      	ldrh	r3, [r7, #14]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3303      	adds	r3, #3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	3202      	adds	r2, #2
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	3201      	adds	r2, #1
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
	return rv;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	1c53      	adds	r3, r2, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	6179      	str	r1, [r7, #20]
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f1      	bne.n	8003da6 <mem_cpy+0x1a>
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	617a      	str	r2, [r7, #20]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f3      	bne.n	8003dde <mem_set+0x10>
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003e02:	b480      	push	{r7}
 8003e04:	b089      	sub	sp, #36	; 0x24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	61fa      	str	r2, [r7, #28]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	61ba      	str	r2, [r7, #24]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	1acb      	subs	r3, r1, r3
 8003e2e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <mem_cmp+0x40>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0eb      	beq.n	8003e1a <mem_cmp+0x18>

	return r;
 8003e42:	697b      	ldr	r3, [r7, #20]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3724      	adds	r7, #36	; 0x24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003e5a:	e002      	b.n	8003e62 <chk_chr+0x12>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <chk_chr+0x26>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d1f2      	bne.n	8003e5c <chk_chr+0xc>
	return *str;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	781b      	ldrb	r3, [r3, #0]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e029      	b.n	8003ef0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <chk_lock+0xb4>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01d      	beq.n	8003ee6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eaa:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <chk_lock+0xb4>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d116      	bne.n	8003eea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <chk_lock+0xb4>)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d10c      	bne.n	8003eea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ed0:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <chk_lock+0xb4>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3308      	adds	r3, #8
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d102      	bne.n	8003eea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ee4:	e007      	b.n	8003ef6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d9d2      	bls.n	8003e9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d109      	bne.n	8003f10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <chk_lock+0x80>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <chk_lock+0x84>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e010      	b.n	8003f2e <chk_lock+0xa6>
 8003f0c:	2312      	movs	r3, #18
 8003f0e:	e00e      	b.n	8003f2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <chk_lock+0xa0>
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <chk_lock+0xb4>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	4413      	add	r3, r2
 8003f1e:	330c      	adds	r3, #12
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d101      	bne.n	8003f2c <chk_lock+0xa4>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	e000      	b.n	8003f2e <chk_lock+0xa6>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000120 	.word	0x20000120

08003f40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	e002      	b.n	8003f52 <enq_lock+0x12>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d806      	bhi.n	8003f66 <enq_lock+0x26>
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <enq_lock+0x40>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	4413      	add	r3, r2
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f2      	bne.n	8003f4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000120 	.word	0x20000120

08003f84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e01f      	b.n	8003fd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f94:	4a41      	ldr	r2, [pc, #260]	; (800409c <inc_lock+0x118>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d113      	bne.n	8003fce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003fa6:	4a3d      	ldr	r2, [pc, #244]	; (800409c <inc_lock+0x118>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d109      	bne.n	8003fce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003fba:	4a38      	ldr	r2, [pc, #224]	; (800409c <inc_lock+0x118>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d006      	beq.n	8003fdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d9dc      	bls.n	8003f94 <inc_lock+0x10>
 8003fda:	e000      	b.n	8003fde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003fdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d132      	bne.n	800404a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e002      	b.n	8003ff0 <inc_lock+0x6c>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d806      	bhi.n	8004004 <inc_lock+0x80>
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <inc_lock+0x118>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	4413      	add	r3, r2
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f2      	bne.n	8003fea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d101      	bne.n	800400e <inc_lock+0x8a>
 800400a:	2300      	movs	r3, #0
 800400c:	e040      	b.n	8004090 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4922      	ldr	r1, [pc, #136]	; (800409c <inc_lock+0x118>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	440b      	add	r3, r1
 800401a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	491e      	ldr	r1, [pc, #120]	; (800409c <inc_lock+0x118>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	440b      	add	r3, r1
 8004028:	3304      	adds	r3, #4
 800402a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	491a      	ldr	r1, [pc, #104]	; (800409c <inc_lock+0x118>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	440b      	add	r3, r1
 8004038:	3308      	adds	r3, #8
 800403a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <inc_lock+0x118>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	4413      	add	r3, r2
 8004044:	330c      	adds	r3, #12
 8004046:	2200      	movs	r2, #0
 8004048:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <inc_lock+0xe0>
 8004050:	4a12      	ldr	r2, [pc, #72]	; (800409c <inc_lock+0x118>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	4413      	add	r3, r2
 8004058:	330c      	adds	r3, #12
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <inc_lock+0xe0>
 8004060:	2300      	movs	r3, #0
 8004062:	e015      	b.n	8004090 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <inc_lock+0xf8>
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <inc_lock+0x118>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	330c      	adds	r3, #12
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	e001      	b.n	8004080 <inc_lock+0xfc>
 800407c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <inc_lock+0x118>)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	440b      	add	r3, r1
 8004088:	330c      	adds	r3, #12
 800408a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000120 	.word	0x20000120

080040a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d825      	bhi.n	8004100 <dec_lock+0x60>
		n = Files[i].ctr;
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <dec_lock+0x74>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	4413      	add	r3, r2
 80040bc:	330c      	adds	r3, #12
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80040c2:	89fb      	ldrh	r3, [r7, #14]
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d101      	bne.n	80040ce <dec_lock+0x2e>
 80040ca:	2300      	movs	r3, #0
 80040cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <dec_lock+0x3a>
 80040d4:	89fb      	ldrh	r3, [r7, #14]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <dec_lock+0x74>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	330c      	adds	r3, #12
 80040e4:	89fa      	ldrh	r2, [r7, #14]
 80040e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <dec_lock+0x5a>
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <dec_lock+0x74>)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	4413      	add	r3, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	737b      	strb	r3, [r7, #13]
 80040fe:	e001      	b.n	8004104 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004100:	2302      	movs	r3, #2
 8004102:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004104:	7b7b      	ldrb	r3, [r7, #13]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000120 	.word	0x20000120

08004118 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e010      	b.n	8004148 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <clear_lock+0x44>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	4413      	add	r3, r2
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d105      	bne.n	8004142 <clear_lock+0x2a>
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <clear_lock+0x44>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	4413      	add	r3, r2
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d9eb      	bls.n	8004126 <clear_lock+0xe>
	}
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000120 	.word	0x20000120

08004160 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d034      	beq.n	80041de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7858      	ldrb	r0, [r3, #1]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004184:	2301      	movs	r3, #1
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	f7ff fd40 	bl	8003c0c <disk_write>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	e022      	b.n	80041de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	1ad2      	subs	r2, r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d217      	bcs.n	80041de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	789b      	ldrb	r3, [r3, #2]
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e010      	b.n	80041d8 <sync_window+0x78>
					wsect += fs->fsize;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7858      	ldrb	r0, [r3, #1]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041ca:	2301      	movs	r3, #1
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	f7ff fd1d 	bl	8003c0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d8eb      	bhi.n	80041b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d01b      	beq.n	8004238 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ffad 	bl	8004160 <sync_window>
 8004206:	4603      	mov	r3, r0
 8004208:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d113      	bne.n	8004238 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7858      	ldrb	r0, [r3, #1]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800421a:	2301      	movs	r3, #1
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	f7ff fcd5 	bl	8003bcc <disk_read>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff87 	bl	8004160 <sync_window>
 8004252:	4603      	mov	r3, r0
 8004254:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d159      	bne.n	8004310 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d149      	bne.n	80042f8 <sync_fs+0xb4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d145      	bne.n	80042f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	899b      	ldrh	r3, [r3, #12]
 8004276:	461a      	mov	r2, r3
 8004278:	2100      	movs	r1, #0
 800427a:	f7ff fda8 	bl	8003dce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3334      	adds	r3, #52	; 0x34
 8004282:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004286:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fd37 	bl	8003cfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3334      	adds	r3, #52	; 0x34
 8004294:	4921      	ldr	r1, [pc, #132]	; (800431c <sync_fs+0xd8>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fd4c 	bl	8003d34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3334      	adds	r3, #52	; 0x34
 80042a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80042a4:	491e      	ldr	r1, [pc, #120]	; (8004320 <sync_fs+0xdc>)
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd44 	bl	8003d34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3334      	adds	r3, #52	; 0x34
 80042b0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7ff fd3a 	bl	8003d34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3334      	adds	r3, #52	; 0x34
 80042c4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7ff fd30 	bl	8003d34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7858      	ldrb	r0, [r3, #1]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ec:	2301      	movs	r3, #1
 80042ee:	f7ff fc8d 	bl	8003c0c <disk_write>
			fs->fsi_flag = 0;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fca3 	bl	8003c4c <disk_ioctl>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <sync_fs+0xcc>
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	41615252 	.word	0x41615252
 8004320:	61417272 	.word	0x61417272

08004324 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3b02      	subs	r3, #2
 8004332:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	3b02      	subs	r3, #2
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d301      	bcc.n	8004344 <clust2sect+0x20>
 8004340:	2300      	movs	r3, #0
 8004342:	e008      	b.n	8004356 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	895b      	ldrh	r3, [r3, #10]
 8004348:	461a      	mov	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	fb03 f202 	mul.w	r2, r3, r2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4413      	add	r3, r2
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d904      	bls.n	8004382 <get_fat+0x20>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004382:	2301      	movs	r3, #1
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e0b7      	b.n	80044f8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d05a      	beq.n	800444c <get_fat+0xea>
 8004396:	2b03      	cmp	r3, #3
 8004398:	d07d      	beq.n	8004496 <get_fat+0x134>
 800439a:	2b01      	cmp	r3, #1
 800439c:	f040 80a2 	bne.w	80044e4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	899b      	ldrh	r3, [r3, #12]
 80043b6:	4619      	mov	r1, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	4413      	add	r3, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	6938      	ldr	r0, [r7, #16]
 80043c4:	f7ff ff10 	bl	80041e8 <move_window>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 808d 	bne.w	80044ea <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60fa      	str	r2, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	8992      	ldrh	r2, [r2, #12]
 80043da:	fbb3 f1f2 	udiv	r1, r3, r2
 80043de:	fb02 f201 	mul.w	r2, r2, r1
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	899b      	ldrh	r3, [r3, #12]
 80043f6:	4619      	mov	r1, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fe:	4413      	add	r3, r2
 8004400:	4619      	mov	r1, r3
 8004402:	6938      	ldr	r0, [r7, #16]
 8004404:	f7ff fef0 	bl	80041e8 <move_window>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d16f      	bne.n	80044ee <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	899b      	ldrh	r3, [r3, #12]
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	fbb3 f1f2 	udiv	r1, r3, r2
 800441a:	fb02 f201 	mul.w	r2, r2, r1
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
 8004430:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <get_fat+0xe0>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	e002      	b.n	8004448 <get_fat+0xe6>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	617b      	str	r3, [r7, #20]
			break;
 800444a:	e055      	b.n	80044f8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	899b      	ldrh	r3, [r3, #12]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004460:	4413      	add	r3, r2
 8004462:	4619      	mov	r1, r3
 8004464:	6938      	ldr	r0, [r7, #16]
 8004466:	f7ff febf 	bl	80041e8 <move_window>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d140      	bne.n	80044f2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	8992      	ldrh	r2, [r2, #12]
 800447e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004482:	fb02 f200 	mul.w	r2, r2, r0
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	440b      	add	r3, r1
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fbfc 	bl	8003c88 <ld_word>
 8004490:	4603      	mov	r3, r0
 8004492:	617b      	str	r3, [r7, #20]
			break;
 8004494:	e030      	b.n	80044f8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	899b      	ldrh	r3, [r3, #12]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044aa:	4413      	add	r3, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	6938      	ldr	r0, [r7, #16]
 80044b0:	f7ff fe9a 	bl	80041e8 <move_window>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	8992      	ldrh	r2, [r2, #12]
 80044c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80044cc:	fb02 f200 	mul.w	r2, r2, r0
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	440b      	add	r3, r1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fbef 	bl	8003cb8 <ld_dword>
 80044da:	4603      	mov	r3, r0
 80044dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044e0:	617b      	str	r3, [r7, #20]
			break;
 80044e2:	e009      	b.n	80044f8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e006      	b.n	80044f8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044f6:	bf00      	nop
		}
	}

	return val;
 80044f8:	697b      	ldr	r3, [r7, #20]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004502:	b590      	push	{r4, r7, lr}
 8004504:	b089      	sub	sp, #36	; 0x24
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	f240 8106 	bls.w	8004726 <put_fat+0x224>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	f080 8100 	bcs.w	8004726 <put_fat+0x224>
		switch (fs->fs_type) {
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	f000 8088 	beq.w	8004640 <put_fat+0x13e>
 8004530:	2b03      	cmp	r3, #3
 8004532:	f000 80b0 	beq.w	8004696 <put_fat+0x194>
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 80f5 	bne.w	8004726 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4413      	add	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	899b      	ldrh	r3, [r3, #12]
 8004552:	4619      	mov	r1, r3
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	4413      	add	r3, r2
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fe42 	bl	80041e8 <move_window>
 8004564:	4603      	mov	r3, r0
 8004566:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004568:	7ffb      	ldrb	r3, [r7, #31]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80d4 	bne.w	8004718 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	61ba      	str	r2, [r7, #24]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	8992      	ldrh	r2, [r2, #12]
 8004580:	fbb3 f0f2 	udiv	r0, r3, r2
 8004584:	fb02 f200 	mul.w	r2, r2, r0
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	440b      	add	r3, r1
 800458c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <put_fat+0xb2>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	b25a      	sxtb	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e001      	b.n	80045b8 <put_fat+0xb6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	899b      	ldrh	r3, [r3, #12]
 80045ca:	4619      	mov	r1, r3
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d2:	4413      	add	r3, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff fe06 	bl	80041e8 <move_window>
 80045dc:	4603      	mov	r3, r0
 80045de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 809a 	bne.w	800471c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	899b      	ldrh	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80045fa:	fb02 f200 	mul.w	r2, r2, r0
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	440b      	add	r3, r1
 8004602:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <put_fat+0x114>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e00e      	b.n	8004634 <put_fat+0x132>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b25b      	sxtb	r3, r3
 800461c:	f023 030f 	bic.w	r3, r3, #15
 8004620:	b25a      	sxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	b25b      	sxtb	r3, r3
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	b25b      	sxtb	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b25b      	sxtb	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	70da      	strb	r2, [r3, #3]
			break;
 800463e:	e072      	b.n	8004726 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	899b      	ldrh	r3, [r3, #12]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	4619      	mov	r1, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	fbb3 f3f1 	udiv	r3, r3, r1
 8004654:	4413      	add	r3, r2
 8004656:	4619      	mov	r1, r3
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff fdc5 	bl	80041e8 <move_window>
 800465e:	4603      	mov	r3, r0
 8004660:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004662:	7ffb      	ldrb	r3, [r7, #31]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d15b      	bne.n	8004720 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	8992      	ldrh	r2, [r2, #12]
 8004676:	fbb3 f0f2 	udiv	r0, r3, r2
 800467a:	fb02 f200 	mul.w	r2, r2, r0
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	440b      	add	r3, r1
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	b292      	uxth	r2, r2
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fb38 	bl	8003cfe <st_word>
			fs->wflag = 1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	70da      	strb	r2, [r3, #3]
			break;
 8004694:	e047      	b.n	8004726 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	899b      	ldrh	r3, [r3, #12]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046aa:	4413      	add	r3, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fd9a 	bl	80041e8 <move_window>
 80046b4:	4603      	mov	r3, r0
 80046b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d132      	bne.n	8004724 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	8992      	ldrh	r2, [r2, #12]
 80046d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80046d6:	fb02 f200 	mul.w	r2, r2, r0
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	440b      	add	r3, r1
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff faea 	bl	8003cb8 <ld_dword>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046ea:	4323      	orrs	r3, r4
 80046ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	8992      	ldrh	r2, [r2, #12]
 80046fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004700:	fb02 f200 	mul.w	r2, r2, r0
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	440b      	add	r3, r1
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fb12 	bl	8003d34 <st_dword>
			fs->wflag = 1;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	70da      	strb	r2, [r3, #3]
			break;
 8004716:	e006      	b.n	8004726 <put_fat+0x224>
			if (res != FR_OK) break;
 8004718:	bf00      	nop
 800471a:	e004      	b.n	8004726 <put_fat+0x224>
			if (res != FR_OK) break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <put_fat+0x224>
			if (res != FR_OK) break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <put_fat+0x224>
			if (res != FR_OK) break;
 8004724:	bf00      	nop
		}
	}
	return res;
 8004726:	7ffb      	ldrb	r3, [r7, #31]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3724      	adds	r7, #36	; 0x24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d904      	bls.n	8004756 <remove_chain+0x26>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d301      	bcc.n	800475a <remove_chain+0x2a>
 8004756:	2302      	movs	r3, #2
 8004758:	e04b      	b.n	80047f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	69b8      	ldr	r0, [r7, #24]
 8004768:	f7ff fecb 	bl	8004502 <put_fat>
 800476c:	4603      	mov	r3, r0
 800476e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004770:	7ffb      	ldrb	r3, [r7, #31]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <remove_chain+0x4a>
 8004776:	7ffb      	ldrb	r3, [r7, #31]
 8004778:	e03b      	b.n	80047f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fdf0 	bl	8004362 <get_fat>
 8004782:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d031      	beq.n	80047ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <remove_chain+0x64>
 8004790:	2302      	movs	r3, #2
 8004792:	e02e      	b.n	80047f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d101      	bne.n	80047a0 <remove_chain+0x70>
 800479c:	2301      	movs	r3, #1
 800479e:	e028      	b.n	80047f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80047a0:	2200      	movs	r2, #0
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	69b8      	ldr	r0, [r7, #24]
 80047a6:	f7ff feac 	bl	8004502 <put_fat>
 80047aa:	4603      	mov	r3, r0
 80047ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <remove_chain+0x88>
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	e01c      	b.n	80047f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	3b02      	subs	r3, #2
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d20b      	bcs.n	80047de <remove_chain+0xae>
			fs->free_clst++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3c6      	bcc.n	800477a <remove_chain+0x4a>
 80047ec:	e000      	b.n	80047f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80047ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b088      	sub	sp, #32
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10d      	bne.n	800482c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <create_chain+0x2c>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d31b      	bcc.n	800485e <create_chain+0x64>
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	e018      	b.n	800485e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fd97 	bl	8004362 <get_fat>
 8004834:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d801      	bhi.n	8004840 <create_chain+0x46>
 800483c:	2301      	movs	r3, #1
 800483e:	e070      	b.n	8004922 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d101      	bne.n	800484c <create_chain+0x52>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	e06a      	b.n	8004922 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	429a      	cmp	r2, r3
 8004854:	d201      	bcs.n	800485a <create_chain+0x60>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	e063      	b.n	8004922 <create_chain+0x128>
		scl = clst;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	429a      	cmp	r2, r3
 8004870:	d307      	bcc.n	8004882 <create_chain+0x88>
				ncl = 2;
 8004872:	2302      	movs	r3, #2
 8004874:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d901      	bls.n	8004882 <create_chain+0x88>
 800487e:	2300      	movs	r3, #0
 8004880:	e04f      	b.n	8004922 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fd6c 	bl	8004362 <get_fat>
 800488a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d003      	beq.n	80048a0 <create_chain+0xa6>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d101      	bne.n	80048a4 <create_chain+0xaa>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	e03e      	b.n	8004922 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1da      	bne.n	8004862 <create_chain+0x68>
 80048ac:	2300      	movs	r3, #0
 80048ae:	e038      	b.n	8004922 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80048b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f7ff fe22 	bl	8004502 <put_fat>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <create_chain+0xe2>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6938      	ldr	r0, [r7, #16]
 80048d4:	f7ff fe15 	bl	8004502 <put_fat>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <create_chain+0x116>
		fs->last_clst = ncl;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	3b02      	subs	r3, #2
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d804      	bhi.n	8004900 <create_chain+0x106>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	791b      	ldrb	r3, [r3, #4]
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	b2da      	uxtb	r2, r3
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	711a      	strb	r2, [r3, #4]
 800490e:	e007      	b.n	8004920 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d102      	bne.n	800491c <create_chain+0x122>
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	e000      	b.n	800491e <create_chain+0x124>
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004920:	69fb      	ldr	r3, [r7, #28]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	3304      	adds	r3, #4
 8004940:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	899b      	ldrh	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	fbb3 f3f2 	udiv	r3, r3, r2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	8952      	ldrh	r2, [r2, #10]
 8004952:	fbb3 f3f2 	udiv	r3, r3, r2
 8004956:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	613a      	str	r2, [r7, #16]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <clmt_clust+0x42>
 8004968:	2300      	movs	r3, #0
 800496a:	e010      	b.n	800498e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d307      	bcc.n	8004984 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3304      	adds	r3, #4
 8004980:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004982:	e7e9      	b.n	8004958 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004984:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4413      	add	r3, r2
}
 800498e:	4618      	mov	r0, r3
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b0:	d204      	bcs.n	80049bc <dir_sdi+0x22>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80049bc:	2302      	movs	r3, #2
 80049be:	e071      	b.n	8004aa4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <dir_sdi+0x46>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d902      	bls.n	80049e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	8912      	ldrh	r2, [r2, #8]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d301      	bcc.n	80049f6 <dir_sdi+0x5c>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e056      	b.n	8004aa4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	e02d      	b.n	8004a5c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	895b      	ldrh	r3, [r3, #10]
 8004a04:	461a      	mov	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	899b      	ldrh	r3, [r3, #12]
 8004a0a:	fb03 f302 	mul.w	r3, r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a10:	e019      	b.n	8004a46 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6979      	ldr	r1, [r7, #20]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fca3 	bl	8004362 <get_fat>
 8004a1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d101      	bne.n	8004a2a <dir_sdi+0x90>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e03c      	b.n	8004aa4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d904      	bls.n	8004a3a <dir_sdi+0xa0>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d301      	bcc.n	8004a3e <dir_sdi+0xa4>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e032      	b.n	8004aa4 <dir_sdi+0x10a>
			ofs -= csz;
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d2e1      	bcs.n	8004a12 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	6938      	ldr	r0, [r7, #16]
 8004a52:	f7ff fc67 	bl	8004324 <clust2sect>
 8004a56:	4602      	mov	r2, r0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <dir_sdi+0xd4>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e01a      	b.n	8004aa4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	899b      	ldrh	r3, [r3, #12]
 8004a76:	4619      	mov	r1, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7e:	441a      	add	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	899b      	ldrh	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a96:	fb02 f200 	mul.w	r2, r2, r0
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	18ca      	adds	r2, r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	3320      	adds	r3, #32
 8004ac2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <dir_next+0x28>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ad2:	d301      	bcc.n	8004ad8 <dir_next+0x2c>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	e0bb      	b.n	8004c50 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	899b      	ldrh	r3, [r3, #12]
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ae4:	fb02 f201 	mul.w	r2, r2, r1
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 809d 	bne.w	8004c2a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	8912      	ldrh	r2, [r2, #8]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f0c0 808d 	bcc.w	8004c2a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	2304      	movs	r3, #4
 8004b18:	e09a      	b.n	8004c50 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	899b      	ldrh	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	8952      	ldrh	r2, [r2, #10]
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d17b      	bne.n	8004c2a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7ff fc11 	bl	8004362 <get_fat>
 8004b40:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d801      	bhi.n	8004b4c <dir_next+0xa0>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e081      	b.n	8004c50 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d101      	bne.n	8004b58 <dir_next+0xac>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e07b      	b.n	8004c50 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d359      	bcc.n	8004c16 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
 8004b6e:	2304      	movs	r3, #4
 8004b70:	e06e      	b.n	8004c50 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f7ff fe3d 	bl	80047fa <create_chain>
 8004b80:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <dir_next+0xe0>
 8004b88:	2307      	movs	r3, #7
 8004b8a:	e061      	b.n	8004c50 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <dir_next+0xea>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e05c      	b.n	8004c50 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d101      	bne.n	8004ba2 <dir_next+0xf6>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e056      	b.n	8004c50 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fadc 	bl	8004160 <sync_window>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <dir_next+0x106>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e04e      	b.n	8004c50 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	899b      	ldrh	r3, [r3, #12]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f7ff f905 	bl	8003dce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fbaa 	bl	8004324 <clust2sect>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd6:	e012      	b.n	8004bfe <dir_next+0x152>
						fs->wflag = 1;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fabe 	bl	8004160 <sync_window>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <dir_next+0x142>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e030      	b.n	8004c50 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	895b      	ldrh	r3, [r3, #10]
 8004c02:	461a      	mov	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d3e6      	bcc.n	8004bd8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad2      	subs	r2, r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004c1c:	6979      	ldr	r1, [r7, #20]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff fb80 	bl	8004324 <clust2sect>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	899b      	ldrh	r3, [r3, #12]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c42:	fb02 f200 	mul.w	r2, r2, r0
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	18ca      	adds	r2, r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fe95 	bl	800499a <dir_sdi>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12b      	bne.n	8004cd2 <dir_alloc+0x7a>
		n = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4619      	mov	r1, r3
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff faaf 	bl	80041e8 <move_window>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11d      	bne.n	8004cd0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2be5      	cmp	r3, #229	; 0xe5
 8004c9c:	d004      	beq.n	8004ca8 <dir_alloc+0x50>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3301      	adds	r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d102      	bne.n	8004cbc <dir_alloc+0x64>
 8004cb6:	e00c      	b.n	8004cd2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fef4 	bl	8004aac <dir_next>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0d7      	beq.n	8004c7e <dir_alloc+0x26>
 8004cce:	e000      	b.n	8004cd2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004cd0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d101      	bne.n	8004cdc <dir_alloc+0x84>
 8004cd8:	2307      	movs	r3, #7
 8004cda:	75fb      	strb	r3, [r7, #23]
	return res;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	331a      	adds	r3, #26
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fe ffc7 	bl	8003c88 <ld_word>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d109      	bne.n	8004d1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	3314      	adds	r3, #20
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe ffbc 	bl	8003c88 <ld_word>
 8004d10:	4603      	mov	r3, r0
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	331a      	adds	r3, #26
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	b292      	uxth	r2, r2
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe ffdf 	bl	8003cfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d109      	bne.n	8004d5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f103 0214 	add.w	r2, r3, #20
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe ffd1 	bl	8003cfe <st_word>
	}
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004d72:	2100      	movs	r1, #0
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fe10 	bl	800499a <dir_sdi>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <dir_find+0x24>
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	e03e      	b.n	8004e06 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6938      	ldr	r0, [r7, #16]
 8004d90:	f7ff fa2a 	bl	80041e8 <move_window>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d12f      	bne.n	8004dfe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <dir_find+0x4e>
 8004dac:	2304      	movs	r3, #4
 8004dae:	75fb      	strb	r3, [r7, #23]
 8004db0:	e028      	b.n	8004e04 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	330b      	adds	r3, #11
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	330b      	adds	r3, #11
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <dir_find+0x86>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a18      	ldr	r0, [r3, #32]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	220b      	movs	r2, #11
 8004dde:	4619      	mov	r1, r3
 8004de0:	f7ff f80f 	bl	8003e02 <mem_cmp>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004dea:	2100      	movs	r1, #0
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fe5d 	bl	8004aac <dir_next>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0c5      	beq.n	8004d88 <dir_find+0x24>
 8004dfc:	e002      	b.n	8004e04 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004e02:	bf00      	nop

	return res;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ff1a 	bl	8004c58 <dir_alloc>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11c      	bne.n	8004e68 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4619      	mov	r1, r3
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f7ff f9d7 	bl	80041e8 <move_window>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d111      	bne.n	8004e68 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe ffbe 	bl	8003dce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a18      	ldr	r0, [r3, #32]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3324      	adds	r3, #36	; 0x24
 8004e5a:	220b      	movs	r2, #11
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f7fe ff95 	bl	8003d8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2201      	movs	r2, #1
 8004e66:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004e8a:	220b      	movs	r2, #11
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	f7fe ff9d 	bl	8003dce <mem_set>
	si = i = 0; ni = 8;
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	617a      	str	r2, [r7, #20]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004eae:	7ffb      	ldrb	r3, [r7, #31]
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d94e      	bls.n	8004f52 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8004eb8:	d006      	beq.n	8004ec8 <create_name+0x54>
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ebe:	d110      	bne.n	8004ee2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004ec0:	e002      	b.n	8004ec8 <create_name+0x54>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	4413      	add	r3, r2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ed2:	d0f6      	beq.n	8004ec2 <create_name+0x4e>
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ede:	d0f0      	beq.n	8004ec2 <create_name+0x4e>
			break;
 8004ee0:	e038      	b.n	8004f54 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ee6:	d003      	beq.n	8004ef0 <create_name+0x7c>
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d30c      	bcc.n	8004f0a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0b      	cmp	r3, #11
 8004ef4:	d002      	beq.n	8004efc <create_name+0x88>
 8004ef6:	7ffb      	ldrb	r3, [r7, #31]
 8004ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8004efa:	d001      	beq.n	8004f00 <create_name+0x8c>
 8004efc:	2306      	movs	r3, #6
 8004efe:	e044      	b.n	8004f8a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004f00:	2308      	movs	r3, #8
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	230b      	movs	r3, #11
 8004f06:	61bb      	str	r3, [r7, #24]
			continue;
 8004f08:	e022      	b.n	8004f50 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da04      	bge.n	8004f1c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
 8004f14:	3b80      	subs	r3, #128	; 0x80
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <create_name+0x120>)
 8004f18:	5cd3      	ldrb	r3, [r2, r3]
 8004f1a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	481d      	ldr	r0, [pc, #116]	; (8004f98 <create_name+0x124>)
 8004f22:	f7fe ff95 	bl	8003e50 <chk_chr>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <create_name+0xbc>
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	e02c      	b.n	8004f8a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004f30:	7ffb      	ldrb	r3, [r7, #31]
 8004f32:	2b60      	cmp	r3, #96	; 0x60
 8004f34:	d905      	bls.n	8004f42 <create_name+0xce>
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b7a      	cmp	r3, #122	; 0x7a
 8004f3a:	d802      	bhi.n	8004f42 <create_name+0xce>
 8004f3c:	7ffb      	ldrb	r3, [r7, #31]
 8004f3e:	3b20      	subs	r3, #32
 8004f40:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	613a      	str	r2, [r7, #16]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	7ffa      	ldrb	r2, [r7, #31]
 8004f4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004f50:	e7a6      	b.n	8004ea0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004f52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	441a      	add	r2, r3
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <create_name+0xf4>
 8004f64:	2306      	movs	r3, #6
 8004f66:	e010      	b.n	8004f8a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2be5      	cmp	r3, #229	; 0xe5
 8004f6e:	d102      	bne.n	8004f76 <create_name+0x102>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2205      	movs	r2, #5
 8004f74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d801      	bhi.n	8004f80 <create_name+0x10c>
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	e000      	b.n	8004f82 <create_name+0x10e>
 8004f80:	2200      	movs	r2, #0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	330b      	adds	r3, #11
 8004f86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004f88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	080066b4 	.word	0x080066b4
 8004f98:	080065d4 	.word	0x080065d4

08004f9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004fb0:	e002      	b.n	8004fb8 <follow_path+0x1c>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8004fbe:	d0f8      	beq.n	8004fb2 <follow_path+0x16>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8004fc6:	d0f4      	beq.n	8004fb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b1f      	cmp	r3, #31
 8004fd4:	d80a      	bhi.n	8004fec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fcda 	bl	800499a <dir_sdi>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
 8004fea:	e048      	b.n	800507e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fec:	463b      	mov	r3, r7
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff3f 	bl	8004e74 <create_name>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d139      	bne.n	8005074 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff feaf 	bl	8004d64 <dir_find>
 8005006:	4603      	mov	r3, r0
 8005008:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005010:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d12c      	bne.n	8005078 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d127      	bne.n	8005078 <follow_path+0xdc>
 8005028:	2305      	movs	r3, #5
 800502a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800502c:	e024      	b.n	8005078 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d121      	bne.n	800507c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	799b      	ldrb	r3, [r3, #6]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005044:	2305      	movs	r3, #5
 8005046:	75fb      	strb	r3, [r7, #23]
 8005048:	e019      	b.n	800507e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	8992      	ldrh	r2, [r2, #12]
 8005058:	fbb3 f0f2 	udiv	r0, r3, r2
 800505c:	fb02 f200 	mul.w	r2, r2, r0
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	440b      	add	r3, r1
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff fe3d 	bl	8004ce6 <ld_clust>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005072:	e7bb      	b.n	8004fec <follow_path+0x50>
			if (res != FR_OK) break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <follow_path+0xe2>
				break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800507c:	bf00      	nop
			}
		}
	}

	return res;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d031      	beq.n	8005102 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e002      	b.n	80050ac <get_ldnumber+0x24>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d903      	bls.n	80050bc <get_ldnumber+0x34>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b3a      	cmp	r3, #58	; 0x3a
 80050ba:	d1f4      	bne.n	80050a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b3a      	cmp	r3, #58	; 0x3a
 80050c2:	d11c      	bne.n	80050fe <get_ldnumber+0x76>
			tp = *path;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	3b30      	subs	r3, #48	; 0x30
 80050d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d80e      	bhi.n	80050fa <get_ldnumber+0x72>
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d10a      	bne.n	80050fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <get_ldnumber+0x72>
					vol = (int)i;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3301      	adds	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	e002      	b.n	8005104 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005102:	693b      	ldr	r3, [r7, #16]
}
 8005104:	4618      	mov	r0, r3
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	70da      	strb	r2, [r3, #3]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f85c 	bl	80041e8 <move_window>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <check_fs+0x2a>
 8005136:	2304      	movs	r3, #4
 8005138:	e038      	b.n	80051ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3334      	adds	r3, #52	; 0x34
 800513e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fda0 	bl	8003c88 <ld_word>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <check_fs+0x48>
 8005154:	2303      	movs	r3, #3
 8005156:	e029      	b.n	80051ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800515e:	2be9      	cmp	r3, #233	; 0xe9
 8005160:	d009      	beq.n	8005176 <check_fs+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005168:	2beb      	cmp	r3, #235	; 0xeb
 800516a:	d11e      	bne.n	80051aa <check_fs+0x9a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005172:	2b90      	cmp	r3, #144	; 0x90
 8005174:	d119      	bne.n	80051aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3334      	adds	r3, #52	; 0x34
 800517a:	3336      	adds	r3, #54	; 0x36
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fd9b 	bl	8003cb8 <ld_dword>
 8005182:	4603      	mov	r3, r0
 8005184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <check_fs+0xa4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <check_fs+0x82>
 800518e:	2300      	movs	r3, #0
 8005190:	e00c      	b.n	80051ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3334      	adds	r3, #52	; 0x34
 8005196:	3352      	adds	r3, #82	; 0x52
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe fd8d 	bl	8003cb8 <ld_dword>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <check_fs+0xa8>)
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d101      	bne.n	80051aa <check_fs+0x9a>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80051aa:	2302      	movs	r3, #2
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	00544146 	.word	0x00544146
 80051b8:	33544146 	.word	0x33544146

080051bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b096      	sub	sp, #88	; 0x58
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff59 	bl	8005088 <get_ldnumber>
 80051d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da01      	bge.n	80051e2 <find_volume+0x26>
 80051de:	230b      	movs	r3, #11
 80051e0:	e265      	b.n	80056ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80051e2:	4ab0      	ldr	r2, [pc, #704]	; (80054a4 <find_volume+0x2e8>)
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <find_volume+0x3a>
 80051f2:	230c      	movs	r3, #12
 80051f4:	e25b      	b.n	80056ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe fc9b 	bl	8003b4c <disk_status>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800521c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10c      	bne.n	8005242 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <find_volume+0x82>
 800522e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800523a:	230a      	movs	r3, #10
 800523c:	e237      	b.n	80056ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800523e:	2300      	movs	r3, #0
 8005240:	e235      	b.n	80056ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	b2da      	uxtb	r2, r3
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fc93 	bl	8003b80 <disk_initialize>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800526c:	2303      	movs	r3, #3
 800526e:	e21e      	b.n	80056ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <find_volume+0xca>
 8005276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005282:	230a      	movs	r3, #10
 8005284:	e213      	b.n	80056ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	7858      	ldrb	r0, [r3, #1]
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	330c      	adds	r3, #12
 800528e:	461a      	mov	r2, r3
 8005290:	2102      	movs	r1, #2
 8005292:	f7fe fcdb 	bl	8003c4c <disk_ioctl>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <find_volume+0xe4>
 800529c:	2301      	movs	r3, #1
 800529e:	e206      	b.n	80056ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	899b      	ldrh	r3, [r3, #12]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d80d      	bhi.n	80052c6 <find_volume+0x10a>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	899b      	ldrh	r3, [r3, #12]
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	d308      	bcc.n	80052c6 <find_volume+0x10a>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	899b      	ldrh	r3, [r3, #12]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	899b      	ldrh	r3, [r3, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <find_volume+0x10e>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e1f1      	b.n	80056ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80052ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052d2:	f7ff ff1d 	bl	8005110 <check_fs>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80052dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d14b      	bne.n	800537c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052e4:	2300      	movs	r3, #0
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	e01f      	b.n	800532a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052f8:	4413      	add	r3, r2
 80052fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	3304      	adds	r3, #4
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <find_volume+0x158>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	3308      	adds	r3, #8
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fcd4 	bl	8003cb8 <ld_dword>
 8005310:	4602      	mov	r2, r0
 8005312:	e000      	b.n	8005316 <find_volume+0x15a>
 8005314:	2200      	movs	r2, #0
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800531e:	440b      	add	r3, r1
 8005320:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	3301      	adds	r3, #1
 8005328:	643b      	str	r3, [r7, #64]	; 0x40
 800532a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532c:	2b03      	cmp	r3, #3
 800532e:	d9dc      	bls.n	80052ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005330:	2300      	movs	r3, #0
 8005332:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <find_volume+0x184>
 800533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533c:	3b01      	subs	r3, #1
 800533e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005348:	4413      	add	r3, r2
 800534a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800534e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <find_volume+0x1a6>
 8005356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800535a:	f7ff fed9 	bl	8005110 <check_fs>
 800535e:	4603      	mov	r3, r0
 8005360:	e000      	b.n	8005364 <find_volume+0x1a8>
 8005362:	2303      	movs	r3, #3
 8005364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800536c:	2b01      	cmp	r3, #1
 800536e:	d905      	bls.n	800537c <find_volume+0x1c0>
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	3301      	adds	r3, #1
 8005374:	643b      	str	r3, [r7, #64]	; 0x40
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	2b03      	cmp	r3, #3
 800537a:	d9e1      	bls.n	8005340 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800537c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005380:	2b04      	cmp	r3, #4
 8005382:	d101      	bne.n	8005388 <find_volume+0x1cc>
 8005384:	2301      	movs	r3, #1
 8005386:	e192      	b.n	80056ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800538c:	2b01      	cmp	r3, #1
 800538e:	d901      	bls.n	8005394 <find_volume+0x1d8>
 8005390:	230d      	movs	r3, #13
 8005392:	e18c      	b.n	80056ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	3334      	adds	r3, #52	; 0x34
 8005398:	330b      	adds	r3, #11
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fc74 	bl	8003c88 <ld_word>
 80053a0:	4603      	mov	r3, r0
 80053a2:	461a      	mov	r2, r3
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	899b      	ldrh	r3, [r3, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <find_volume+0x1f4>
 80053ac:	230d      	movs	r3, #13
 80053ae:	e17e      	b.n	80056ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	3334      	adds	r3, #52	; 0x34
 80053b4:	3316      	adds	r3, #22
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fc66 	bl	8003c88 <ld_word>
 80053bc:	4603      	mov	r3, r0
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <find_volume+0x218>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	3334      	adds	r3, #52	; 0x34
 80053ca:	3324      	adds	r3, #36	; 0x24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fc73 	bl	8003cb8 <ld_dword>
 80053d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	789b      	ldrb	r3, [r3, #2]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d005      	beq.n	80053f8 <find_volume+0x23c>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	789b      	ldrb	r3, [r3, #2]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d001      	beq.n	80053f8 <find_volume+0x23c>
 80053f4:	230d      	movs	r3, #13
 80053f6:	e15a      	b.n	80056ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	789b      	ldrb	r3, [r3, #2]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540c:	b29a      	uxth	r2, r3
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	895b      	ldrh	r3, [r3, #10]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <find_volume+0x270>
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	895b      	ldrh	r3, [r3, #10]
 800541e:	461a      	mov	r2, r3
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	895b      	ldrh	r3, [r3, #10]
 8005424:	3b01      	subs	r3, #1
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <find_volume+0x274>
 800542c:	230d      	movs	r3, #13
 800542e:	e13e      	b.n	80056ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	3334      	adds	r3, #52	; 0x34
 8005434:	3311      	adds	r3, #17
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fc26 	bl	8003c88 <ld_word>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	891b      	ldrh	r3, [r3, #8]
 8005448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544a:	8992      	ldrh	r2, [r2, #12]
 800544c:	0952      	lsrs	r2, r2, #5
 800544e:	b292      	uxth	r2, r2
 8005450:	fbb3 f1f2 	udiv	r1, r3, r2
 8005454:	fb02 f201 	mul.w	r2, r2, r1
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <find_volume+0x2a8>
 8005460:	230d      	movs	r3, #13
 8005462:	e124      	b.n	80056ae <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	3334      	adds	r3, #52	; 0x34
 8005468:	3313      	adds	r3, #19
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fc0c 	bl	8003c88 <ld_word>
 8005470:	4603      	mov	r3, r0
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <find_volume+0x2cc>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	3334      	adds	r3, #52	; 0x34
 800547e:	3320      	adds	r3, #32
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fc19 	bl	8003cb8 <ld_dword>
 8005486:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	3334      	adds	r3, #52	; 0x34
 800548c:	330e      	adds	r3, #14
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fbfa 	bl	8003c88 <ld_word>
 8005494:	4603      	mov	r3, r0
 8005496:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <find_volume+0x2ec>
 800549e:	230d      	movs	r3, #13
 80054a0:	e105      	b.n	80056ae <find_volume+0x4f2>
 80054a2:	bf00      	nop
 80054a4:	20000118 	.word	0x20000118

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80054a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ac:	4413      	add	r3, r2
 80054ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b0:	8911      	ldrh	r1, [r2, #8]
 80054b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b4:	8992      	ldrh	r2, [r2, #12]
 80054b6:	0952      	lsrs	r2, r2, #5
 80054b8:	b292      	uxth	r2, r2
 80054ba:	fbb1 f2f2 	udiv	r2, r1, r2
 80054be:	b292      	uxth	r2, r2
 80054c0:	4413      	add	r3, r2
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80054c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d201      	bcs.n	80054d0 <find_volume+0x314>
 80054cc:	230d      	movs	r3, #13
 80054ce:	e0ee      	b.n	80056ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80054d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d8:	8952      	ldrh	r2, [r2, #10]
 80054da:	fbb3 f3f2 	udiv	r3, r3, r2
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <find_volume+0x32e>
 80054e6:	230d      	movs	r3, #13
 80054e8:	e0e1      	b.n	80056ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 80054ea:	2303      	movs	r3, #3
 80054ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d802      	bhi.n	8005500 <find_volume+0x344>
 80054fa:	2302      	movs	r3, #2
 80054fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <find_volume+0x354>
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800551c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800551e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	441a      	add	r2, r3
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	441a      	add	r2, r3
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005536:	2b03      	cmp	r3, #3
 8005538:	d11e      	bne.n	8005578 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	3334      	adds	r3, #52	; 0x34
 800553e:	332a      	adds	r3, #42	; 0x2a
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fba1 	bl	8003c88 <ld_word>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <find_volume+0x394>
 800554c:	230d      	movs	r3, #13
 800554e:	e0ae      	b.n	80056ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	891b      	ldrh	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <find_volume+0x3a0>
 8005558:	230d      	movs	r3, #13
 800555a:	e0a8      	b.n	80056ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	3334      	adds	r3, #52	; 0x34
 8005560:	332c      	adds	r3, #44	; 0x2c
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fba8 	bl	8003cb8 <ld_dword>
 8005568:	4602      	mov	r2, r0
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	647b      	str	r3, [r7, #68]	; 0x44
 8005576:	e01f      	b.n	80055b8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	891b      	ldrh	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <find_volume+0x3c8>
 8005580:	230d      	movs	r3, #13
 8005582:	e094      	b.n	80056ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	441a      	add	r2, r3
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005594:	2b02      	cmp	r3, #2
 8005596:	d103      	bne.n	80055a0 <find_volume+0x3e4>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	e00a      	b.n	80055b6 <find_volume+0x3fa>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	085a      	lsrs	r2, r3, #1
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	899b      	ldrh	r3, [r3, #12]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c4:	440b      	add	r3, r1
 80055c6:	3b01      	subs	r3, #1
 80055c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ca:	8989      	ldrh	r1, [r1, #12]
 80055cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d201      	bcs.n	80055d8 <find_volume+0x41c>
 80055d4:	230d      	movs	r3, #13
 80055d6:	e06a      	b.n	80056ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	615a      	str	r2, [r3, #20]
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80055ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d149      	bne.n	800568a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	3334      	adds	r3, #52	; 0x34
 80055fa:	3330      	adds	r3, #48	; 0x30
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fb43 	bl	8003c88 <ld_word>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d140      	bne.n	800568a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	3301      	adds	r3, #1
 800560c:	4619      	mov	r1, r3
 800560e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005610:	f7fe fdea 	bl	80041e8 <move_window>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d137      	bne.n	800568a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2200      	movs	r2, #0
 800561e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	3334      	adds	r3, #52	; 0x34
 8005624:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe fb2d 	bl	8003c88 <ld_word>
 800562e:	4603      	mov	r3, r0
 8005630:	461a      	mov	r2, r3
 8005632:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005636:	429a      	cmp	r2, r3
 8005638:	d127      	bne.n	800568a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	3334      	adds	r3, #52	; 0x34
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fb3a 	bl	8003cb8 <ld_dword>
 8005644:	4602      	mov	r2, r0
 8005646:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <find_volume+0x4fc>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d11e      	bne.n	800568a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	3334      	adds	r3, #52	; 0x34
 8005650:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe fb2f 	bl	8003cb8 <ld_dword>
 800565a:	4602      	mov	r2, r0
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <find_volume+0x500>)
 800565e:	429a      	cmp	r2, r3
 8005660:	d113      	bne.n	800568a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	3334      	adds	r3, #52	; 0x34
 8005666:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe fb24 	bl	8003cb8 <ld_dword>
 8005670:	4602      	mov	r2, r0
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	3334      	adds	r3, #52	; 0x34
 800567a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fb1a 	bl	8003cb8 <ld_dword>
 8005684:	4602      	mov	r2, r0
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005690:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <find_volume+0x504>)
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <find_volume+0x504>)
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <find_volume+0x504>)
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80056a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a8:	f7fe fd36 	bl	8004118 <clear_lock>
#endif
	return FR_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3758      	adds	r7, #88	; 0x58
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	41615252 	.word	0x41615252
 80056bc:	61417272 	.word	0x61417272
 80056c0:	2000011c 	.word	0x2000011c

080056c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80056ce:	2309      	movs	r3, #9
 80056d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01c      	beq.n	8005712 <validate+0x4e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d018      	beq.n	8005712 <validate+0x4e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d013      	beq.n	8005712 <validate+0x4e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	889a      	ldrh	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	88db      	ldrh	r3, [r3, #6]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d10c      	bne.n	8005712 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fa24 	bl	8003b4c <disk_status>
 8005704:	4603      	mov	r3, r0
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <validate+0x4e>
			res = FR_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <validate+0x5a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	e000      	b.n	8005720 <validate+0x5c>
 800571e:	2300      	movs	r3, #0
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	6013      	str	r3, [r2, #0]
	return res;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005742:	f107 0310 	add.w	r3, r7, #16
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fc9e 	bl	8005088 <get_ldnumber>
 800574c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da01      	bge.n	8005758 <f_mount+0x28>
 8005754:	230b      	movs	r3, #11
 8005756:	e02b      	b.n	80057b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005758:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <f_mount+0x88>)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005760:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005768:	69b8      	ldr	r0, [r7, #24]
 800576a:	f7fe fcd5 	bl	8004118 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	490d      	ldr	r1, [pc, #52]	; (80057b8 <f_mount+0x88>)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <f_mount+0x66>
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d001      	beq.n	800579a <f_mount+0x6a>
 8005796:	2300      	movs	r3, #0
 8005798:	e00a      	b.n	80057b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800579a:	f107 010c 	add.w	r1, r7, #12
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	2200      	movs	r2, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fd09 	bl	80051bc <find_volume>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000118 	.word	0x20000118

080057bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b098      	sub	sp, #96	; 0x60
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <f_open+0x18>
 80057d0:	2309      	movs	r3, #9
 80057d2:	e1bb      	b.n	8005b4c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80057dc:	79fa      	ldrb	r2, [r7, #7]
 80057de:	f107 0110 	add.w	r1, r7, #16
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fce8 	bl	80051bc <find_volume>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80057f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 819f 	bne.w	8005b3a <f_open+0x37e>
		dj.obj.fs = fs;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	f107 0314 	add.w	r3, r7, #20
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fbc7 	bl	8004f9c <follow_path>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11a      	bne.n	8005852 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800581c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005820:	b25b      	sxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	da03      	bge.n	800582e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005826:	2306      	movs	r3, #6
 8005828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800582c:	e011      	b.n	8005852 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fb1e 	bl	8003e88 <chk_lock>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	f003 031c 	and.w	r3, r3, #28
 8005858:	2b00      	cmp	r3, #0
 800585a:	d07f      	beq.n	800595c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800585c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005868:	2b04      	cmp	r3, #4
 800586a:	d10e      	bne.n	800588a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800586c:	f7fe fb68 	bl	8003f40 <enq_lock>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d006      	beq.n	8005884 <f_open+0xc8>
 8005876:	f107 0314 	add.w	r3, r7, #20
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fac7 	bl	8004e0e <dir_register>
 8005880:	4603      	mov	r3, r0
 8005882:	e000      	b.n	8005886 <f_open+0xca>
 8005884:	2312      	movs	r3, #18
 8005886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	71fb      	strb	r3, [r7, #7]
 8005892:	e010      	b.n	80058b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005894:	7ebb      	ldrb	r3, [r7, #26]
 8005896:	f003 0311 	and.w	r3, r3, #17
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <f_open+0xea>
					res = FR_DENIED;
 800589e:	2307      	movs	r3, #7
 80058a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80058a4:	e007      	b.n	80058b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <f_open+0xfa>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80058b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d168      	bne.n	8005990 <f_open+0x1d4>
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d063      	beq.n	8005990 <f_open+0x1d4>
				dw = GET_FATTIME();
 80058c8:	f7fd ffe2 	bl	8003890 <get_fattime>
 80058cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	330e      	adds	r3, #14
 80058d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fa2d 	bl	8003d34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	3316      	adds	r3, #22
 80058de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe fa27 	bl	8003d34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	330b      	adds	r3, #11
 80058ea:	2220      	movs	r2, #32
 80058ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff f9f6 	bl	8004ce6 <ld_clust>
 80058fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005900:	2200      	movs	r2, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fa0e 	bl	8004d24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	331c      	adds	r3, #28
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fa10 	bl	8003d34 <st_dword>
					fs->wflag = 1;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2201      	movs	r2, #1
 8005918:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d037      	beq.n	8005990 <f_open+0x1d4>
						dw = fs->winsect;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	2200      	movs	r2, #0
 800592c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fefe 	bl	8004730 <remove_chain>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800593a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800593e:	2b00      	cmp	r3, #0
 8005940:	d126      	bne.n	8005990 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe fc4e 	bl	80041e8 <move_window>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005956:	3a01      	subs	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
 800595a:	e019      	b.n	8005990 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800595c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005960:	2b00      	cmp	r3, #0
 8005962:	d115      	bne.n	8005990 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005964:	7ebb      	ldrb	r3, [r7, #26]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <f_open+0x1ba>
					res = FR_NO_FILE;
 800596e:	2304      	movs	r3, #4
 8005970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005974:	e00c      	b.n	8005990 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <f_open+0x1d4>
 8005980:	7ebb      	ldrb	r3, [r7, #26]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <f_open+0x1d4>
						res = FR_DENIED;
 800598a:	2307      	movs	r3, #7
 800598c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005994:	2b00      	cmp	r3, #0
 8005996:	d128      	bne.n	80059ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80059b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bf14      	ite	ne
 80059c2:	2301      	movne	r3, #1
 80059c4:	2300      	moveq	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fad7 	bl	8003f84 <inc_lock>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <f_open+0x22e>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80059ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 80a3 	bne.w	8005b3a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f973 	bl	8004ce6 <ld_clust>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	331c      	adds	r3, #28
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe f954 	bl	8003cb8 <ld_dword>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	88da      	ldrh	r2, [r3, #6]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	79fa      	ldrb	r2, [r7, #7]
 8005a2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3330      	adds	r3, #48	; 0x30
 8005a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe f9be 	bl	8003dce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d06e      	beq.n	8005b3a <f_open+0x37e>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d06a      	beq.n	8005b3a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	895b      	ldrh	r3, [r3, #10]
 8005a70:	461a      	mov	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	899b      	ldrh	r3, [r3, #12]
 8005a76:	fb03 f302 	mul.w	r3, r3, r2
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	657b      	str	r3, [r7, #84]	; 0x54
 8005a88:	e016      	b.n	8005ab8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fc67 	bl	8004362 <get_fat>
 8005a94:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d802      	bhi.n	8005aa2 <f_open+0x2e6>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d102      	bne.n	8005ab0 <f_open+0x2f4>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <f_open+0x30c>
 8005ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d8e0      	bhi.n	8005a8a <f_open+0x2ce>
				}
				fp->clust = clst;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005acc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d131      	bne.n	8005b3a <f_open+0x37e>
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	899b      	ldrh	r3, [r3, #12]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ae2:	fb02 f201 	mul.w	r2, r2, r1
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d026      	beq.n	8005b3a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fc17 	bl	8004324 <clust2sect>
 8005af6:	6478      	str	r0, [r7, #68]	; 0x44
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <f_open+0x34a>
						res = FR_INT_ERR;
 8005afe:	2302      	movs	r3, #2
 8005b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b04:	e019      	b.n	8005b3a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	899b      	ldrh	r3, [r3, #12]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	7858      	ldrb	r0, [r3, #1]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f7fe f84f 	bl	8003bcc <disk_read>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <f_open+0x37e>
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <f_open+0x38c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3760      	adds	r7, #96	; 0x60
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08e      	sub	sp, #56	; 0x38
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f107 0214 	add.w	r2, r7, #20
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fda5 	bl	80056c4 <validate>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d107      	bne.n	8005b98 <f_read+0x44>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	7d5b      	ldrb	r3, [r3, #21]
 8005b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <f_read+0x4a>
 8005b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b9c:	e135      	b.n	8005e0a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7d1b      	ldrb	r3, [r3, #20]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <f_read+0x5a>
 8005baa:	2307      	movs	r3, #7
 8005bac:	e12d      	b.n	8005e0a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	f240 811e 	bls.w	8005e00 <f_read+0x2ac>
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005bc8:	e11a      	b.n	8005e00 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	8992      	ldrh	r2, [r2, #12]
 8005bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bd6:	fb02 f201 	mul.w	r2, r2, r1
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 80d5 	bne.w	8005d8c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	8992      	ldrh	r2, [r2, #12]
 8005bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	8952      	ldrh	r2, [r2, #10]
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d12f      	bne.n	8005c5e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	e013      	b.n	8005c36 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7fe fe84 	bl	800492a <clmt_clust>
 8005c22:	6338      	str	r0, [r7, #48]	; 0x30
 8005c24:	e007      	b.n	8005c36 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fb97 	bl	8004362 <get_fat>
 8005c34:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d804      	bhi.n	8005c46 <f_read+0xf2>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	755a      	strb	r2, [r3, #21]
 8005c42:	2302      	movs	r3, #2
 8005c44:	e0e1      	b.n	8005e0a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d104      	bne.n	8005c58 <f_read+0x104>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	755a      	strb	r2, [r3, #21]
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d8      	b.n	8005e0a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe fb5c 	bl	8004324 <clust2sect>
 8005c6c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <f_read+0x12a>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2202      	movs	r2, #2
 8005c78:	755a      	strb	r2, [r3, #21]
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e0c5      	b.n	8005e0a <f_read+0x2b6>
			sect += csect;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	899b      	ldrh	r3, [r3, #12]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d041      	beq.n	8005d1e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	4413      	add	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	8952      	ldrh	r2, [r2, #10]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d905      	bls.n	8005cb4 <f_read+0x160>
					cc = fs->csize - csect;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	895b      	ldrh	r3, [r3, #10]
 8005cac:	461a      	mov	r2, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	7858      	ldrb	r0, [r3, #1]
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cbe:	f7fd ff85 	bl	8003bcc <disk_read>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <f_read+0x17e>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	755a      	strb	r2, [r3, #21]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e09b      	b.n	8005e0a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	7d1b      	ldrb	r3, [r3, #20]
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da18      	bge.n	8005d0e <f_read+0x1ba>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d911      	bls.n	8005d0e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1a      	ldr	r2, [r3, #32]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	8992      	ldrh	r2, [r2, #12]
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	18d0      	adds	r0, r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	899b      	ldrh	r3, [r3, #12]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f7fe f83f 	bl	8003d8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	899b      	ldrh	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005d1c:	e05c      	b.n	8005dd8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d02e      	beq.n	8005d86 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	7d1b      	ldrb	r3, [r3, #20]
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da18      	bge.n	8005d64 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	7858      	ldrb	r0, [r3, #1]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	2301      	movs	r3, #1
 8005d42:	f7fd ff63 	bl	8003c0c <disk_write>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <f_read+0x202>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	755a      	strb	r2, [r3, #21]
 8005d52:	2301      	movs	r3, #1
 8005d54:	e059      	b.n	8005e0a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7d1b      	ldrb	r3, [r3, #20]
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	7858      	ldrb	r0, [r3, #1]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d6e:	2301      	movs	r3, #1
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f7fd ff2b 	bl	8003bcc <disk_read>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <f_read+0x232>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	755a      	strb	r2, [r3, #21]
 8005d82:	2301      	movs	r3, #1
 8005d84:	e041      	b.n	8005e0a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	899b      	ldrh	r3, [r3, #12]
 8005d90:	4618      	mov	r0, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	8992      	ldrh	r2, [r2, #12]
 8005d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d9e:	fb02 f201 	mul.w	r2, r2, r1
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	1ac3      	subs	r3, r0, r3
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d901      	bls.n	8005db4 <f_read+0x260>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	8992      	ldrh	r2, [r2, #12]
 8005dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dc6:	fb02 f200 	mul.w	r2, r2, r0
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	440b      	add	r3, r1
 8005dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd4:	f7fd ffda 	bl	8003d8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	4413      	add	r3, r2
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	441a      	add	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	619a      	str	r2, [r3, #24]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	441a      	add	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f47f aee1 	bne.w	8005bca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3738      	adds	r7, #56	; 0x38
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b08c      	sub	sp, #48	; 0x30
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f107 0210 	add.w	r2, r7, #16
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fc46 	bl	80056c4 <validate>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d107      	bne.n	8005e56 <f_write+0x44>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	7d5b      	ldrb	r3, [r3, #21]
 8005e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <f_write+0x4a>
 8005e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e5a:	e16a      	b.n	8006132 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	7d1b      	ldrb	r3, [r3, #20]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <f_write+0x5a>
 8005e68:	2307      	movs	r3, #7
 8005e6a:	e162      	b.n	8006132 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	f080 814c 	bcs.w	8006116 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005e86:	e146      	b.n	8006116 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	8992      	ldrh	r2, [r2, #12]
 8005e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e94:	fb02 f201 	mul.w	r2, r2, r1
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 80f1 	bne.w	8006082 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	8992      	ldrh	r2, [r2, #12]
 8005ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	8952      	ldrh	r2, [r2, #10]
 8005eb0:	3a01      	subs	r2, #1
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d143      	bne.n	8005f44 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10c      	bne.n	8005ede <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11a      	bne.n	8005f06 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fc90 	bl	80047fa <create_chain>
 8005eda:	62b8      	str	r0, [r7, #40]	; 0x28
 8005edc:	e013      	b.n	8005f06 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7fe fd1c 	bl	800492a <clmt_clust>
 8005ef2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ef4:	e007      	b.n	8005f06 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe fc7b 	bl	80047fa <create_chain>
 8005f04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8109 	beq.w	8006120 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d104      	bne.n	8005f1e <f_write+0x10c>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	755a      	strb	r2, [r3, #21]
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e109      	b.n	8006132 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d104      	bne.n	8005f30 <f_write+0x11e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	755a      	strb	r2, [r3, #21]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e100      	b.n	8006132 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <f_write+0x132>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	7d1b      	ldrb	r3, [r3, #20]
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da18      	bge.n	8005f80 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	7858      	ldrb	r0, [r3, #1]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f7fd fe55 	bl	8003c0c <disk_write>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <f_write+0x160>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	755a      	strb	r2, [r3, #21]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0df      	b.n	8006132 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	7d1b      	ldrb	r3, [r3, #20]
 8005f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe f9cb 	bl	8004324 <clust2sect>
 8005f8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <f_write+0x18e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	755a      	strb	r2, [r3, #21]
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e0c8      	b.n	8006132 <f_write+0x320>
			sect += csect;
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	899b      	ldrh	r3, [r3, #12]
 8005fac:	461a      	mov	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d043      	beq.n	8006044 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	8952      	ldrh	r2, [r2, #10]
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d905      	bls.n	8005fd6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	895b      	ldrh	r3, [r3, #10]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	7858      	ldrb	r0, [r3, #1]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	69f9      	ldr	r1, [r7, #28]
 8005fe0:	f7fd fe14 	bl	8003c0c <disk_write>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <f_write+0x1e2>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	755a      	strb	r2, [r3, #21]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e09e      	b.n	8006132 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1a      	ldr	r2, [r3, #32]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d918      	bls.n	8006034 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	8992      	ldrh	r2, [r2, #12]
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	18d1      	adds	r1, r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	899b      	ldrh	r3, [r3, #12]
 8006020:	461a      	mov	r2, r3
 8006022:	f7fd feb3 	bl	8003d8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	7d1b      	ldrb	r3, [r3, #20]
 800602a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	899b      	ldrh	r3, [r3, #12]
 8006038:	461a      	mov	r2, r3
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006042:	e04b      	b.n	80060dc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	429a      	cmp	r2, r3
 800604c:	d016      	beq.n	800607c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006056:	429a      	cmp	r2, r3
 8006058:	d210      	bcs.n	800607c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	7858      	ldrb	r0, [r3, #1]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006064:	2301      	movs	r3, #1
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	f7fd fdb0 	bl	8003bcc <disk_read>
 800606c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	755a      	strb	r2, [r3, #21]
 8006078:	2301      	movs	r3, #1
 800607a:	e05a      	b.n	8006132 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	899b      	ldrh	r3, [r3, #12]
 8006086:	4618      	mov	r0, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	8992      	ldrh	r2, [r2, #12]
 8006090:	fbb3 f1f2 	udiv	r1, r3, r2
 8006094:	fb02 f201 	mul.w	r2, r2, r1
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	1ac3      	subs	r3, r0, r3
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800609e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d901      	bls.n	80060aa <f_write+0x298>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	8992      	ldrh	r2, [r2, #12]
 80060b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80060bc:	fb02 f200 	mul.w	r2, r2, r0
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	440b      	add	r3, r1
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	69f9      	ldr	r1, [r7, #28]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fe5f 	bl	8003d8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	7d1b      	ldrb	r3, [r3, #20]
 80060d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	4413      	add	r3, r2
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	441a      	add	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	619a      	str	r2, [r3, #24]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	bf38      	it	cc
 80060fc:	461a      	movcc	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	441a      	add	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f47f aeb5 	bne.w	8005e88 <f_write+0x76>
 800611e:	e000      	b.n	8006122 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006120:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	7d1b      	ldrb	r3, [r3, #20]
 8006126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3730      	adds	r7, #48	; 0x30
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b086      	sub	sp, #24
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f107 0208 	add.w	r2, r7, #8
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff faba 	bl	80056c4 <validate>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d168      	bne.n	800622c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7d1b      	ldrb	r3, [r3, #20]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d062      	beq.n	800622c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7d1b      	ldrb	r3, [r3, #20]
 800616a:	b25b      	sxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	da15      	bge.n	800619c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	7858      	ldrb	r0, [r3, #1]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	2301      	movs	r3, #1
 8006180:	f7fd fd44 	bl	8003c0c <disk_write>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <f_sync+0x54>
 800618a:	2301      	movs	r3, #1
 800618c:	e04f      	b.n	800622e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7d1b      	ldrb	r3, [r3, #20]
 8006192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006196:	b2da      	uxtb	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800619c:	f7fd fb78 	bl	8003890 <get_fattime>
 80061a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f7fe f81c 	bl	80041e8 <move_window>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d138      	bne.n	800622c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	330b      	adds	r3, #11
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	330b      	adds	r3, #11
 80061ca:	f042 0220 	orr.w	r2, r2, #32
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	461a      	mov	r2, r3
 80061dc:	68f9      	ldr	r1, [r7, #12]
 80061de:	f7fe fda1 	bl	8004d24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f103 021c 	add.w	r2, r3, #28
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fd fda0 	bl	8003d34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3316      	adds	r3, #22
 80061f8:	6939      	ldr	r1, [r7, #16]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fd fd9a 	bl	8003d34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3312      	adds	r3, #18
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fd79 	bl	8003cfe <st_word>
					fs->wflag = 1;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2201      	movs	r2, #1
 8006210:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe f815 	bl	8004244 <sync_fs>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7d1b      	ldrb	r3, [r3, #20]
 8006222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800622c:	7dfb      	ldrb	r3, [r7, #23]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff ff7b 	bl	800613a <f_sync>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d118      	bne.n	8006280 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f107 0208 	add.w	r2, r7, #8
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fa34 	bl	80056c4 <validate>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10c      	bne.n	8006280 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd ff18 	bl	80040a0 <dec_lock>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062a4:	7a5b      	ldrb	r3, [r3, #9]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d131      	bne.n	8006310 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80062ac:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062ae:	7a5b      	ldrb	r3, [r3, #9]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062b6:	2100      	movs	r1, #0
 80062b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062bc:	7a5b      	ldrb	r3, [r3, #9]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062cc:	7a5b      	ldrb	r3, [r3, #9]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062d4:	4413      	add	r3, r2
 80062d6:	79fa      	ldrb	r2, [r7, #7]
 80062d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062dc:	7a5b      	ldrb	r3, [r3, #9]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	b2d1      	uxtb	r1, r2
 80062e4:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <FATFS_LinkDriverEx+0x94>)
 80062e6:	7251      	strb	r1, [r2, #9]
 80062e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80062ea:	7dbb      	ldrb	r3, [r7, #22]
 80062ec:	3330      	adds	r3, #48	; 0x30
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	3301      	adds	r3, #1
 80062f8:	223a      	movs	r2, #58	; 0x3a
 80062fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	3302      	adds	r3, #2
 8006300:	222f      	movs	r2, #47	; 0x2f
 8006302:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	3303      	adds	r3, #3
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
}
 8006312:	4618      	mov	r0, r3
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000140 	.word	0x20000140

08006324 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800632e:	2200      	movs	r2, #0
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffaa 	bl	800628c <FATFS_LinkDriverEx>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <__errno>:
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <__errno+0x8>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000024 	.word	0x20000024

08006350 <__libc_init_array>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	4e0d      	ldr	r6, [pc, #52]	; (8006388 <__libc_init_array+0x38>)
 8006354:	4c0d      	ldr	r4, [pc, #52]	; (800638c <__libc_init_array+0x3c>)
 8006356:	1ba4      	subs	r4, r4, r6
 8006358:	10a4      	asrs	r4, r4, #2
 800635a:	2500      	movs	r5, #0
 800635c:	42a5      	cmp	r5, r4
 800635e:	d109      	bne.n	8006374 <__libc_init_array+0x24>
 8006360:	4e0b      	ldr	r6, [pc, #44]	; (8006390 <__libc_init_array+0x40>)
 8006362:	4c0c      	ldr	r4, [pc, #48]	; (8006394 <__libc_init_array+0x44>)
 8006364:	f000 f8ea 	bl	800653c <_init>
 8006368:	1ba4      	subs	r4, r4, r6
 800636a:	10a4      	asrs	r4, r4, #2
 800636c:	2500      	movs	r5, #0
 800636e:	42a5      	cmp	r5, r4
 8006370:	d105      	bne.n	800637e <__libc_init_array+0x2e>
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006378:	4798      	blx	r3
 800637a:	3501      	adds	r5, #1
 800637c:	e7ee      	b.n	800635c <__libc_init_array+0xc>
 800637e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006382:	4798      	blx	r3
 8006384:	3501      	adds	r5, #1
 8006386:	e7f2      	b.n	800636e <__libc_init_array+0x1e>
 8006388:	08006734 	.word	0x08006734
 800638c:	08006734 	.word	0x08006734
 8006390:	08006734 	.word	0x08006734
 8006394:	08006738 	.word	0x08006738

08006398 <malloc>:
 8006398:	4b02      	ldr	r3, [pc, #8]	; (80063a4 <malloc+0xc>)
 800639a:	4601      	mov	r1, r0
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f000 b861 	b.w	8006464 <_malloc_r>
 80063a2:	bf00      	nop
 80063a4:	20000024 	.word	0x20000024

080063a8 <free>:
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <free+0xc>)
 80063aa:	4601      	mov	r1, r0
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f000 b80b 	b.w	80063c8 <_free_r>
 80063b2:	bf00      	nop
 80063b4:	20000024 	.word	0x20000024

080063b8 <memset>:
 80063b8:	4402      	add	r2, r0
 80063ba:	4603      	mov	r3, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	d100      	bne.n	80063c2 <memset+0xa>
 80063c0:	4770      	bx	lr
 80063c2:	f803 1b01 	strb.w	r1, [r3], #1
 80063c6:	e7f9      	b.n	80063bc <memset+0x4>

080063c8 <_free_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4605      	mov	r5, r0
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d045      	beq.n	800645c <_free_r+0x94>
 80063d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d4:	1f0c      	subs	r4, r1, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfb8      	it	lt
 80063da:	18e4      	addlt	r4, r4, r3
 80063dc:	f000 f8ac 	bl	8006538 <__malloc_lock>
 80063e0:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <_free_r+0x98>)
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	4610      	mov	r0, r2
 80063e6:	b933      	cbnz	r3, 80063f6 <_free_r+0x2e>
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	6014      	str	r4, [r2, #0]
 80063ec:	4628      	mov	r0, r5
 80063ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f2:	f000 b8a2 	b.w	800653a <__malloc_unlock>
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d90c      	bls.n	8006414 <_free_r+0x4c>
 80063fa:	6821      	ldr	r1, [r4, #0]
 80063fc:	1862      	adds	r2, r4, r1
 80063fe:	4293      	cmp	r3, r2
 8006400:	bf04      	itt	eq
 8006402:	681a      	ldreq	r2, [r3, #0]
 8006404:	685b      	ldreq	r3, [r3, #4]
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	bf04      	itt	eq
 800640a:	1852      	addeq	r2, r2, r1
 800640c:	6022      	streq	r2, [r4, #0]
 800640e:	6004      	str	r4, [r0, #0]
 8006410:	e7ec      	b.n	80063ec <_free_r+0x24>
 8006412:	4613      	mov	r3, r2
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	b10a      	cbz	r2, 800641c <_free_r+0x54>
 8006418:	42a2      	cmp	r2, r4
 800641a:	d9fa      	bls.n	8006412 <_free_r+0x4a>
 800641c:	6819      	ldr	r1, [r3, #0]
 800641e:	1858      	adds	r0, r3, r1
 8006420:	42a0      	cmp	r0, r4
 8006422:	d10b      	bne.n	800643c <_free_r+0x74>
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	4401      	add	r1, r0
 8006428:	1858      	adds	r0, r3, r1
 800642a:	4282      	cmp	r2, r0
 800642c:	6019      	str	r1, [r3, #0]
 800642e:	d1dd      	bne.n	80063ec <_free_r+0x24>
 8006430:	6810      	ldr	r0, [r2, #0]
 8006432:	6852      	ldr	r2, [r2, #4]
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	4401      	add	r1, r0
 8006438:	6019      	str	r1, [r3, #0]
 800643a:	e7d7      	b.n	80063ec <_free_r+0x24>
 800643c:	d902      	bls.n	8006444 <_free_r+0x7c>
 800643e:	230c      	movs	r3, #12
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	e7d3      	b.n	80063ec <_free_r+0x24>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	1821      	adds	r1, r4, r0
 8006448:	428a      	cmp	r2, r1
 800644a:	bf04      	itt	eq
 800644c:	6811      	ldreq	r1, [r2, #0]
 800644e:	6852      	ldreq	r2, [r2, #4]
 8006450:	6062      	str	r2, [r4, #4]
 8006452:	bf04      	itt	eq
 8006454:	1809      	addeq	r1, r1, r0
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	605c      	str	r4, [r3, #4]
 800645a:	e7c7      	b.n	80063ec <_free_r+0x24>
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	2000014c 	.word	0x2000014c

08006464 <_malloc_r>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	1ccd      	adds	r5, r1, #3
 8006468:	f025 0503 	bic.w	r5, r5, #3
 800646c:	3508      	adds	r5, #8
 800646e:	2d0c      	cmp	r5, #12
 8006470:	bf38      	it	cc
 8006472:	250c      	movcc	r5, #12
 8006474:	2d00      	cmp	r5, #0
 8006476:	4606      	mov	r6, r0
 8006478:	db01      	blt.n	800647e <_malloc_r+0x1a>
 800647a:	42a9      	cmp	r1, r5
 800647c:	d903      	bls.n	8006486 <_malloc_r+0x22>
 800647e:	230c      	movs	r3, #12
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	2000      	movs	r0, #0
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	f000 f857 	bl	8006538 <__malloc_lock>
 800648a:	4a21      	ldr	r2, [pc, #132]	; (8006510 <_malloc_r+0xac>)
 800648c:	6814      	ldr	r4, [r2, #0]
 800648e:	4621      	mov	r1, r4
 8006490:	b991      	cbnz	r1, 80064b8 <_malloc_r+0x54>
 8006492:	4c20      	ldr	r4, [pc, #128]	; (8006514 <_malloc_r+0xb0>)
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	b91b      	cbnz	r3, 80064a0 <_malloc_r+0x3c>
 8006498:	4630      	mov	r0, r6
 800649a:	f000 f83d 	bl	8006518 <_sbrk_r>
 800649e:	6020      	str	r0, [r4, #0]
 80064a0:	4629      	mov	r1, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	f000 f838 	bl	8006518 <_sbrk_r>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d124      	bne.n	80064f6 <_malloc_r+0x92>
 80064ac:	230c      	movs	r3, #12
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 f842 	bl	800653a <__malloc_unlock>
 80064b6:	e7e4      	b.n	8006482 <_malloc_r+0x1e>
 80064b8:	680b      	ldr	r3, [r1, #0]
 80064ba:	1b5b      	subs	r3, r3, r5
 80064bc:	d418      	bmi.n	80064f0 <_malloc_r+0x8c>
 80064be:	2b0b      	cmp	r3, #11
 80064c0:	d90f      	bls.n	80064e2 <_malloc_r+0x7e>
 80064c2:	600b      	str	r3, [r1, #0]
 80064c4:	50cd      	str	r5, [r1, r3]
 80064c6:	18cc      	adds	r4, r1, r3
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f836 	bl	800653a <__malloc_unlock>
 80064ce:	f104 000b 	add.w	r0, r4, #11
 80064d2:	1d23      	adds	r3, r4, #4
 80064d4:	f020 0007 	bic.w	r0, r0, #7
 80064d8:	1ac3      	subs	r3, r0, r3
 80064da:	d0d3      	beq.n	8006484 <_malloc_r+0x20>
 80064dc:	425a      	negs	r2, r3
 80064de:	50e2      	str	r2, [r4, r3]
 80064e0:	e7d0      	b.n	8006484 <_malloc_r+0x20>
 80064e2:	428c      	cmp	r4, r1
 80064e4:	684b      	ldr	r3, [r1, #4]
 80064e6:	bf16      	itet	ne
 80064e8:	6063      	strne	r3, [r4, #4]
 80064ea:	6013      	streq	r3, [r2, #0]
 80064ec:	460c      	movne	r4, r1
 80064ee:	e7eb      	b.n	80064c8 <_malloc_r+0x64>
 80064f0:	460c      	mov	r4, r1
 80064f2:	6849      	ldr	r1, [r1, #4]
 80064f4:	e7cc      	b.n	8006490 <_malloc_r+0x2c>
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d005      	beq.n	800650c <_malloc_r+0xa8>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4630      	mov	r0, r6
 8006504:	f000 f808 	bl	8006518 <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d0cf      	beq.n	80064ac <_malloc_r+0x48>
 800650c:	6025      	str	r5, [r4, #0]
 800650e:	e7db      	b.n	80064c8 <_malloc_r+0x64>
 8006510:	2000014c 	.word	0x2000014c
 8006514:	20000150 	.word	0x20000150

08006518 <_sbrk_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4c06      	ldr	r4, [pc, #24]	; (8006534 <_sbrk_r+0x1c>)
 800651c:	2300      	movs	r3, #0
 800651e:	4605      	mov	r5, r0
 8006520:	4608      	mov	r0, r1
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	f7f9 fe62 	bl	80001ec <_sbrk>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_sbrk_r+0x1a>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	b103      	cbz	r3, 8006532 <_sbrk_r+0x1a>
 8006530:	602b      	str	r3, [r5, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	200031c0 	.word	0x200031c0

08006538 <__malloc_lock>:
 8006538:	4770      	bx	lr

0800653a <__malloc_unlock>:
 800653a:	4770      	bx	lr

0800653c <_init>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr

08006548 <_fini>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr
